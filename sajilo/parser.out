Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    KEYWORD
    NEWLINE

Grammar

Rule 0     S' -> statement_list
Rule 1     statement_list -> statement
Rule 2     statement_list -> statement_list statement
Rule 3     statement -> identifier
Rule 4     statement -> expression
Rule 5     statement -> if_statement
Rule 6     identifier -> IDENTIFIER
Rule 7     statement -> EXIT STMT_END
Rule 8     primitive -> NUM_INT
Rule 9     primitive -> NUM_FLOAT
Rule 10    primitive -> STRING
Rule 11    primitive -> boolean
Rule 12    expression -> expression PLUS expression
Rule 13    expression -> expression MINUS expression
Rule 14    expression -> expression MUL expression
Rule 15    expression -> expression DIV expression
Rule 16    expression -> expression EXP expression
Rule 17    expression -> expression MOD expression
Rule 18    expression -> expression BIT_AND expression
Rule 19    expression -> expression BIT_OR expression
Rule 20    expression -> expression BIT_XOR expression
Rule 21    expression -> expression LSHIFT expression
Rule 22    expression -> expression RSHIFT expression
Rule 23    boolean -> expression EQ expression
Rule 24    boolean -> expression NEQ expression
Rule 25    boolean -> expression GT expression
Rule 26    boolean -> expression GTE expression
Rule 27    boolean -> expression LT expression
Rule 28    boolean -> expression LTE expression
Rule 29    boolean -> expression AND expression
Rule 30    boolean -> expression OR expression
Rule 31    expression -> MINUS expression
Rule 32    expression -> PLUS expression
Rule 33    expression -> BIT_NEG expression
Rule 34    expression -> NOT expression
Rule 35    expression -> LPAREN expression RPAREN
Rule 36    boolean -> TRUE
Rule 37    boolean -> FALSE
Rule 38    assignable -> primitive
Rule 39    assignable -> expression
Rule 40    arguments -> arguments COMMA expression
Rule 41    arguments -> expression
Rule 42    arguments -> <empty>
Rule 43    expression -> expression QUESTION_MARK expression COLON expression
Rule 44    expression -> LSQBRACK arguments RSQBRACK
Rule 45    expression -> identifier LSQBRACK expression RSQBRACK
Rule 46    expression -> identifier LSQBRACK expression COLON expression RSQBRACK
Rule 47    expression -> identifier LSQBRACK COLON expression RSQBRACK
Rule 48    expression -> identifier LSQBRACK expression COLON RSQBRACK
Rule 49    expression -> identifier LSQBRACK COLON RSQBRACK
Rule 50    statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression STMT_END
Rule 51    expression -> identifier EQUALS assignable STMT_END
Rule 52    if_statement -> IF expression LBRACK statement_list RBRACK
Rule 53    if_statement -> IF expression LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK
Rule 54    if_statement -> IF expression LBRACK statement_list RBRACK ELSE if_statement
Rule 55    expression -> expression IN expression
Rule 56    expression -> expression NOT IN expression
Rule 57    statement -> PRINT arguments STMT_END
Rule 58    statement -> identifier PLUS_EQ expression STMT_END
Rule 59    statement -> identifier MINUS_EQ expression STMT_END
Rule 60    statement -> identifier MUL_EQ expression STMT_END
Rule 61    statement -> identifier DIV_EQ expression STMT_END
Rule 62    statement -> identifier EXP_EQ expression STMT_END
Rule 63    statement -> identifier MOD_EQ expression STMT_END
Rule 64    expression -> identifier DOUBLE_PLUS
Rule 65    expression -> identifier DOUBLE_MINUS
Rule 66    expression -> primitive
Rule 67    expression -> STRING
Rule 68    expression -> identifier
Rule 69    statement -> FOR identifier IN expression ARROW_LTR expression LBRACK statement_list RBRACK
Rule 70    statement -> FOR identifier IN expression ARROW_RTL expression LBRACK statement_list RBRACK
Rule 71    statement -> FOR identifier IN expression LBRACK statement_list RBRACK
Rule 72    statement -> WHILE expression LBRACK statement_list RBRACK
Rule 73    statement -> FOR LBRACK statement_list RBRACK
Rule 74    statement -> FUNCTION identifier LPAREN arguments RPAREN LBRACK statement_list RBRACK
Rule 75    statement -> FUNCTION identifier LBRACK statement_list RBRACK
Rule 76    statement -> RETURN expression STMT_END
Rule 77    expression -> identifier LPAREN arguments RPAREN
Rule 78    statement -> identifier LPAREN arguments RPAREN STMT_END

Terminals, with rules where they appear

AND                  : 29
ARROW_LTR            : 69
ARROW_RTL            : 70
BIT_AND              : 18
BIT_NEG              : 33
BIT_OR               : 19
BIT_XOR              : 20
COLON                : 43 46 47 48 49
COMMA                : 40
DIV                  : 15
DIV_EQ               : 61
DOUBLE_MINUS         : 65
DOUBLE_PLUS          : 64
ELSE                 : 53 54
EQ                   : 23
EQUALS               : 50 51
EXIT                 : 7
EXP                  : 16
EXP_EQ               : 62
FALSE                : 37
FOR                  : 69 70 71 73
FUNCTION             : 74 75
GT                   : 25
GTE                  : 26
IDENTIFIER           : 6
IF                   : 52 53 54
IN                   : 55 56 69 70 71
KEYWORD              : 
LBRACK               : 52 53 53 54 69 70 71 72 73 74 75
LPAREN               : 35 74 77 78
LSHIFT               : 21
LSQBRACK             : 44 45 46 47 48 49 50
LT                   : 27
LTE                  : 28
MINUS                : 13 31
MINUS_EQ             : 59
MOD                  : 17
MOD_EQ               : 63
MUL                  : 14
MUL_EQ               : 60
NEQ                  : 24
NEWLINE              : 
NOT                  : 34 56
NUM_FLOAT            : 9
NUM_INT              : 8
OR                   : 30
PLUS                 : 12 32
PLUS_EQ              : 58
PRINT                : 57
QUESTION_MARK        : 43
RBRACK               : 52 53 53 54 69 70 71 72 73 74 75
RETURN               : 76
RPAREN               : 35 74 77 78
RSHIFT               : 22
RSQBRACK             : 44 45 46 47 48 49 50
STMT_END             : 7 50 51 57 58 59 60 61 62 63 76 78
STRING               : 10 67
TRUE                 : 36
WHILE                : 72
error                : 

Nonterminals, with rules where they appear

arguments            : 40 44 57 74 77 78
assignable           : 51
boolean              : 11
expression           : 4 12 12 13 13 14 14 15 15 16 16 17 17 18 18 19 19 20 20 21 21 22 22 23 23 24 24 25 25 26 26 27 27 28 28 29 29 30 30 31 32 33 34 35 39 40 41 43 43 43 45 46 46 47 48 50 50 52 53 54 55 55 56 56 58 59 60 61 62 63 69 69 70 70 71 72 76
identifier           : 3 45 46 47 48 49 50 51 58 59 60 61 62 63 64 65 68 69 70 71 74 75 77 78
if_statement         : 5 54
primitive            : 38 66
statement            : 1 2
statement_list       : 2 52 53 53 54 69 70 71 72 73 74 75 0

Parsing method: LALR

state 0

    (0) S' -> . statement_list
    (1) statement_list -> . statement
    (2) statement_list -> . statement_list statement
    (3) statement -> . identifier
    (4) statement -> . expression
    (5) statement -> . if_statement
    (7) statement -> . EXIT STMT_END
    (50) statement -> . identifier LSQBRACK expression RSQBRACK EQUALS expression STMT_END
    (57) statement -> . PRINT arguments STMT_END
    (58) statement -> . identifier PLUS_EQ expression STMT_END
    (59) statement -> . identifier MINUS_EQ expression STMT_END
    (60) statement -> . identifier MUL_EQ expression STMT_END
    (61) statement -> . identifier DIV_EQ expression STMT_END
    (62) statement -> . identifier EXP_EQ expression STMT_END
    (63) statement -> . identifier MOD_EQ expression STMT_END
    (69) statement -> . FOR identifier IN expression ARROW_LTR expression LBRACK statement_list RBRACK
    (70) statement -> . FOR identifier IN expression ARROW_RTL expression LBRACK statement_list RBRACK
    (71) statement -> . FOR identifier IN expression LBRACK statement_list RBRACK
    (72) statement -> . WHILE expression LBRACK statement_list RBRACK
    (73) statement -> . FOR LBRACK statement_list RBRACK
    (74) statement -> . FUNCTION identifier LPAREN arguments RPAREN LBRACK statement_list RBRACK
    (75) statement -> . FUNCTION identifier LBRACK statement_list RBRACK
    (76) statement -> . RETURN expression STMT_END
    (78) statement -> . identifier LPAREN arguments RPAREN STMT_END
    (6) identifier -> . IDENTIFIER
    (12) expression -> . expression PLUS expression
    (13) expression -> . expression MINUS expression
    (14) expression -> . expression MUL expression
    (15) expression -> . expression DIV expression
    (16) expression -> . expression EXP expression
    (17) expression -> . expression MOD expression
    (18) expression -> . expression BIT_AND expression
    (19) expression -> . expression BIT_OR expression
    (20) expression -> . expression BIT_XOR expression
    (21) expression -> . expression LSHIFT expression
    (22) expression -> . expression RSHIFT expression
    (31) expression -> . MINUS expression
    (32) expression -> . PLUS expression
    (33) expression -> . BIT_NEG expression
    (34) expression -> . NOT expression
    (35) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression QUESTION_MARK expression COLON expression
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable STMT_END
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier DOUBLE_PLUS
    (65) expression -> . identifier DOUBLE_MINUS
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (77) expression -> . identifier LPAREN arguments RPAREN
    (52) if_statement -> . IF expression LBRACK statement_list RBRACK
    (53) if_statement -> . IF expression LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK
    (54) if_statement -> . IF expression LBRACK statement_list RBRACK ELSE if_statement
    (8) primitive -> . NUM_INT
    (9) primitive -> . NUM_FLOAT
    (10) primitive -> . STRING
    (11) primitive -> . boolean
    (23) boolean -> . expression EQ expression
    (24) boolean -> . expression NEQ expression
    (25) boolean -> . expression GT expression
    (26) boolean -> . expression GTE expression
    (27) boolean -> . expression LT expression
    (28) boolean -> . expression LTE expression
    (29) boolean -> . expression AND expression
    (30) boolean -> . expression OR expression
    (36) boolean -> . TRUE
    (37) boolean -> . FALSE

    EXIT            shift and go to state 6
    PRINT           shift and go to state 8
    FOR             shift and go to state 9
    WHILE           shift and go to state 10
    FUNCTION        shift and go to state 11
    RETURN          shift and go to state 13
    IDENTIFIER      shift and go to state 14
    MINUS           shift and go to state 16
    PLUS            shift and go to state 15
    BIT_NEG         shift and go to state 17
    NOT             shift and go to state 18
    LPAREN          shift and go to state 12
    LSQBRACK        shift and go to state 7
    STRING          shift and go to state 20
    IF              shift and go to state 21
    NUM_INT         shift and go to state 22
    NUM_FLOAT       shift and go to state 23
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26

    statement_list                 shift and go to state 1
    statement                      shift and go to state 2
    identifier                     shift and go to state 3
    expression                     shift and go to state 4
    if_statement                   shift and go to state 5
    primitive                      shift and go to state 19
    boolean                        shift and go to state 24

state 1

    (0) S' -> statement_list .
    (2) statement_list -> statement_list . statement
    (3) statement -> . identifier
    (4) statement -> . expression
    (5) statement -> . if_statement
    (7) statement -> . EXIT STMT_END
    (50) statement -> . identifier LSQBRACK expression RSQBRACK EQUALS expression STMT_END
    (57) statement -> . PRINT arguments STMT_END
    (58) statement -> . identifier PLUS_EQ expression STMT_END
    (59) statement -> . identifier MINUS_EQ expression STMT_END
    (60) statement -> . identifier MUL_EQ expression STMT_END
    (61) statement -> . identifier DIV_EQ expression STMT_END
    (62) statement -> . identifier EXP_EQ expression STMT_END
    (63) statement -> . identifier MOD_EQ expression STMT_END
    (69) statement -> . FOR identifier IN expression ARROW_LTR expression LBRACK statement_list RBRACK
    (70) statement -> . FOR identifier IN expression ARROW_RTL expression LBRACK statement_list RBRACK
    (71) statement -> . FOR identifier IN expression LBRACK statement_list RBRACK
    (72) statement -> . WHILE expression LBRACK statement_list RBRACK
    (73) statement -> . FOR LBRACK statement_list RBRACK
    (74) statement -> . FUNCTION identifier LPAREN arguments RPAREN LBRACK statement_list RBRACK
    (75) statement -> . FUNCTION identifier LBRACK statement_list RBRACK
    (76) statement -> . RETURN expression STMT_END
    (78) statement -> . identifier LPAREN arguments RPAREN STMT_END
    (6) identifier -> . IDENTIFIER
    (12) expression -> . expression PLUS expression
    (13) expression -> . expression MINUS expression
    (14) expression -> . expression MUL expression
    (15) expression -> . expression DIV expression
    (16) expression -> . expression EXP expression
    (17) expression -> . expression MOD expression
    (18) expression -> . expression BIT_AND expression
    (19) expression -> . expression BIT_OR expression
    (20) expression -> . expression BIT_XOR expression
    (21) expression -> . expression LSHIFT expression
    (22) expression -> . expression RSHIFT expression
    (31) expression -> . MINUS expression
    (32) expression -> . PLUS expression
    (33) expression -> . BIT_NEG expression
    (34) expression -> . NOT expression
    (35) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression QUESTION_MARK expression COLON expression
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable STMT_END
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier DOUBLE_PLUS
    (65) expression -> . identifier DOUBLE_MINUS
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (77) expression -> . identifier LPAREN arguments RPAREN
    (52) if_statement -> . IF expression LBRACK statement_list RBRACK
    (53) if_statement -> . IF expression LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK
    (54) if_statement -> . IF expression LBRACK statement_list RBRACK ELSE if_statement
    (8) primitive -> . NUM_INT
    (9) primitive -> . NUM_FLOAT
    (10) primitive -> . STRING
    (11) primitive -> . boolean
    (23) boolean -> . expression EQ expression
    (24) boolean -> . expression NEQ expression
    (25) boolean -> . expression GT expression
    (26) boolean -> . expression GTE expression
    (27) boolean -> . expression LT expression
    (28) boolean -> . expression LTE expression
    (29) boolean -> . expression AND expression
    (30) boolean -> . expression OR expression
    (36) boolean -> . TRUE
    (37) boolean -> . FALSE

    EXIT            shift and go to state 6
    PRINT           shift and go to state 8
    FOR             shift and go to state 9
    WHILE           shift and go to state 10
    FUNCTION        shift and go to state 11
    RETURN          shift and go to state 13
    IDENTIFIER      shift and go to state 14
    MINUS           shift and go to state 16
    PLUS            shift and go to state 15
    BIT_NEG         shift and go to state 17
    NOT             shift and go to state 18
    LPAREN          shift and go to state 12
    LSQBRACK        shift and go to state 7
    STRING          shift and go to state 20
    IF              shift and go to state 21
    NUM_INT         shift and go to state 22
    NUM_FLOAT       shift and go to state 23
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26

    statement                      shift and go to state 27
    identifier                     shift and go to state 3
    expression                     shift and go to state 4
    if_statement                   shift and go to state 5
    primitive                      shift and go to state 19
    boolean                        shift and go to state 24

state 2

    (1) statement_list -> statement .

    EXIT            reduce using rule 1 (statement_list -> statement .)
    PRINT           reduce using rule 1 (statement_list -> statement .)
    FOR             reduce using rule 1 (statement_list -> statement .)
    WHILE           reduce using rule 1 (statement_list -> statement .)
    FUNCTION        reduce using rule 1 (statement_list -> statement .)
    RETURN          reduce using rule 1 (statement_list -> statement .)
    IDENTIFIER      reduce using rule 1 (statement_list -> statement .)
    MINUS           reduce using rule 1 (statement_list -> statement .)
    PLUS            reduce using rule 1 (statement_list -> statement .)
    BIT_NEG         reduce using rule 1 (statement_list -> statement .)
    NOT             reduce using rule 1 (statement_list -> statement .)
    LPAREN          reduce using rule 1 (statement_list -> statement .)
    LSQBRACK        reduce using rule 1 (statement_list -> statement .)
    STRING          reduce using rule 1 (statement_list -> statement .)
    IF              reduce using rule 1 (statement_list -> statement .)
    NUM_INT         reduce using rule 1 (statement_list -> statement .)
    NUM_FLOAT       reduce using rule 1 (statement_list -> statement .)
    TRUE            reduce using rule 1 (statement_list -> statement .)
    FALSE           reduce using rule 1 (statement_list -> statement .)
    $end            reduce using rule 1 (statement_list -> statement .)
    RBRACK          reduce using rule 1 (statement_list -> statement .)


state 3

    (3) statement -> identifier .
    (50) statement -> identifier . LSQBRACK expression RSQBRACK EQUALS expression STMT_END
    (58) statement -> identifier . PLUS_EQ expression STMT_END
    (59) statement -> identifier . MINUS_EQ expression STMT_END
    (60) statement -> identifier . MUL_EQ expression STMT_END
    (61) statement -> identifier . DIV_EQ expression STMT_END
    (62) statement -> identifier . EXP_EQ expression STMT_END
    (63) statement -> identifier . MOD_EQ expression STMT_END
    (78) statement -> identifier . LPAREN arguments RPAREN STMT_END
    (45) expression -> identifier . LSQBRACK expression RSQBRACK
    (46) expression -> identifier . LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> identifier . LSQBRACK COLON expression RSQBRACK
    (48) expression -> identifier . LSQBRACK expression COLON RSQBRACK
    (49) expression -> identifier . LSQBRACK COLON RSQBRACK
    (51) expression -> identifier . EQUALS assignable STMT_END
    (64) expression -> identifier . DOUBLE_PLUS
    (65) expression -> identifier . DOUBLE_MINUS
    (68) expression -> identifier .
    (77) expression -> identifier . LPAREN arguments RPAREN

  ! shift/reduce conflict for LSQBRACK resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! reduce/reduce conflict for PLUS resolved using rule 3 (statement -> identifier .)
  ! reduce/reduce conflict for MINUS resolved using rule 3 (statement -> identifier .)
  ! reduce/reduce conflict for NOT resolved using rule 3 (statement -> identifier .)
  ! reduce/reduce conflict for EXIT resolved using rule 3 (statement -> identifier .)
  ! reduce/reduce conflict for PRINT resolved using rule 3 (statement -> identifier .)
  ! reduce/reduce conflict for FOR resolved using rule 3 (statement -> identifier .)
  ! reduce/reduce conflict for WHILE resolved using rule 3 (statement -> identifier .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 3 (statement -> identifier .)
  ! reduce/reduce conflict for RETURN resolved using rule 3 (statement -> identifier .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 3 (statement -> identifier .)
  ! reduce/reduce conflict for BIT_NEG resolved using rule 3 (statement -> identifier .)
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LSQBRACK resolved as shift
  ! reduce/reduce conflict for STRING resolved using rule 3 (statement -> identifier .)
  ! reduce/reduce conflict for IF resolved using rule 3 (statement -> identifier .)
  ! reduce/reduce conflict for NUM_INT resolved using rule 3 (statement -> identifier .)
  ! reduce/reduce conflict for NUM_FLOAT resolved using rule 3 (statement -> identifier .)
  ! reduce/reduce conflict for TRUE resolved using rule 3 (statement -> identifier .)
  ! reduce/reduce conflict for FALSE resolved using rule 3 (statement -> identifier .)
  ! reduce/reduce conflict for $end resolved using rule 3 (statement -> identifier .)
  ! reduce/reduce conflict for RBRACK resolved using rule 3 (statement -> identifier .)
    EXIT            reduce using rule 3 (statement -> identifier .)
    PRINT           reduce using rule 3 (statement -> identifier .)
    FOR             reduce using rule 3 (statement -> identifier .)
    WHILE           reduce using rule 3 (statement -> identifier .)
    FUNCTION        reduce using rule 3 (statement -> identifier .)
    RETURN          reduce using rule 3 (statement -> identifier .)
    IDENTIFIER      reduce using rule 3 (statement -> identifier .)
    MINUS           reduce using rule 3 (statement -> identifier .)
    PLUS            reduce using rule 3 (statement -> identifier .)
    BIT_NEG         reduce using rule 3 (statement -> identifier .)
    NOT             reduce using rule 3 (statement -> identifier .)
    STRING          reduce using rule 3 (statement -> identifier .)
    IF              reduce using rule 3 (statement -> identifier .)
    NUM_INT         reduce using rule 3 (statement -> identifier .)
    NUM_FLOAT       reduce using rule 3 (statement -> identifier .)
    TRUE            reduce using rule 3 (statement -> identifier .)
    FALSE           reduce using rule 3 (statement -> identifier .)
    $end            reduce using rule 3 (statement -> identifier .)
    RBRACK          reduce using rule 3 (statement -> identifier .)
    LSQBRACK        shift and go to state 28
    PLUS_EQ         shift and go to state 30
    MINUS_EQ        shift and go to state 31
    MUL_EQ          shift and go to state 32
    DIV_EQ          shift and go to state 33
    EXP_EQ          shift and go to state 34
    MOD_EQ          shift and go to state 35
    LPAREN          shift and go to state 36
    EQUALS          shift and go to state 29
    DOUBLE_PLUS     shift and go to state 37
    DOUBLE_MINUS    shift and go to state 38
    MUL             reduce using rule 68 (expression -> identifier .)
    DIV             reduce using rule 68 (expression -> identifier .)
    EXP             reduce using rule 68 (expression -> identifier .)
    MOD             reduce using rule 68 (expression -> identifier .)
    BIT_AND         reduce using rule 68 (expression -> identifier .)
    BIT_OR          reduce using rule 68 (expression -> identifier .)
    BIT_XOR         reduce using rule 68 (expression -> identifier .)
    LSHIFT          reduce using rule 68 (expression -> identifier .)
    RSHIFT          reduce using rule 68 (expression -> identifier .)
    QUESTION_MARK   reduce using rule 68 (expression -> identifier .)
    IN              reduce using rule 68 (expression -> identifier .)
    EQ              reduce using rule 68 (expression -> identifier .)
    NEQ             reduce using rule 68 (expression -> identifier .)
    GT              reduce using rule 68 (expression -> identifier .)
    GTE             reduce using rule 68 (expression -> identifier .)
    LT              reduce using rule 68 (expression -> identifier .)
    LTE             reduce using rule 68 (expression -> identifier .)
    AND             reduce using rule 68 (expression -> identifier .)
    OR              reduce using rule 68 (expression -> identifier .)

  ! LPAREN          [ reduce using rule 3 (statement -> identifier .) ]
  ! LSQBRACK        [ reduce using rule 3 (statement -> identifier .) ]
  ! PLUS            [ reduce using rule 68 (expression -> identifier .) ]
  ! MINUS           [ reduce using rule 68 (expression -> identifier .) ]
  ! NOT             [ reduce using rule 68 (expression -> identifier .) ]
  ! EXIT            [ reduce using rule 68 (expression -> identifier .) ]
  ! PRINT           [ reduce using rule 68 (expression -> identifier .) ]
  ! FOR             [ reduce using rule 68 (expression -> identifier .) ]
  ! WHILE           [ reduce using rule 68 (expression -> identifier .) ]
  ! FUNCTION        [ reduce using rule 68 (expression -> identifier .) ]
  ! RETURN          [ reduce using rule 68 (expression -> identifier .) ]
  ! IDENTIFIER      [ reduce using rule 68 (expression -> identifier .) ]
  ! BIT_NEG         [ reduce using rule 68 (expression -> identifier .) ]
  ! LPAREN          [ reduce using rule 68 (expression -> identifier .) ]
  ! LSQBRACK        [ reduce using rule 68 (expression -> identifier .) ]
  ! STRING          [ reduce using rule 68 (expression -> identifier .) ]
  ! IF              [ reduce using rule 68 (expression -> identifier .) ]
  ! NUM_INT         [ reduce using rule 68 (expression -> identifier .) ]
  ! NUM_FLOAT       [ reduce using rule 68 (expression -> identifier .) ]
  ! TRUE            [ reduce using rule 68 (expression -> identifier .) ]
  ! FALSE           [ reduce using rule 68 (expression -> identifier .) ]
  ! $end            [ reduce using rule 68 (expression -> identifier .) ]
  ! RBRACK          [ reduce using rule 68 (expression -> identifier .) ]


state 4

    (4) statement -> expression .
    (12) expression -> expression . PLUS expression
    (13) expression -> expression . MINUS expression
    (14) expression -> expression . MUL expression
    (15) expression -> expression . DIV expression
    (16) expression -> expression . EXP expression
    (17) expression -> expression . MOD expression
    (18) expression -> expression . BIT_AND expression
    (19) expression -> expression . BIT_OR expression
    (20) expression -> expression . BIT_XOR expression
    (21) expression -> expression . LSHIFT expression
    (22) expression -> expression . RSHIFT expression
    (43) expression -> expression . QUESTION_MARK expression COLON expression
    (55) expression -> expression . IN expression
    (56) expression -> expression . NOT IN expression
    (23) boolean -> expression . EQ expression
    (24) boolean -> expression . NEQ expression
    (25) boolean -> expression . GT expression
    (26) boolean -> expression . GTE expression
    (27) boolean -> expression . LT expression
    (28) boolean -> expression . LTE expression
    (29) boolean -> expression . AND expression
    (30) boolean -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
    EXIT            reduce using rule 4 (statement -> expression .)
    PRINT           reduce using rule 4 (statement -> expression .)
    FOR             reduce using rule 4 (statement -> expression .)
    WHILE           reduce using rule 4 (statement -> expression .)
    FUNCTION        reduce using rule 4 (statement -> expression .)
    RETURN          reduce using rule 4 (statement -> expression .)
    IDENTIFIER      reduce using rule 4 (statement -> expression .)
    BIT_NEG         reduce using rule 4 (statement -> expression .)
    LPAREN          reduce using rule 4 (statement -> expression .)
    LSQBRACK        reduce using rule 4 (statement -> expression .)
    STRING          reduce using rule 4 (statement -> expression .)
    IF              reduce using rule 4 (statement -> expression .)
    NUM_INT         reduce using rule 4 (statement -> expression .)
    NUM_FLOAT       reduce using rule 4 (statement -> expression .)
    TRUE            reduce using rule 4 (statement -> expression .)
    FALSE           reduce using rule 4 (statement -> expression .)
    $end            reduce using rule 4 (statement -> expression .)
    RBRACK          reduce using rule 4 (statement -> expression .)
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    MUL             shift and go to state 41
    DIV             shift and go to state 42
    EXP             shift and go to state 43
    MOD             shift and go to state 44
    BIT_AND         shift and go to state 45
    BIT_OR          shift and go to state 46
    BIT_XOR         shift and go to state 47
    LSHIFT          shift and go to state 48
    RSHIFT          shift and go to state 49
    QUESTION_MARK   shift and go to state 50
    IN              shift and go to state 51
    NOT             shift and go to state 52
    EQ              shift and go to state 53
    NEQ             shift and go to state 54
    GT              shift and go to state 55
    GTE             shift and go to state 56
    LT              shift and go to state 57
    LTE             shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60

  ! MINUS           [ reduce using rule 4 (statement -> expression .) ]
  ! PLUS            [ reduce using rule 4 (statement -> expression .) ]
  ! NOT             [ reduce using rule 4 (statement -> expression .) ]


state 5

    (5) statement -> if_statement .

    EXIT            reduce using rule 5 (statement -> if_statement .)
    PRINT           reduce using rule 5 (statement -> if_statement .)
    FOR             reduce using rule 5 (statement -> if_statement .)
    WHILE           reduce using rule 5 (statement -> if_statement .)
    FUNCTION        reduce using rule 5 (statement -> if_statement .)
    RETURN          reduce using rule 5 (statement -> if_statement .)
    IDENTIFIER      reduce using rule 5 (statement -> if_statement .)
    MINUS           reduce using rule 5 (statement -> if_statement .)
    PLUS            reduce using rule 5 (statement -> if_statement .)
    BIT_NEG         reduce using rule 5 (statement -> if_statement .)
    NOT             reduce using rule 5 (statement -> if_statement .)
    LPAREN          reduce using rule 5 (statement -> if_statement .)
    LSQBRACK        reduce using rule 5 (statement -> if_statement .)
    STRING          reduce using rule 5 (statement -> if_statement .)
    IF              reduce using rule 5 (statement -> if_statement .)
    NUM_INT         reduce using rule 5 (statement -> if_statement .)
    NUM_FLOAT       reduce using rule 5 (statement -> if_statement .)
    TRUE            reduce using rule 5 (statement -> if_statement .)
    FALSE           reduce using rule 5 (statement -> if_statement .)
    $end            reduce using rule 5 (statement -> if_statement .)
    RBRACK          reduce using rule 5 (statement -> if_statement .)


state 6

    (7) statement -> EXIT . STMT_END

    STMT_END        shift and go to state 61


state 7

    (44) expression -> LSQBRACK . arguments RSQBRACK
    (40) arguments -> . arguments COMMA expression
    (41) arguments -> . expression
    (42) arguments -> .
    (12) expression -> . expression PLUS expression
    (13) expression -> . expression MINUS expression
    (14) expression -> . expression MUL expression
    (15) expression -> . expression DIV expression
    (16) expression -> . expression EXP expression
    (17) expression -> . expression MOD expression
    (18) expression -> . expression BIT_AND expression
    (19) expression -> . expression BIT_OR expression
    (20) expression -> . expression BIT_XOR expression
    (21) expression -> . expression LSHIFT expression
    (22) expression -> . expression RSHIFT expression
    (31) expression -> . MINUS expression
    (32) expression -> . PLUS expression
    (33) expression -> . BIT_NEG expression
    (34) expression -> . NOT expression
    (35) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression QUESTION_MARK expression COLON expression
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable STMT_END
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier DOUBLE_PLUS
    (65) expression -> . identifier DOUBLE_MINUS
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (77) expression -> . identifier LPAREN arguments RPAREN
    (6) identifier -> . IDENTIFIER
    (8) primitive -> . NUM_INT
    (9) primitive -> . NUM_FLOAT
    (10) primitive -> . STRING
    (11) primitive -> . boolean
    (23) boolean -> . expression EQ expression
    (24) boolean -> . expression NEQ expression
    (25) boolean -> . expression GT expression
    (26) boolean -> . expression GTE expression
    (27) boolean -> . expression LT expression
    (28) boolean -> . expression LTE expression
    (29) boolean -> . expression AND expression
    (30) boolean -> . expression OR expression
    (36) boolean -> . TRUE
    (37) boolean -> . FALSE

    RSQBRACK        reduce using rule 42 (arguments -> .)
    COMMA           reduce using rule 42 (arguments -> .)
    MINUS           shift and go to state 16
    PLUS            shift and go to state 15
    BIT_NEG         shift and go to state 17
    NOT             shift and go to state 18
    LPAREN          shift and go to state 12
    LSQBRACK        shift and go to state 7
    STRING          shift and go to state 20
    IDENTIFIER      shift and go to state 14
    NUM_INT         shift and go to state 22
    NUM_FLOAT       shift and go to state 23
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26

    arguments                      shift and go to state 62
    expression                     shift and go to state 63
    identifier                     shift and go to state 64
    primitive                      shift and go to state 19
    boolean                        shift and go to state 24

state 8

    (57) statement -> PRINT . arguments STMT_END
    (40) arguments -> . arguments COMMA expression
    (41) arguments -> . expression
    (42) arguments -> .
    (12) expression -> . expression PLUS expression
    (13) expression -> . expression MINUS expression
    (14) expression -> . expression MUL expression
    (15) expression -> . expression DIV expression
    (16) expression -> . expression EXP expression
    (17) expression -> . expression MOD expression
    (18) expression -> . expression BIT_AND expression
    (19) expression -> . expression BIT_OR expression
    (20) expression -> . expression BIT_XOR expression
    (21) expression -> . expression LSHIFT expression
    (22) expression -> . expression RSHIFT expression
    (31) expression -> . MINUS expression
    (32) expression -> . PLUS expression
    (33) expression -> . BIT_NEG expression
    (34) expression -> . NOT expression
    (35) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression QUESTION_MARK expression COLON expression
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable STMT_END
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier DOUBLE_PLUS
    (65) expression -> . identifier DOUBLE_MINUS
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (77) expression -> . identifier LPAREN arguments RPAREN
    (6) identifier -> . IDENTIFIER
    (8) primitive -> . NUM_INT
    (9) primitive -> . NUM_FLOAT
    (10) primitive -> . STRING
    (11) primitive -> . boolean
    (23) boolean -> . expression EQ expression
    (24) boolean -> . expression NEQ expression
    (25) boolean -> . expression GT expression
    (26) boolean -> . expression GTE expression
    (27) boolean -> . expression LT expression
    (28) boolean -> . expression LTE expression
    (29) boolean -> . expression AND expression
    (30) boolean -> . expression OR expression
    (36) boolean -> . TRUE
    (37) boolean -> . FALSE

    STMT_END        reduce using rule 42 (arguments -> .)
    COMMA           reduce using rule 42 (arguments -> .)
    MINUS           shift and go to state 16
    PLUS            shift and go to state 15
    BIT_NEG         shift and go to state 17
    NOT             shift and go to state 18
    LPAREN          shift and go to state 12
    LSQBRACK        shift and go to state 7
    STRING          shift and go to state 20
    IDENTIFIER      shift and go to state 14
    NUM_INT         shift and go to state 22
    NUM_FLOAT       shift and go to state 23
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26

    arguments                      shift and go to state 65
    expression                     shift and go to state 63
    identifier                     shift and go to state 64
    primitive                      shift and go to state 19
    boolean                        shift and go to state 24

state 9

    (69) statement -> FOR . identifier IN expression ARROW_LTR expression LBRACK statement_list RBRACK
    (70) statement -> FOR . identifier IN expression ARROW_RTL expression LBRACK statement_list RBRACK
    (71) statement -> FOR . identifier IN expression LBRACK statement_list RBRACK
    (73) statement -> FOR . LBRACK statement_list RBRACK
    (6) identifier -> . IDENTIFIER

    LBRACK          shift and go to state 67
    IDENTIFIER      shift and go to state 14

    identifier                     shift and go to state 66

state 10

    (72) statement -> WHILE . expression LBRACK statement_list RBRACK
    (12) expression -> . expression PLUS expression
    (13) expression -> . expression MINUS expression
    (14) expression -> . expression MUL expression
    (15) expression -> . expression DIV expression
    (16) expression -> . expression EXP expression
    (17) expression -> . expression MOD expression
    (18) expression -> . expression BIT_AND expression
    (19) expression -> . expression BIT_OR expression
    (20) expression -> . expression BIT_XOR expression
    (21) expression -> . expression LSHIFT expression
    (22) expression -> . expression RSHIFT expression
    (31) expression -> . MINUS expression
    (32) expression -> . PLUS expression
    (33) expression -> . BIT_NEG expression
    (34) expression -> . NOT expression
    (35) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression QUESTION_MARK expression COLON expression
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable STMT_END
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier DOUBLE_PLUS
    (65) expression -> . identifier DOUBLE_MINUS
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (77) expression -> . identifier LPAREN arguments RPAREN
    (6) identifier -> . IDENTIFIER
    (8) primitive -> . NUM_INT
    (9) primitive -> . NUM_FLOAT
    (10) primitive -> . STRING
    (11) primitive -> . boolean
    (23) boolean -> . expression EQ expression
    (24) boolean -> . expression NEQ expression
    (25) boolean -> . expression GT expression
    (26) boolean -> . expression GTE expression
    (27) boolean -> . expression LT expression
    (28) boolean -> . expression LTE expression
    (29) boolean -> . expression AND expression
    (30) boolean -> . expression OR expression
    (36) boolean -> . TRUE
    (37) boolean -> . FALSE

    MINUS           shift and go to state 16
    PLUS            shift and go to state 15
    BIT_NEG         shift and go to state 17
    NOT             shift and go to state 18
    LPAREN          shift and go to state 12
    LSQBRACK        shift and go to state 7
    STRING          shift and go to state 20
    IDENTIFIER      shift and go to state 14
    NUM_INT         shift and go to state 22
    NUM_FLOAT       shift and go to state 23
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26

    expression                     shift and go to state 68
    identifier                     shift and go to state 64
    primitive                      shift and go to state 19
    boolean                        shift and go to state 24

state 11

    (74) statement -> FUNCTION . identifier LPAREN arguments RPAREN LBRACK statement_list RBRACK
    (75) statement -> FUNCTION . identifier LBRACK statement_list RBRACK
    (6) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 14

    identifier                     shift and go to state 69

state 12

    (35) expression -> LPAREN . expression RPAREN
    (12) expression -> . expression PLUS expression
    (13) expression -> . expression MINUS expression
    (14) expression -> . expression MUL expression
    (15) expression -> . expression DIV expression
    (16) expression -> . expression EXP expression
    (17) expression -> . expression MOD expression
    (18) expression -> . expression BIT_AND expression
    (19) expression -> . expression BIT_OR expression
    (20) expression -> . expression BIT_XOR expression
    (21) expression -> . expression LSHIFT expression
    (22) expression -> . expression RSHIFT expression
    (31) expression -> . MINUS expression
    (32) expression -> . PLUS expression
    (33) expression -> . BIT_NEG expression
    (34) expression -> . NOT expression
    (35) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression QUESTION_MARK expression COLON expression
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable STMT_END
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier DOUBLE_PLUS
    (65) expression -> . identifier DOUBLE_MINUS
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (77) expression -> . identifier LPAREN arguments RPAREN
    (6) identifier -> . IDENTIFIER
    (8) primitive -> . NUM_INT
    (9) primitive -> . NUM_FLOAT
    (10) primitive -> . STRING
    (11) primitive -> . boolean
    (23) boolean -> . expression EQ expression
    (24) boolean -> . expression NEQ expression
    (25) boolean -> . expression GT expression
    (26) boolean -> . expression GTE expression
    (27) boolean -> . expression LT expression
    (28) boolean -> . expression LTE expression
    (29) boolean -> . expression AND expression
    (30) boolean -> . expression OR expression
    (36) boolean -> . TRUE
    (37) boolean -> . FALSE

    MINUS           shift and go to state 16
    PLUS            shift and go to state 15
    BIT_NEG         shift and go to state 17
    NOT             shift and go to state 18
    LPAREN          shift and go to state 12
    LSQBRACK        shift and go to state 7
    STRING          shift and go to state 20
    IDENTIFIER      shift and go to state 14
    NUM_INT         shift and go to state 22
    NUM_FLOAT       shift and go to state 23
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26

    expression                     shift and go to state 70
    identifier                     shift and go to state 64
    primitive                      shift and go to state 19
    boolean                        shift and go to state 24

state 13

    (76) statement -> RETURN . expression STMT_END
    (12) expression -> . expression PLUS expression
    (13) expression -> . expression MINUS expression
    (14) expression -> . expression MUL expression
    (15) expression -> . expression DIV expression
    (16) expression -> . expression EXP expression
    (17) expression -> . expression MOD expression
    (18) expression -> . expression BIT_AND expression
    (19) expression -> . expression BIT_OR expression
    (20) expression -> . expression BIT_XOR expression
    (21) expression -> . expression LSHIFT expression
    (22) expression -> . expression RSHIFT expression
    (31) expression -> . MINUS expression
    (32) expression -> . PLUS expression
    (33) expression -> . BIT_NEG expression
    (34) expression -> . NOT expression
    (35) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression QUESTION_MARK expression COLON expression
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable STMT_END
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier DOUBLE_PLUS
    (65) expression -> . identifier DOUBLE_MINUS
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (77) expression -> . identifier LPAREN arguments RPAREN
    (6) identifier -> . IDENTIFIER
    (8) primitive -> . NUM_INT
    (9) primitive -> . NUM_FLOAT
    (10) primitive -> . STRING
    (11) primitive -> . boolean
    (23) boolean -> . expression EQ expression
    (24) boolean -> . expression NEQ expression
    (25) boolean -> . expression GT expression
    (26) boolean -> . expression GTE expression
    (27) boolean -> . expression LT expression
    (28) boolean -> . expression LTE expression
    (29) boolean -> . expression AND expression
    (30) boolean -> . expression OR expression
    (36) boolean -> . TRUE
    (37) boolean -> . FALSE

    MINUS           shift and go to state 16
    PLUS            shift and go to state 15
    BIT_NEG         shift and go to state 17
    NOT             shift and go to state 18
    LPAREN          shift and go to state 12
    LSQBRACK        shift and go to state 7
    STRING          shift and go to state 20
    IDENTIFIER      shift and go to state 14
    NUM_INT         shift and go to state 22
    NUM_FLOAT       shift and go to state 23
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26

    expression                     shift and go to state 71
    identifier                     shift and go to state 64
    primitive                      shift and go to state 19
    boolean                        shift and go to state 24

state 14

    (6) identifier -> IDENTIFIER .

    LSQBRACK        reduce using rule 6 (identifier -> IDENTIFIER .)
    PLUS_EQ         reduce using rule 6 (identifier -> IDENTIFIER .)
    MINUS_EQ        reduce using rule 6 (identifier -> IDENTIFIER .)
    MUL_EQ          reduce using rule 6 (identifier -> IDENTIFIER .)
    DIV_EQ          reduce using rule 6 (identifier -> IDENTIFIER .)
    EXP_EQ          reduce using rule 6 (identifier -> IDENTIFIER .)
    MOD_EQ          reduce using rule 6 (identifier -> IDENTIFIER .)
    LPAREN          reduce using rule 6 (identifier -> IDENTIFIER .)
    EQUALS          reduce using rule 6 (identifier -> IDENTIFIER .)
    DOUBLE_PLUS     reduce using rule 6 (identifier -> IDENTIFIER .)
    DOUBLE_MINUS    reduce using rule 6 (identifier -> IDENTIFIER .)
    EXIT            reduce using rule 6 (identifier -> IDENTIFIER .)
    PRINT           reduce using rule 6 (identifier -> IDENTIFIER .)
    FOR             reduce using rule 6 (identifier -> IDENTIFIER .)
    WHILE           reduce using rule 6 (identifier -> IDENTIFIER .)
    FUNCTION        reduce using rule 6 (identifier -> IDENTIFIER .)
    RETURN          reduce using rule 6 (identifier -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 6 (identifier -> IDENTIFIER .)
    MINUS           reduce using rule 6 (identifier -> IDENTIFIER .)
    PLUS            reduce using rule 6 (identifier -> IDENTIFIER .)
    BIT_NEG         reduce using rule 6 (identifier -> IDENTIFIER .)
    NOT             reduce using rule 6 (identifier -> IDENTIFIER .)
    STRING          reduce using rule 6 (identifier -> IDENTIFIER .)
    IF              reduce using rule 6 (identifier -> IDENTIFIER .)
    NUM_INT         reduce using rule 6 (identifier -> IDENTIFIER .)
    NUM_FLOAT       reduce using rule 6 (identifier -> IDENTIFIER .)
    TRUE            reduce using rule 6 (identifier -> IDENTIFIER .)
    FALSE           reduce using rule 6 (identifier -> IDENTIFIER .)
    $end            reduce using rule 6 (identifier -> IDENTIFIER .)
    MUL             reduce using rule 6 (identifier -> IDENTIFIER .)
    DIV             reduce using rule 6 (identifier -> IDENTIFIER .)
    EXP             reduce using rule 6 (identifier -> IDENTIFIER .)
    MOD             reduce using rule 6 (identifier -> IDENTIFIER .)
    BIT_AND         reduce using rule 6 (identifier -> IDENTIFIER .)
    BIT_OR          reduce using rule 6 (identifier -> IDENTIFIER .)
    BIT_XOR         reduce using rule 6 (identifier -> IDENTIFIER .)
    LSHIFT          reduce using rule 6 (identifier -> IDENTIFIER .)
    RSHIFT          reduce using rule 6 (identifier -> IDENTIFIER .)
    QUESTION_MARK   reduce using rule 6 (identifier -> IDENTIFIER .)
    IN              reduce using rule 6 (identifier -> IDENTIFIER .)
    EQ              reduce using rule 6 (identifier -> IDENTIFIER .)
    NEQ             reduce using rule 6 (identifier -> IDENTIFIER .)
    GT              reduce using rule 6 (identifier -> IDENTIFIER .)
    GTE             reduce using rule 6 (identifier -> IDENTIFIER .)
    LT              reduce using rule 6 (identifier -> IDENTIFIER .)
    LTE             reduce using rule 6 (identifier -> IDENTIFIER .)
    AND             reduce using rule 6 (identifier -> IDENTIFIER .)
    OR              reduce using rule 6 (identifier -> IDENTIFIER .)
    RSQBRACK        reduce using rule 6 (identifier -> IDENTIFIER .)
    COMMA           reduce using rule 6 (identifier -> IDENTIFIER .)
    STMT_END        reduce using rule 6 (identifier -> IDENTIFIER .)
    LBRACK          reduce using rule 6 (identifier -> IDENTIFIER .)
    RPAREN          reduce using rule 6 (identifier -> IDENTIFIER .)
    COLON           reduce using rule 6 (identifier -> IDENTIFIER .)
    RBRACK          reduce using rule 6 (identifier -> IDENTIFIER .)
    ARROW_LTR       reduce using rule 6 (identifier -> IDENTIFIER .)
    ARROW_RTL       reduce using rule 6 (identifier -> IDENTIFIER .)


state 15

    (32) expression -> PLUS . expression
    (12) expression -> . expression PLUS expression
    (13) expression -> . expression MINUS expression
    (14) expression -> . expression MUL expression
    (15) expression -> . expression DIV expression
    (16) expression -> . expression EXP expression
    (17) expression -> . expression MOD expression
    (18) expression -> . expression BIT_AND expression
    (19) expression -> . expression BIT_OR expression
    (20) expression -> . expression BIT_XOR expression
    (21) expression -> . expression LSHIFT expression
    (22) expression -> . expression RSHIFT expression
    (31) expression -> . MINUS expression
    (32) expression -> . PLUS expression
    (33) expression -> . BIT_NEG expression
    (34) expression -> . NOT expression
    (35) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression QUESTION_MARK expression COLON expression
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable STMT_END
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier DOUBLE_PLUS
    (65) expression -> . identifier DOUBLE_MINUS
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (77) expression -> . identifier LPAREN arguments RPAREN
    (6) identifier -> . IDENTIFIER
    (8) primitive -> . NUM_INT
    (9) primitive -> . NUM_FLOAT
    (10) primitive -> . STRING
    (11) primitive -> . boolean
    (23) boolean -> . expression EQ expression
    (24) boolean -> . expression NEQ expression
    (25) boolean -> . expression GT expression
    (26) boolean -> . expression GTE expression
    (27) boolean -> . expression LT expression
    (28) boolean -> . expression LTE expression
    (29) boolean -> . expression AND expression
    (30) boolean -> . expression OR expression
    (36) boolean -> . TRUE
    (37) boolean -> . FALSE

    MINUS           shift and go to state 16
    PLUS            shift and go to state 15
    BIT_NEG         shift and go to state 17
    NOT             shift and go to state 18
    LPAREN          shift and go to state 12
    LSQBRACK        shift and go to state 7
    STRING          shift and go to state 20
    IDENTIFIER      shift and go to state 14
    NUM_INT         shift and go to state 22
    NUM_FLOAT       shift and go to state 23
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26

    expression                     shift and go to state 72
    identifier                     shift and go to state 64
    primitive                      shift and go to state 19
    boolean                        shift and go to state 24

state 16

    (31) expression -> MINUS . expression
    (12) expression -> . expression PLUS expression
    (13) expression -> . expression MINUS expression
    (14) expression -> . expression MUL expression
    (15) expression -> . expression DIV expression
    (16) expression -> . expression EXP expression
    (17) expression -> . expression MOD expression
    (18) expression -> . expression BIT_AND expression
    (19) expression -> . expression BIT_OR expression
    (20) expression -> . expression BIT_XOR expression
    (21) expression -> . expression LSHIFT expression
    (22) expression -> . expression RSHIFT expression
    (31) expression -> . MINUS expression
    (32) expression -> . PLUS expression
    (33) expression -> . BIT_NEG expression
    (34) expression -> . NOT expression
    (35) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression QUESTION_MARK expression COLON expression
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable STMT_END
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier DOUBLE_PLUS
    (65) expression -> . identifier DOUBLE_MINUS
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (77) expression -> . identifier LPAREN arguments RPAREN
    (6) identifier -> . IDENTIFIER
    (8) primitive -> . NUM_INT
    (9) primitive -> . NUM_FLOAT
    (10) primitive -> . STRING
    (11) primitive -> . boolean
    (23) boolean -> . expression EQ expression
    (24) boolean -> . expression NEQ expression
    (25) boolean -> . expression GT expression
    (26) boolean -> . expression GTE expression
    (27) boolean -> . expression LT expression
    (28) boolean -> . expression LTE expression
    (29) boolean -> . expression AND expression
    (30) boolean -> . expression OR expression
    (36) boolean -> . TRUE
    (37) boolean -> . FALSE

    MINUS           shift and go to state 16
    PLUS            shift and go to state 15
    BIT_NEG         shift and go to state 17
    NOT             shift and go to state 18
    LPAREN          shift and go to state 12
    LSQBRACK        shift and go to state 7
    STRING          shift and go to state 20
    IDENTIFIER      shift and go to state 14
    NUM_INT         shift and go to state 22
    NUM_FLOAT       shift and go to state 23
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26

    expression                     shift and go to state 73
    identifier                     shift and go to state 64
    primitive                      shift and go to state 19
    boolean                        shift and go to state 24

state 17

    (33) expression -> BIT_NEG . expression
    (12) expression -> . expression PLUS expression
    (13) expression -> . expression MINUS expression
    (14) expression -> . expression MUL expression
    (15) expression -> . expression DIV expression
    (16) expression -> . expression EXP expression
    (17) expression -> . expression MOD expression
    (18) expression -> . expression BIT_AND expression
    (19) expression -> . expression BIT_OR expression
    (20) expression -> . expression BIT_XOR expression
    (21) expression -> . expression LSHIFT expression
    (22) expression -> . expression RSHIFT expression
    (31) expression -> . MINUS expression
    (32) expression -> . PLUS expression
    (33) expression -> . BIT_NEG expression
    (34) expression -> . NOT expression
    (35) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression QUESTION_MARK expression COLON expression
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable STMT_END
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier DOUBLE_PLUS
    (65) expression -> . identifier DOUBLE_MINUS
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (77) expression -> . identifier LPAREN arguments RPAREN
    (6) identifier -> . IDENTIFIER
    (8) primitive -> . NUM_INT
    (9) primitive -> . NUM_FLOAT
    (10) primitive -> . STRING
    (11) primitive -> . boolean
    (23) boolean -> . expression EQ expression
    (24) boolean -> . expression NEQ expression
    (25) boolean -> . expression GT expression
    (26) boolean -> . expression GTE expression
    (27) boolean -> . expression LT expression
    (28) boolean -> . expression LTE expression
    (29) boolean -> . expression AND expression
    (30) boolean -> . expression OR expression
    (36) boolean -> . TRUE
    (37) boolean -> . FALSE

    MINUS           shift and go to state 16
    PLUS            shift and go to state 15
    BIT_NEG         shift and go to state 17
    NOT             shift and go to state 18
    LPAREN          shift and go to state 12
    LSQBRACK        shift and go to state 7
    STRING          shift and go to state 20
    IDENTIFIER      shift and go to state 14
    NUM_INT         shift and go to state 22
    NUM_FLOAT       shift and go to state 23
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26

    expression                     shift and go to state 74
    identifier                     shift and go to state 64
    primitive                      shift and go to state 19
    boolean                        shift and go to state 24

state 18

    (34) expression -> NOT . expression
    (12) expression -> . expression PLUS expression
    (13) expression -> . expression MINUS expression
    (14) expression -> . expression MUL expression
    (15) expression -> . expression DIV expression
    (16) expression -> . expression EXP expression
    (17) expression -> . expression MOD expression
    (18) expression -> . expression BIT_AND expression
    (19) expression -> . expression BIT_OR expression
    (20) expression -> . expression BIT_XOR expression
    (21) expression -> . expression LSHIFT expression
    (22) expression -> . expression RSHIFT expression
    (31) expression -> . MINUS expression
    (32) expression -> . PLUS expression
    (33) expression -> . BIT_NEG expression
    (34) expression -> . NOT expression
    (35) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression QUESTION_MARK expression COLON expression
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable STMT_END
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier DOUBLE_PLUS
    (65) expression -> . identifier DOUBLE_MINUS
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (77) expression -> . identifier LPAREN arguments RPAREN
    (6) identifier -> . IDENTIFIER
    (8) primitive -> . NUM_INT
    (9) primitive -> . NUM_FLOAT
    (10) primitive -> . STRING
    (11) primitive -> . boolean
    (23) boolean -> . expression EQ expression
    (24) boolean -> . expression NEQ expression
    (25) boolean -> . expression GT expression
    (26) boolean -> . expression GTE expression
    (27) boolean -> . expression LT expression
    (28) boolean -> . expression LTE expression
    (29) boolean -> . expression AND expression
    (30) boolean -> . expression OR expression
    (36) boolean -> . TRUE
    (37) boolean -> . FALSE

    MINUS           shift and go to state 16
    PLUS            shift and go to state 15
    BIT_NEG         shift and go to state 17
    NOT             shift and go to state 18
    LPAREN          shift and go to state 12
    LSQBRACK        shift and go to state 7
    STRING          shift and go to state 20
    IDENTIFIER      shift and go to state 14
    NUM_INT         shift and go to state 22
    NUM_FLOAT       shift and go to state 23
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26

    expression                     shift and go to state 75
    identifier                     shift and go to state 64
    primitive                      shift and go to state 19
    boolean                        shift and go to state 24

state 19

    (66) expression -> primitive .

    PLUS            reduce using rule 66 (expression -> primitive .)
    MINUS           reduce using rule 66 (expression -> primitive .)
    MUL             reduce using rule 66 (expression -> primitive .)
    DIV             reduce using rule 66 (expression -> primitive .)
    EXP             reduce using rule 66 (expression -> primitive .)
    MOD             reduce using rule 66 (expression -> primitive .)
    BIT_AND         reduce using rule 66 (expression -> primitive .)
    BIT_OR          reduce using rule 66 (expression -> primitive .)
    BIT_XOR         reduce using rule 66 (expression -> primitive .)
    LSHIFT          reduce using rule 66 (expression -> primitive .)
    RSHIFT          reduce using rule 66 (expression -> primitive .)
    QUESTION_MARK   reduce using rule 66 (expression -> primitive .)
    IN              reduce using rule 66 (expression -> primitive .)
    NOT             reduce using rule 66 (expression -> primitive .)
    EQ              reduce using rule 66 (expression -> primitive .)
    NEQ             reduce using rule 66 (expression -> primitive .)
    GT              reduce using rule 66 (expression -> primitive .)
    GTE             reduce using rule 66 (expression -> primitive .)
    LT              reduce using rule 66 (expression -> primitive .)
    LTE             reduce using rule 66 (expression -> primitive .)
    AND             reduce using rule 66 (expression -> primitive .)
    OR              reduce using rule 66 (expression -> primitive .)
    EXIT            reduce using rule 66 (expression -> primitive .)
    PRINT           reduce using rule 66 (expression -> primitive .)
    FOR             reduce using rule 66 (expression -> primitive .)
    WHILE           reduce using rule 66 (expression -> primitive .)
    FUNCTION        reduce using rule 66 (expression -> primitive .)
    RETURN          reduce using rule 66 (expression -> primitive .)
    IDENTIFIER      reduce using rule 66 (expression -> primitive .)
    BIT_NEG         reduce using rule 66 (expression -> primitive .)
    LPAREN          reduce using rule 66 (expression -> primitive .)
    LSQBRACK        reduce using rule 66 (expression -> primitive .)
    STRING          reduce using rule 66 (expression -> primitive .)
    IF              reduce using rule 66 (expression -> primitive .)
    NUM_INT         reduce using rule 66 (expression -> primitive .)
    NUM_FLOAT       reduce using rule 66 (expression -> primitive .)
    TRUE            reduce using rule 66 (expression -> primitive .)
    FALSE           reduce using rule 66 (expression -> primitive .)
    $end            reduce using rule 66 (expression -> primitive .)
    RSQBRACK        reduce using rule 66 (expression -> primitive .)
    COMMA           reduce using rule 66 (expression -> primitive .)
    STMT_END        reduce using rule 66 (expression -> primitive .)
    LBRACK          reduce using rule 66 (expression -> primitive .)
    RPAREN          reduce using rule 66 (expression -> primitive .)
    COLON           reduce using rule 66 (expression -> primitive .)
    RBRACK          reduce using rule 66 (expression -> primitive .)
    ARROW_LTR       reduce using rule 66 (expression -> primitive .)
    ARROW_RTL       reduce using rule 66 (expression -> primitive .)


state 20

    (67) expression -> STRING .
    (10) primitive -> STRING .

  ! reduce/reduce conflict for PLUS resolved using rule 10 (primitive -> STRING .)
  ! reduce/reduce conflict for MINUS resolved using rule 10 (primitive -> STRING .)
  ! reduce/reduce conflict for MUL resolved using rule 10 (primitive -> STRING .)
  ! reduce/reduce conflict for DIV resolved using rule 10 (primitive -> STRING .)
  ! reduce/reduce conflict for EXP resolved using rule 10 (primitive -> STRING .)
  ! reduce/reduce conflict for MOD resolved using rule 10 (primitive -> STRING .)
  ! reduce/reduce conflict for BIT_AND resolved using rule 10 (primitive -> STRING .)
  ! reduce/reduce conflict for BIT_OR resolved using rule 10 (primitive -> STRING .)
  ! reduce/reduce conflict for BIT_XOR resolved using rule 10 (primitive -> STRING .)
  ! reduce/reduce conflict for LSHIFT resolved using rule 10 (primitive -> STRING .)
  ! reduce/reduce conflict for RSHIFT resolved using rule 10 (primitive -> STRING .)
  ! reduce/reduce conflict for QUESTION_MARK resolved using rule 10 (primitive -> STRING .)
  ! reduce/reduce conflict for IN resolved using rule 10 (primitive -> STRING .)
  ! reduce/reduce conflict for NOT resolved using rule 10 (primitive -> STRING .)
  ! reduce/reduce conflict for EQ resolved using rule 10 (primitive -> STRING .)
  ! reduce/reduce conflict for NEQ resolved using rule 10 (primitive -> STRING .)
  ! reduce/reduce conflict for GT resolved using rule 10 (primitive -> STRING .)
  ! reduce/reduce conflict for GTE resolved using rule 10 (primitive -> STRING .)
  ! reduce/reduce conflict for LT resolved using rule 10 (primitive -> STRING .)
  ! reduce/reduce conflict for LTE resolved using rule 10 (primitive -> STRING .)
  ! reduce/reduce conflict for AND resolved using rule 10 (primitive -> STRING .)
  ! reduce/reduce conflict for OR resolved using rule 10 (primitive -> STRING .)
  ! reduce/reduce conflict for EXIT resolved using rule 10 (primitive -> STRING .)
  ! reduce/reduce conflict for PRINT resolved using rule 10 (primitive -> STRING .)
  ! reduce/reduce conflict for FOR resolved using rule 10 (primitive -> STRING .)
  ! reduce/reduce conflict for WHILE resolved using rule 10 (primitive -> STRING .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 10 (primitive -> STRING .)
  ! reduce/reduce conflict for RETURN resolved using rule 10 (primitive -> STRING .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 10 (primitive -> STRING .)
  ! reduce/reduce conflict for BIT_NEG resolved using rule 10 (primitive -> STRING .)
  ! reduce/reduce conflict for LPAREN resolved using rule 10 (primitive -> STRING .)
  ! reduce/reduce conflict for LSQBRACK resolved using rule 10 (primitive -> STRING .)
  ! reduce/reduce conflict for STRING resolved using rule 10 (primitive -> STRING .)
  ! reduce/reduce conflict for IF resolved using rule 10 (primitive -> STRING .)
  ! reduce/reduce conflict for NUM_INT resolved using rule 10 (primitive -> STRING .)
  ! reduce/reduce conflict for NUM_FLOAT resolved using rule 10 (primitive -> STRING .)
  ! reduce/reduce conflict for TRUE resolved using rule 10 (primitive -> STRING .)
  ! reduce/reduce conflict for FALSE resolved using rule 10 (primitive -> STRING .)
  ! reduce/reduce conflict for $end resolved using rule 10 (primitive -> STRING .)
  ! reduce/reduce conflict for RSQBRACK resolved using rule 10 (primitive -> STRING .)
  ! reduce/reduce conflict for COMMA resolved using rule 10 (primitive -> STRING .)
  ! reduce/reduce conflict for STMT_END resolved using rule 10 (primitive -> STRING .)
  ! reduce/reduce conflict for LBRACK resolved using rule 10 (primitive -> STRING .)
  ! reduce/reduce conflict for RPAREN resolved using rule 10 (primitive -> STRING .)
  ! reduce/reduce conflict for COLON resolved using rule 10 (primitive -> STRING .)
  ! reduce/reduce conflict for RBRACK resolved using rule 10 (primitive -> STRING .)
  ! reduce/reduce conflict for ARROW_LTR resolved using rule 10 (primitive -> STRING .)
  ! reduce/reduce conflict for ARROW_RTL resolved using rule 10 (primitive -> STRING .)
    PLUS            reduce using rule 10 (primitive -> STRING .)
    MINUS           reduce using rule 10 (primitive -> STRING .)
    MUL             reduce using rule 10 (primitive -> STRING .)
    DIV             reduce using rule 10 (primitive -> STRING .)
    EXP             reduce using rule 10 (primitive -> STRING .)
    MOD             reduce using rule 10 (primitive -> STRING .)
    BIT_AND         reduce using rule 10 (primitive -> STRING .)
    BIT_OR          reduce using rule 10 (primitive -> STRING .)
    BIT_XOR         reduce using rule 10 (primitive -> STRING .)
    LSHIFT          reduce using rule 10 (primitive -> STRING .)
    RSHIFT          reduce using rule 10 (primitive -> STRING .)
    QUESTION_MARK   reduce using rule 10 (primitive -> STRING .)
    IN              reduce using rule 10 (primitive -> STRING .)
    NOT             reduce using rule 10 (primitive -> STRING .)
    EQ              reduce using rule 10 (primitive -> STRING .)
    NEQ             reduce using rule 10 (primitive -> STRING .)
    GT              reduce using rule 10 (primitive -> STRING .)
    GTE             reduce using rule 10 (primitive -> STRING .)
    LT              reduce using rule 10 (primitive -> STRING .)
    LTE             reduce using rule 10 (primitive -> STRING .)
    AND             reduce using rule 10 (primitive -> STRING .)
    OR              reduce using rule 10 (primitive -> STRING .)
    EXIT            reduce using rule 10 (primitive -> STRING .)
    PRINT           reduce using rule 10 (primitive -> STRING .)
    FOR             reduce using rule 10 (primitive -> STRING .)
    WHILE           reduce using rule 10 (primitive -> STRING .)
    FUNCTION        reduce using rule 10 (primitive -> STRING .)
    RETURN          reduce using rule 10 (primitive -> STRING .)
    IDENTIFIER      reduce using rule 10 (primitive -> STRING .)
    BIT_NEG         reduce using rule 10 (primitive -> STRING .)
    LPAREN          reduce using rule 10 (primitive -> STRING .)
    LSQBRACK        reduce using rule 10 (primitive -> STRING .)
    STRING          reduce using rule 10 (primitive -> STRING .)
    IF              reduce using rule 10 (primitive -> STRING .)
    NUM_INT         reduce using rule 10 (primitive -> STRING .)
    NUM_FLOAT       reduce using rule 10 (primitive -> STRING .)
    TRUE            reduce using rule 10 (primitive -> STRING .)
    FALSE           reduce using rule 10 (primitive -> STRING .)
    $end            reduce using rule 10 (primitive -> STRING .)
    RSQBRACK        reduce using rule 10 (primitive -> STRING .)
    COMMA           reduce using rule 10 (primitive -> STRING .)
    STMT_END        reduce using rule 10 (primitive -> STRING .)
    LBRACK          reduce using rule 10 (primitive -> STRING .)
    RPAREN          reduce using rule 10 (primitive -> STRING .)
    COLON           reduce using rule 10 (primitive -> STRING .)
    RBRACK          reduce using rule 10 (primitive -> STRING .)
    ARROW_LTR       reduce using rule 10 (primitive -> STRING .)
    ARROW_RTL       reduce using rule 10 (primitive -> STRING .)

  ! PLUS            [ reduce using rule 67 (expression -> STRING .) ]
  ! MINUS           [ reduce using rule 67 (expression -> STRING .) ]
  ! MUL             [ reduce using rule 67 (expression -> STRING .) ]
  ! DIV             [ reduce using rule 67 (expression -> STRING .) ]
  ! EXP             [ reduce using rule 67 (expression -> STRING .) ]
  ! MOD             [ reduce using rule 67 (expression -> STRING .) ]
  ! BIT_AND         [ reduce using rule 67 (expression -> STRING .) ]
  ! BIT_OR          [ reduce using rule 67 (expression -> STRING .) ]
  ! BIT_XOR         [ reduce using rule 67 (expression -> STRING .) ]
  ! LSHIFT          [ reduce using rule 67 (expression -> STRING .) ]
  ! RSHIFT          [ reduce using rule 67 (expression -> STRING .) ]
  ! QUESTION_MARK   [ reduce using rule 67 (expression -> STRING .) ]
  ! IN              [ reduce using rule 67 (expression -> STRING .) ]
  ! NOT             [ reduce using rule 67 (expression -> STRING .) ]
  ! EQ              [ reduce using rule 67 (expression -> STRING .) ]
  ! NEQ             [ reduce using rule 67 (expression -> STRING .) ]
  ! GT              [ reduce using rule 67 (expression -> STRING .) ]
  ! GTE             [ reduce using rule 67 (expression -> STRING .) ]
  ! LT              [ reduce using rule 67 (expression -> STRING .) ]
  ! LTE             [ reduce using rule 67 (expression -> STRING .) ]
  ! AND             [ reduce using rule 67 (expression -> STRING .) ]
  ! OR              [ reduce using rule 67 (expression -> STRING .) ]
  ! EXIT            [ reduce using rule 67 (expression -> STRING .) ]
  ! PRINT           [ reduce using rule 67 (expression -> STRING .) ]
  ! FOR             [ reduce using rule 67 (expression -> STRING .) ]
  ! WHILE           [ reduce using rule 67 (expression -> STRING .) ]
  ! FUNCTION        [ reduce using rule 67 (expression -> STRING .) ]
  ! RETURN          [ reduce using rule 67 (expression -> STRING .) ]
  ! IDENTIFIER      [ reduce using rule 67 (expression -> STRING .) ]
  ! BIT_NEG         [ reduce using rule 67 (expression -> STRING .) ]
  ! LPAREN          [ reduce using rule 67 (expression -> STRING .) ]
  ! LSQBRACK        [ reduce using rule 67 (expression -> STRING .) ]
  ! STRING          [ reduce using rule 67 (expression -> STRING .) ]
  ! IF              [ reduce using rule 67 (expression -> STRING .) ]
  ! NUM_INT         [ reduce using rule 67 (expression -> STRING .) ]
  ! NUM_FLOAT       [ reduce using rule 67 (expression -> STRING .) ]
  ! TRUE            [ reduce using rule 67 (expression -> STRING .) ]
  ! FALSE           [ reduce using rule 67 (expression -> STRING .) ]
  ! $end            [ reduce using rule 67 (expression -> STRING .) ]
  ! RSQBRACK        [ reduce using rule 67 (expression -> STRING .) ]
  ! COMMA           [ reduce using rule 67 (expression -> STRING .) ]
  ! STMT_END        [ reduce using rule 67 (expression -> STRING .) ]
  ! LBRACK          [ reduce using rule 67 (expression -> STRING .) ]
  ! RPAREN          [ reduce using rule 67 (expression -> STRING .) ]
  ! COLON           [ reduce using rule 67 (expression -> STRING .) ]
  ! RBRACK          [ reduce using rule 67 (expression -> STRING .) ]
  ! ARROW_LTR       [ reduce using rule 67 (expression -> STRING .) ]
  ! ARROW_RTL       [ reduce using rule 67 (expression -> STRING .) ]


state 21

    (52) if_statement -> IF . expression LBRACK statement_list RBRACK
    (53) if_statement -> IF . expression LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK
    (54) if_statement -> IF . expression LBRACK statement_list RBRACK ELSE if_statement
    (12) expression -> . expression PLUS expression
    (13) expression -> . expression MINUS expression
    (14) expression -> . expression MUL expression
    (15) expression -> . expression DIV expression
    (16) expression -> . expression EXP expression
    (17) expression -> . expression MOD expression
    (18) expression -> . expression BIT_AND expression
    (19) expression -> . expression BIT_OR expression
    (20) expression -> . expression BIT_XOR expression
    (21) expression -> . expression LSHIFT expression
    (22) expression -> . expression RSHIFT expression
    (31) expression -> . MINUS expression
    (32) expression -> . PLUS expression
    (33) expression -> . BIT_NEG expression
    (34) expression -> . NOT expression
    (35) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression QUESTION_MARK expression COLON expression
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable STMT_END
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier DOUBLE_PLUS
    (65) expression -> . identifier DOUBLE_MINUS
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (77) expression -> . identifier LPAREN arguments RPAREN
    (6) identifier -> . IDENTIFIER
    (8) primitive -> . NUM_INT
    (9) primitive -> . NUM_FLOAT
    (10) primitive -> . STRING
    (11) primitive -> . boolean
    (23) boolean -> . expression EQ expression
    (24) boolean -> . expression NEQ expression
    (25) boolean -> . expression GT expression
    (26) boolean -> . expression GTE expression
    (27) boolean -> . expression LT expression
    (28) boolean -> . expression LTE expression
    (29) boolean -> . expression AND expression
    (30) boolean -> . expression OR expression
    (36) boolean -> . TRUE
    (37) boolean -> . FALSE

    MINUS           shift and go to state 16
    PLUS            shift and go to state 15
    BIT_NEG         shift and go to state 17
    NOT             shift and go to state 18
    LPAREN          shift and go to state 12
    LSQBRACK        shift and go to state 7
    STRING          shift and go to state 20
    IDENTIFIER      shift and go to state 14
    NUM_INT         shift and go to state 22
    NUM_FLOAT       shift and go to state 23
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26

    expression                     shift and go to state 76
    identifier                     shift and go to state 64
    primitive                      shift and go to state 19
    boolean                        shift and go to state 24

state 22

    (8) primitive -> NUM_INT .

    PLUS            reduce using rule 8 (primitive -> NUM_INT .)
    MINUS           reduce using rule 8 (primitive -> NUM_INT .)
    MUL             reduce using rule 8 (primitive -> NUM_INT .)
    DIV             reduce using rule 8 (primitive -> NUM_INT .)
    EXP             reduce using rule 8 (primitive -> NUM_INT .)
    MOD             reduce using rule 8 (primitive -> NUM_INT .)
    BIT_AND         reduce using rule 8 (primitive -> NUM_INT .)
    BIT_OR          reduce using rule 8 (primitive -> NUM_INT .)
    BIT_XOR         reduce using rule 8 (primitive -> NUM_INT .)
    LSHIFT          reduce using rule 8 (primitive -> NUM_INT .)
    RSHIFT          reduce using rule 8 (primitive -> NUM_INT .)
    QUESTION_MARK   reduce using rule 8 (primitive -> NUM_INT .)
    IN              reduce using rule 8 (primitive -> NUM_INT .)
    NOT             reduce using rule 8 (primitive -> NUM_INT .)
    EQ              reduce using rule 8 (primitive -> NUM_INT .)
    NEQ             reduce using rule 8 (primitive -> NUM_INT .)
    GT              reduce using rule 8 (primitive -> NUM_INT .)
    GTE             reduce using rule 8 (primitive -> NUM_INT .)
    LT              reduce using rule 8 (primitive -> NUM_INT .)
    LTE             reduce using rule 8 (primitive -> NUM_INT .)
    AND             reduce using rule 8 (primitive -> NUM_INT .)
    OR              reduce using rule 8 (primitive -> NUM_INT .)
    EXIT            reduce using rule 8 (primitive -> NUM_INT .)
    PRINT           reduce using rule 8 (primitive -> NUM_INT .)
    FOR             reduce using rule 8 (primitive -> NUM_INT .)
    WHILE           reduce using rule 8 (primitive -> NUM_INT .)
    FUNCTION        reduce using rule 8 (primitive -> NUM_INT .)
    RETURN          reduce using rule 8 (primitive -> NUM_INT .)
    IDENTIFIER      reduce using rule 8 (primitive -> NUM_INT .)
    BIT_NEG         reduce using rule 8 (primitive -> NUM_INT .)
    LPAREN          reduce using rule 8 (primitive -> NUM_INT .)
    LSQBRACK        reduce using rule 8 (primitive -> NUM_INT .)
    STRING          reduce using rule 8 (primitive -> NUM_INT .)
    IF              reduce using rule 8 (primitive -> NUM_INT .)
    NUM_INT         reduce using rule 8 (primitive -> NUM_INT .)
    NUM_FLOAT       reduce using rule 8 (primitive -> NUM_INT .)
    TRUE            reduce using rule 8 (primitive -> NUM_INT .)
    FALSE           reduce using rule 8 (primitive -> NUM_INT .)
    $end            reduce using rule 8 (primitive -> NUM_INT .)
    RSQBRACK        reduce using rule 8 (primitive -> NUM_INT .)
    COMMA           reduce using rule 8 (primitive -> NUM_INT .)
    STMT_END        reduce using rule 8 (primitive -> NUM_INT .)
    LBRACK          reduce using rule 8 (primitive -> NUM_INT .)
    RPAREN          reduce using rule 8 (primitive -> NUM_INT .)
    COLON           reduce using rule 8 (primitive -> NUM_INT .)
    RBRACK          reduce using rule 8 (primitive -> NUM_INT .)
    ARROW_LTR       reduce using rule 8 (primitive -> NUM_INT .)
    ARROW_RTL       reduce using rule 8 (primitive -> NUM_INT .)


state 23

    (9) primitive -> NUM_FLOAT .

    PLUS            reduce using rule 9 (primitive -> NUM_FLOAT .)
    MINUS           reduce using rule 9 (primitive -> NUM_FLOAT .)
    MUL             reduce using rule 9 (primitive -> NUM_FLOAT .)
    DIV             reduce using rule 9 (primitive -> NUM_FLOAT .)
    EXP             reduce using rule 9 (primitive -> NUM_FLOAT .)
    MOD             reduce using rule 9 (primitive -> NUM_FLOAT .)
    BIT_AND         reduce using rule 9 (primitive -> NUM_FLOAT .)
    BIT_OR          reduce using rule 9 (primitive -> NUM_FLOAT .)
    BIT_XOR         reduce using rule 9 (primitive -> NUM_FLOAT .)
    LSHIFT          reduce using rule 9 (primitive -> NUM_FLOAT .)
    RSHIFT          reduce using rule 9 (primitive -> NUM_FLOAT .)
    QUESTION_MARK   reduce using rule 9 (primitive -> NUM_FLOAT .)
    IN              reduce using rule 9 (primitive -> NUM_FLOAT .)
    NOT             reduce using rule 9 (primitive -> NUM_FLOAT .)
    EQ              reduce using rule 9 (primitive -> NUM_FLOAT .)
    NEQ             reduce using rule 9 (primitive -> NUM_FLOAT .)
    GT              reduce using rule 9 (primitive -> NUM_FLOAT .)
    GTE             reduce using rule 9 (primitive -> NUM_FLOAT .)
    LT              reduce using rule 9 (primitive -> NUM_FLOAT .)
    LTE             reduce using rule 9 (primitive -> NUM_FLOAT .)
    AND             reduce using rule 9 (primitive -> NUM_FLOAT .)
    OR              reduce using rule 9 (primitive -> NUM_FLOAT .)
    EXIT            reduce using rule 9 (primitive -> NUM_FLOAT .)
    PRINT           reduce using rule 9 (primitive -> NUM_FLOAT .)
    FOR             reduce using rule 9 (primitive -> NUM_FLOAT .)
    WHILE           reduce using rule 9 (primitive -> NUM_FLOAT .)
    FUNCTION        reduce using rule 9 (primitive -> NUM_FLOAT .)
    RETURN          reduce using rule 9 (primitive -> NUM_FLOAT .)
    IDENTIFIER      reduce using rule 9 (primitive -> NUM_FLOAT .)
    BIT_NEG         reduce using rule 9 (primitive -> NUM_FLOAT .)
    LPAREN          reduce using rule 9 (primitive -> NUM_FLOAT .)
    LSQBRACK        reduce using rule 9 (primitive -> NUM_FLOAT .)
    STRING          reduce using rule 9 (primitive -> NUM_FLOAT .)
    IF              reduce using rule 9 (primitive -> NUM_FLOAT .)
    NUM_INT         reduce using rule 9 (primitive -> NUM_FLOAT .)
    NUM_FLOAT       reduce using rule 9 (primitive -> NUM_FLOAT .)
    TRUE            reduce using rule 9 (primitive -> NUM_FLOAT .)
    FALSE           reduce using rule 9 (primitive -> NUM_FLOAT .)
    $end            reduce using rule 9 (primitive -> NUM_FLOAT .)
    RSQBRACK        reduce using rule 9 (primitive -> NUM_FLOAT .)
    COMMA           reduce using rule 9 (primitive -> NUM_FLOAT .)
    STMT_END        reduce using rule 9 (primitive -> NUM_FLOAT .)
    LBRACK          reduce using rule 9 (primitive -> NUM_FLOAT .)
    RPAREN          reduce using rule 9 (primitive -> NUM_FLOAT .)
    COLON           reduce using rule 9 (primitive -> NUM_FLOAT .)
    RBRACK          reduce using rule 9 (primitive -> NUM_FLOAT .)
    ARROW_LTR       reduce using rule 9 (primitive -> NUM_FLOAT .)
    ARROW_RTL       reduce using rule 9 (primitive -> NUM_FLOAT .)


state 24

    (11) primitive -> boolean .

    PLUS            reduce using rule 11 (primitive -> boolean .)
    MINUS           reduce using rule 11 (primitive -> boolean .)
    MUL             reduce using rule 11 (primitive -> boolean .)
    DIV             reduce using rule 11 (primitive -> boolean .)
    EXP             reduce using rule 11 (primitive -> boolean .)
    MOD             reduce using rule 11 (primitive -> boolean .)
    BIT_AND         reduce using rule 11 (primitive -> boolean .)
    BIT_OR          reduce using rule 11 (primitive -> boolean .)
    BIT_XOR         reduce using rule 11 (primitive -> boolean .)
    LSHIFT          reduce using rule 11 (primitive -> boolean .)
    RSHIFT          reduce using rule 11 (primitive -> boolean .)
    QUESTION_MARK   reduce using rule 11 (primitive -> boolean .)
    IN              reduce using rule 11 (primitive -> boolean .)
    NOT             reduce using rule 11 (primitive -> boolean .)
    EQ              reduce using rule 11 (primitive -> boolean .)
    NEQ             reduce using rule 11 (primitive -> boolean .)
    GT              reduce using rule 11 (primitive -> boolean .)
    GTE             reduce using rule 11 (primitive -> boolean .)
    LT              reduce using rule 11 (primitive -> boolean .)
    LTE             reduce using rule 11 (primitive -> boolean .)
    AND             reduce using rule 11 (primitive -> boolean .)
    OR              reduce using rule 11 (primitive -> boolean .)
    EXIT            reduce using rule 11 (primitive -> boolean .)
    PRINT           reduce using rule 11 (primitive -> boolean .)
    FOR             reduce using rule 11 (primitive -> boolean .)
    WHILE           reduce using rule 11 (primitive -> boolean .)
    FUNCTION        reduce using rule 11 (primitive -> boolean .)
    RETURN          reduce using rule 11 (primitive -> boolean .)
    IDENTIFIER      reduce using rule 11 (primitive -> boolean .)
    BIT_NEG         reduce using rule 11 (primitive -> boolean .)
    LPAREN          reduce using rule 11 (primitive -> boolean .)
    LSQBRACK        reduce using rule 11 (primitive -> boolean .)
    STRING          reduce using rule 11 (primitive -> boolean .)
    IF              reduce using rule 11 (primitive -> boolean .)
    NUM_INT         reduce using rule 11 (primitive -> boolean .)
    NUM_FLOAT       reduce using rule 11 (primitive -> boolean .)
    TRUE            reduce using rule 11 (primitive -> boolean .)
    FALSE           reduce using rule 11 (primitive -> boolean .)
    $end            reduce using rule 11 (primitive -> boolean .)
    RSQBRACK        reduce using rule 11 (primitive -> boolean .)
    COMMA           reduce using rule 11 (primitive -> boolean .)
    STMT_END        reduce using rule 11 (primitive -> boolean .)
    LBRACK          reduce using rule 11 (primitive -> boolean .)
    RPAREN          reduce using rule 11 (primitive -> boolean .)
    COLON           reduce using rule 11 (primitive -> boolean .)
    RBRACK          reduce using rule 11 (primitive -> boolean .)
    ARROW_LTR       reduce using rule 11 (primitive -> boolean .)
    ARROW_RTL       reduce using rule 11 (primitive -> boolean .)


state 25

    (36) boolean -> TRUE .

    PLUS            reduce using rule 36 (boolean -> TRUE .)
    MINUS           reduce using rule 36 (boolean -> TRUE .)
    MUL             reduce using rule 36 (boolean -> TRUE .)
    DIV             reduce using rule 36 (boolean -> TRUE .)
    EXP             reduce using rule 36 (boolean -> TRUE .)
    MOD             reduce using rule 36 (boolean -> TRUE .)
    BIT_AND         reduce using rule 36 (boolean -> TRUE .)
    BIT_OR          reduce using rule 36 (boolean -> TRUE .)
    BIT_XOR         reduce using rule 36 (boolean -> TRUE .)
    LSHIFT          reduce using rule 36 (boolean -> TRUE .)
    RSHIFT          reduce using rule 36 (boolean -> TRUE .)
    QUESTION_MARK   reduce using rule 36 (boolean -> TRUE .)
    IN              reduce using rule 36 (boolean -> TRUE .)
    NOT             reduce using rule 36 (boolean -> TRUE .)
    EQ              reduce using rule 36 (boolean -> TRUE .)
    NEQ             reduce using rule 36 (boolean -> TRUE .)
    GT              reduce using rule 36 (boolean -> TRUE .)
    GTE             reduce using rule 36 (boolean -> TRUE .)
    LT              reduce using rule 36 (boolean -> TRUE .)
    LTE             reduce using rule 36 (boolean -> TRUE .)
    AND             reduce using rule 36 (boolean -> TRUE .)
    OR              reduce using rule 36 (boolean -> TRUE .)
    EXIT            reduce using rule 36 (boolean -> TRUE .)
    PRINT           reduce using rule 36 (boolean -> TRUE .)
    FOR             reduce using rule 36 (boolean -> TRUE .)
    WHILE           reduce using rule 36 (boolean -> TRUE .)
    FUNCTION        reduce using rule 36 (boolean -> TRUE .)
    RETURN          reduce using rule 36 (boolean -> TRUE .)
    IDENTIFIER      reduce using rule 36 (boolean -> TRUE .)
    BIT_NEG         reduce using rule 36 (boolean -> TRUE .)
    LPAREN          reduce using rule 36 (boolean -> TRUE .)
    LSQBRACK        reduce using rule 36 (boolean -> TRUE .)
    STRING          reduce using rule 36 (boolean -> TRUE .)
    IF              reduce using rule 36 (boolean -> TRUE .)
    NUM_INT         reduce using rule 36 (boolean -> TRUE .)
    NUM_FLOAT       reduce using rule 36 (boolean -> TRUE .)
    TRUE            reduce using rule 36 (boolean -> TRUE .)
    FALSE           reduce using rule 36 (boolean -> TRUE .)
    $end            reduce using rule 36 (boolean -> TRUE .)
    RSQBRACK        reduce using rule 36 (boolean -> TRUE .)
    COMMA           reduce using rule 36 (boolean -> TRUE .)
    STMT_END        reduce using rule 36 (boolean -> TRUE .)
    LBRACK          reduce using rule 36 (boolean -> TRUE .)
    RPAREN          reduce using rule 36 (boolean -> TRUE .)
    COLON           reduce using rule 36 (boolean -> TRUE .)
    RBRACK          reduce using rule 36 (boolean -> TRUE .)
    ARROW_LTR       reduce using rule 36 (boolean -> TRUE .)
    ARROW_RTL       reduce using rule 36 (boolean -> TRUE .)


state 26

    (37) boolean -> FALSE .

    PLUS            reduce using rule 37 (boolean -> FALSE .)
    MINUS           reduce using rule 37 (boolean -> FALSE .)
    MUL             reduce using rule 37 (boolean -> FALSE .)
    DIV             reduce using rule 37 (boolean -> FALSE .)
    EXP             reduce using rule 37 (boolean -> FALSE .)
    MOD             reduce using rule 37 (boolean -> FALSE .)
    BIT_AND         reduce using rule 37 (boolean -> FALSE .)
    BIT_OR          reduce using rule 37 (boolean -> FALSE .)
    BIT_XOR         reduce using rule 37 (boolean -> FALSE .)
    LSHIFT          reduce using rule 37 (boolean -> FALSE .)
    RSHIFT          reduce using rule 37 (boolean -> FALSE .)
    QUESTION_MARK   reduce using rule 37 (boolean -> FALSE .)
    IN              reduce using rule 37 (boolean -> FALSE .)
    NOT             reduce using rule 37 (boolean -> FALSE .)
    EQ              reduce using rule 37 (boolean -> FALSE .)
    NEQ             reduce using rule 37 (boolean -> FALSE .)
    GT              reduce using rule 37 (boolean -> FALSE .)
    GTE             reduce using rule 37 (boolean -> FALSE .)
    LT              reduce using rule 37 (boolean -> FALSE .)
    LTE             reduce using rule 37 (boolean -> FALSE .)
    AND             reduce using rule 37 (boolean -> FALSE .)
    OR              reduce using rule 37 (boolean -> FALSE .)
    EXIT            reduce using rule 37 (boolean -> FALSE .)
    PRINT           reduce using rule 37 (boolean -> FALSE .)
    FOR             reduce using rule 37 (boolean -> FALSE .)
    WHILE           reduce using rule 37 (boolean -> FALSE .)
    FUNCTION        reduce using rule 37 (boolean -> FALSE .)
    RETURN          reduce using rule 37 (boolean -> FALSE .)
    IDENTIFIER      reduce using rule 37 (boolean -> FALSE .)
    BIT_NEG         reduce using rule 37 (boolean -> FALSE .)
    LPAREN          reduce using rule 37 (boolean -> FALSE .)
    LSQBRACK        reduce using rule 37 (boolean -> FALSE .)
    STRING          reduce using rule 37 (boolean -> FALSE .)
    IF              reduce using rule 37 (boolean -> FALSE .)
    NUM_INT         reduce using rule 37 (boolean -> FALSE .)
    NUM_FLOAT       reduce using rule 37 (boolean -> FALSE .)
    TRUE            reduce using rule 37 (boolean -> FALSE .)
    FALSE           reduce using rule 37 (boolean -> FALSE .)
    $end            reduce using rule 37 (boolean -> FALSE .)
    RSQBRACK        reduce using rule 37 (boolean -> FALSE .)
    COMMA           reduce using rule 37 (boolean -> FALSE .)
    STMT_END        reduce using rule 37 (boolean -> FALSE .)
    LBRACK          reduce using rule 37 (boolean -> FALSE .)
    RPAREN          reduce using rule 37 (boolean -> FALSE .)
    COLON           reduce using rule 37 (boolean -> FALSE .)
    RBRACK          reduce using rule 37 (boolean -> FALSE .)
    ARROW_LTR       reduce using rule 37 (boolean -> FALSE .)
    ARROW_RTL       reduce using rule 37 (boolean -> FALSE .)


state 27

    (2) statement_list -> statement_list statement .

    EXIT            reduce using rule 2 (statement_list -> statement_list statement .)
    PRINT           reduce using rule 2 (statement_list -> statement_list statement .)
    FOR             reduce using rule 2 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 2 (statement_list -> statement_list statement .)
    FUNCTION        reduce using rule 2 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 2 (statement_list -> statement_list statement .)
    IDENTIFIER      reduce using rule 2 (statement_list -> statement_list statement .)
    MINUS           reduce using rule 2 (statement_list -> statement_list statement .)
    PLUS            reduce using rule 2 (statement_list -> statement_list statement .)
    BIT_NEG         reduce using rule 2 (statement_list -> statement_list statement .)
    NOT             reduce using rule 2 (statement_list -> statement_list statement .)
    LPAREN          reduce using rule 2 (statement_list -> statement_list statement .)
    LSQBRACK        reduce using rule 2 (statement_list -> statement_list statement .)
    STRING          reduce using rule 2 (statement_list -> statement_list statement .)
    IF              reduce using rule 2 (statement_list -> statement_list statement .)
    NUM_INT         reduce using rule 2 (statement_list -> statement_list statement .)
    NUM_FLOAT       reduce using rule 2 (statement_list -> statement_list statement .)
    TRUE            reduce using rule 2 (statement_list -> statement_list statement .)
    FALSE           reduce using rule 2 (statement_list -> statement_list statement .)
    $end            reduce using rule 2 (statement_list -> statement_list statement .)
    RBRACK          reduce using rule 2 (statement_list -> statement_list statement .)


state 28

    (50) statement -> identifier LSQBRACK . expression RSQBRACK EQUALS expression STMT_END
    (45) expression -> identifier LSQBRACK . expression RSQBRACK
    (46) expression -> identifier LSQBRACK . expression COLON expression RSQBRACK
    (47) expression -> identifier LSQBRACK . COLON expression RSQBRACK
    (48) expression -> identifier LSQBRACK . expression COLON RSQBRACK
    (49) expression -> identifier LSQBRACK . COLON RSQBRACK
    (12) expression -> . expression PLUS expression
    (13) expression -> . expression MINUS expression
    (14) expression -> . expression MUL expression
    (15) expression -> . expression DIV expression
    (16) expression -> . expression EXP expression
    (17) expression -> . expression MOD expression
    (18) expression -> . expression BIT_AND expression
    (19) expression -> . expression BIT_OR expression
    (20) expression -> . expression BIT_XOR expression
    (21) expression -> . expression LSHIFT expression
    (22) expression -> . expression RSHIFT expression
    (31) expression -> . MINUS expression
    (32) expression -> . PLUS expression
    (33) expression -> . BIT_NEG expression
    (34) expression -> . NOT expression
    (35) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression QUESTION_MARK expression COLON expression
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable STMT_END
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier DOUBLE_PLUS
    (65) expression -> . identifier DOUBLE_MINUS
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (77) expression -> . identifier LPAREN arguments RPAREN
    (6) identifier -> . IDENTIFIER
    (8) primitive -> . NUM_INT
    (9) primitive -> . NUM_FLOAT
    (10) primitive -> . STRING
    (11) primitive -> . boolean
    (23) boolean -> . expression EQ expression
    (24) boolean -> . expression NEQ expression
    (25) boolean -> . expression GT expression
    (26) boolean -> . expression GTE expression
    (27) boolean -> . expression LT expression
    (28) boolean -> . expression LTE expression
    (29) boolean -> . expression AND expression
    (30) boolean -> . expression OR expression
    (36) boolean -> . TRUE
    (37) boolean -> . FALSE

    COLON           shift and go to state 78
    MINUS           shift and go to state 16
    PLUS            shift and go to state 15
    BIT_NEG         shift and go to state 17
    NOT             shift and go to state 18
    LPAREN          shift and go to state 12
    LSQBRACK        shift and go to state 7
    STRING          shift and go to state 20
    IDENTIFIER      shift and go to state 14
    NUM_INT         shift and go to state 22
    NUM_FLOAT       shift and go to state 23
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26

    identifier                     shift and go to state 64
    expression                     shift and go to state 77
    primitive                      shift and go to state 19
    boolean                        shift and go to state 24

state 29

    (51) expression -> identifier EQUALS . assignable STMT_END
    (38) assignable -> . primitive
    (39) assignable -> . expression
    (8) primitive -> . NUM_INT
    (9) primitive -> . NUM_FLOAT
    (10) primitive -> . STRING
    (11) primitive -> . boolean
    (12) expression -> . expression PLUS expression
    (13) expression -> . expression MINUS expression
    (14) expression -> . expression MUL expression
    (15) expression -> . expression DIV expression
    (16) expression -> . expression EXP expression
    (17) expression -> . expression MOD expression
    (18) expression -> . expression BIT_AND expression
    (19) expression -> . expression BIT_OR expression
    (20) expression -> . expression BIT_XOR expression
    (21) expression -> . expression LSHIFT expression
    (22) expression -> . expression RSHIFT expression
    (31) expression -> . MINUS expression
    (32) expression -> . PLUS expression
    (33) expression -> . BIT_NEG expression
    (34) expression -> . NOT expression
    (35) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression QUESTION_MARK expression COLON expression
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable STMT_END
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier DOUBLE_PLUS
    (65) expression -> . identifier DOUBLE_MINUS
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (77) expression -> . identifier LPAREN arguments RPAREN
    (23) boolean -> . expression EQ expression
    (24) boolean -> . expression NEQ expression
    (25) boolean -> . expression GT expression
    (26) boolean -> . expression GTE expression
    (27) boolean -> . expression LT expression
    (28) boolean -> . expression LTE expression
    (29) boolean -> . expression AND expression
    (30) boolean -> . expression OR expression
    (36) boolean -> . TRUE
    (37) boolean -> . FALSE
    (6) identifier -> . IDENTIFIER

    NUM_INT         shift and go to state 22
    NUM_FLOAT       shift and go to state 23
    STRING          shift and go to state 82
    MINUS           shift and go to state 16
    PLUS            shift and go to state 15
    BIT_NEG         shift and go to state 17
    NOT             shift and go to state 18
    LPAREN          shift and go to state 12
    LSQBRACK        shift and go to state 7
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    IDENTIFIER      shift and go to state 14

    identifier                     shift and go to state 64
    assignable                     shift and go to state 79
    primitive                      shift and go to state 80
    expression                     shift and go to state 81
    boolean                        shift and go to state 24

state 30

    (58) statement -> identifier PLUS_EQ . expression STMT_END
    (12) expression -> . expression PLUS expression
    (13) expression -> . expression MINUS expression
    (14) expression -> . expression MUL expression
    (15) expression -> . expression DIV expression
    (16) expression -> . expression EXP expression
    (17) expression -> . expression MOD expression
    (18) expression -> . expression BIT_AND expression
    (19) expression -> . expression BIT_OR expression
    (20) expression -> . expression BIT_XOR expression
    (21) expression -> . expression LSHIFT expression
    (22) expression -> . expression RSHIFT expression
    (31) expression -> . MINUS expression
    (32) expression -> . PLUS expression
    (33) expression -> . BIT_NEG expression
    (34) expression -> . NOT expression
    (35) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression QUESTION_MARK expression COLON expression
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable STMT_END
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier DOUBLE_PLUS
    (65) expression -> . identifier DOUBLE_MINUS
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (77) expression -> . identifier LPAREN arguments RPAREN
    (6) identifier -> . IDENTIFIER
    (8) primitive -> . NUM_INT
    (9) primitive -> . NUM_FLOAT
    (10) primitive -> . STRING
    (11) primitive -> . boolean
    (23) boolean -> . expression EQ expression
    (24) boolean -> . expression NEQ expression
    (25) boolean -> . expression GT expression
    (26) boolean -> . expression GTE expression
    (27) boolean -> . expression LT expression
    (28) boolean -> . expression LTE expression
    (29) boolean -> . expression AND expression
    (30) boolean -> . expression OR expression
    (36) boolean -> . TRUE
    (37) boolean -> . FALSE

    MINUS           shift and go to state 16
    PLUS            shift and go to state 15
    BIT_NEG         shift and go to state 17
    NOT             shift and go to state 18
    LPAREN          shift and go to state 12
    LSQBRACK        shift and go to state 7
    STRING          shift and go to state 20
    IDENTIFIER      shift and go to state 14
    NUM_INT         shift and go to state 22
    NUM_FLOAT       shift and go to state 23
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26

    identifier                     shift and go to state 64
    expression                     shift and go to state 83
    primitive                      shift and go to state 19
    boolean                        shift and go to state 24

state 31

    (59) statement -> identifier MINUS_EQ . expression STMT_END
    (12) expression -> . expression PLUS expression
    (13) expression -> . expression MINUS expression
    (14) expression -> . expression MUL expression
    (15) expression -> . expression DIV expression
    (16) expression -> . expression EXP expression
    (17) expression -> . expression MOD expression
    (18) expression -> . expression BIT_AND expression
    (19) expression -> . expression BIT_OR expression
    (20) expression -> . expression BIT_XOR expression
    (21) expression -> . expression LSHIFT expression
    (22) expression -> . expression RSHIFT expression
    (31) expression -> . MINUS expression
    (32) expression -> . PLUS expression
    (33) expression -> . BIT_NEG expression
    (34) expression -> . NOT expression
    (35) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression QUESTION_MARK expression COLON expression
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable STMT_END
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier DOUBLE_PLUS
    (65) expression -> . identifier DOUBLE_MINUS
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (77) expression -> . identifier LPAREN arguments RPAREN
    (6) identifier -> . IDENTIFIER
    (8) primitive -> . NUM_INT
    (9) primitive -> . NUM_FLOAT
    (10) primitive -> . STRING
    (11) primitive -> . boolean
    (23) boolean -> . expression EQ expression
    (24) boolean -> . expression NEQ expression
    (25) boolean -> . expression GT expression
    (26) boolean -> . expression GTE expression
    (27) boolean -> . expression LT expression
    (28) boolean -> . expression LTE expression
    (29) boolean -> . expression AND expression
    (30) boolean -> . expression OR expression
    (36) boolean -> . TRUE
    (37) boolean -> . FALSE

    MINUS           shift and go to state 16
    PLUS            shift and go to state 15
    BIT_NEG         shift and go to state 17
    NOT             shift and go to state 18
    LPAREN          shift and go to state 12
    LSQBRACK        shift and go to state 7
    STRING          shift and go to state 20
    IDENTIFIER      shift and go to state 14
    NUM_INT         shift and go to state 22
    NUM_FLOAT       shift and go to state 23
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26

    identifier                     shift and go to state 64
    expression                     shift and go to state 84
    primitive                      shift and go to state 19
    boolean                        shift and go to state 24

state 32

    (60) statement -> identifier MUL_EQ . expression STMT_END
    (12) expression -> . expression PLUS expression
    (13) expression -> . expression MINUS expression
    (14) expression -> . expression MUL expression
    (15) expression -> . expression DIV expression
    (16) expression -> . expression EXP expression
    (17) expression -> . expression MOD expression
    (18) expression -> . expression BIT_AND expression
    (19) expression -> . expression BIT_OR expression
    (20) expression -> . expression BIT_XOR expression
    (21) expression -> . expression LSHIFT expression
    (22) expression -> . expression RSHIFT expression
    (31) expression -> . MINUS expression
    (32) expression -> . PLUS expression
    (33) expression -> . BIT_NEG expression
    (34) expression -> . NOT expression
    (35) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression QUESTION_MARK expression COLON expression
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable STMT_END
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier DOUBLE_PLUS
    (65) expression -> . identifier DOUBLE_MINUS
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (77) expression -> . identifier LPAREN arguments RPAREN
    (6) identifier -> . IDENTIFIER
    (8) primitive -> . NUM_INT
    (9) primitive -> . NUM_FLOAT
    (10) primitive -> . STRING
    (11) primitive -> . boolean
    (23) boolean -> . expression EQ expression
    (24) boolean -> . expression NEQ expression
    (25) boolean -> . expression GT expression
    (26) boolean -> . expression GTE expression
    (27) boolean -> . expression LT expression
    (28) boolean -> . expression LTE expression
    (29) boolean -> . expression AND expression
    (30) boolean -> . expression OR expression
    (36) boolean -> . TRUE
    (37) boolean -> . FALSE

    MINUS           shift and go to state 16
    PLUS            shift and go to state 15
    BIT_NEG         shift and go to state 17
    NOT             shift and go to state 18
    LPAREN          shift and go to state 12
    LSQBRACK        shift and go to state 7
    STRING          shift and go to state 20
    IDENTIFIER      shift and go to state 14
    NUM_INT         shift and go to state 22
    NUM_FLOAT       shift and go to state 23
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26

    identifier                     shift and go to state 64
    expression                     shift and go to state 85
    primitive                      shift and go to state 19
    boolean                        shift and go to state 24

state 33

    (61) statement -> identifier DIV_EQ . expression STMT_END
    (12) expression -> . expression PLUS expression
    (13) expression -> . expression MINUS expression
    (14) expression -> . expression MUL expression
    (15) expression -> . expression DIV expression
    (16) expression -> . expression EXP expression
    (17) expression -> . expression MOD expression
    (18) expression -> . expression BIT_AND expression
    (19) expression -> . expression BIT_OR expression
    (20) expression -> . expression BIT_XOR expression
    (21) expression -> . expression LSHIFT expression
    (22) expression -> . expression RSHIFT expression
    (31) expression -> . MINUS expression
    (32) expression -> . PLUS expression
    (33) expression -> . BIT_NEG expression
    (34) expression -> . NOT expression
    (35) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression QUESTION_MARK expression COLON expression
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable STMT_END
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier DOUBLE_PLUS
    (65) expression -> . identifier DOUBLE_MINUS
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (77) expression -> . identifier LPAREN arguments RPAREN
    (6) identifier -> . IDENTIFIER
    (8) primitive -> . NUM_INT
    (9) primitive -> . NUM_FLOAT
    (10) primitive -> . STRING
    (11) primitive -> . boolean
    (23) boolean -> . expression EQ expression
    (24) boolean -> . expression NEQ expression
    (25) boolean -> . expression GT expression
    (26) boolean -> . expression GTE expression
    (27) boolean -> . expression LT expression
    (28) boolean -> . expression LTE expression
    (29) boolean -> . expression AND expression
    (30) boolean -> . expression OR expression
    (36) boolean -> . TRUE
    (37) boolean -> . FALSE

    MINUS           shift and go to state 16
    PLUS            shift and go to state 15
    BIT_NEG         shift and go to state 17
    NOT             shift and go to state 18
    LPAREN          shift and go to state 12
    LSQBRACK        shift and go to state 7
    STRING          shift and go to state 20
    IDENTIFIER      shift and go to state 14
    NUM_INT         shift and go to state 22
    NUM_FLOAT       shift and go to state 23
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26

    identifier                     shift and go to state 64
    expression                     shift and go to state 86
    primitive                      shift and go to state 19
    boolean                        shift and go to state 24

state 34

    (62) statement -> identifier EXP_EQ . expression STMT_END
    (12) expression -> . expression PLUS expression
    (13) expression -> . expression MINUS expression
    (14) expression -> . expression MUL expression
    (15) expression -> . expression DIV expression
    (16) expression -> . expression EXP expression
    (17) expression -> . expression MOD expression
    (18) expression -> . expression BIT_AND expression
    (19) expression -> . expression BIT_OR expression
    (20) expression -> . expression BIT_XOR expression
    (21) expression -> . expression LSHIFT expression
    (22) expression -> . expression RSHIFT expression
    (31) expression -> . MINUS expression
    (32) expression -> . PLUS expression
    (33) expression -> . BIT_NEG expression
    (34) expression -> . NOT expression
    (35) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression QUESTION_MARK expression COLON expression
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable STMT_END
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier DOUBLE_PLUS
    (65) expression -> . identifier DOUBLE_MINUS
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (77) expression -> . identifier LPAREN arguments RPAREN
    (6) identifier -> . IDENTIFIER
    (8) primitive -> . NUM_INT
    (9) primitive -> . NUM_FLOAT
    (10) primitive -> . STRING
    (11) primitive -> . boolean
    (23) boolean -> . expression EQ expression
    (24) boolean -> . expression NEQ expression
    (25) boolean -> . expression GT expression
    (26) boolean -> . expression GTE expression
    (27) boolean -> . expression LT expression
    (28) boolean -> . expression LTE expression
    (29) boolean -> . expression AND expression
    (30) boolean -> . expression OR expression
    (36) boolean -> . TRUE
    (37) boolean -> . FALSE

    MINUS           shift and go to state 16
    PLUS            shift and go to state 15
    BIT_NEG         shift and go to state 17
    NOT             shift and go to state 18
    LPAREN          shift and go to state 12
    LSQBRACK        shift and go to state 7
    STRING          shift and go to state 20
    IDENTIFIER      shift and go to state 14
    NUM_INT         shift and go to state 22
    NUM_FLOAT       shift and go to state 23
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26

    identifier                     shift and go to state 64
    expression                     shift and go to state 87
    primitive                      shift and go to state 19
    boolean                        shift and go to state 24

state 35

    (63) statement -> identifier MOD_EQ . expression STMT_END
    (12) expression -> . expression PLUS expression
    (13) expression -> . expression MINUS expression
    (14) expression -> . expression MUL expression
    (15) expression -> . expression DIV expression
    (16) expression -> . expression EXP expression
    (17) expression -> . expression MOD expression
    (18) expression -> . expression BIT_AND expression
    (19) expression -> . expression BIT_OR expression
    (20) expression -> . expression BIT_XOR expression
    (21) expression -> . expression LSHIFT expression
    (22) expression -> . expression RSHIFT expression
    (31) expression -> . MINUS expression
    (32) expression -> . PLUS expression
    (33) expression -> . BIT_NEG expression
    (34) expression -> . NOT expression
    (35) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression QUESTION_MARK expression COLON expression
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable STMT_END
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier DOUBLE_PLUS
    (65) expression -> . identifier DOUBLE_MINUS
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (77) expression -> . identifier LPAREN arguments RPAREN
    (6) identifier -> . IDENTIFIER
    (8) primitive -> . NUM_INT
    (9) primitive -> . NUM_FLOAT
    (10) primitive -> . STRING
    (11) primitive -> . boolean
    (23) boolean -> . expression EQ expression
    (24) boolean -> . expression NEQ expression
    (25) boolean -> . expression GT expression
    (26) boolean -> . expression GTE expression
    (27) boolean -> . expression LT expression
    (28) boolean -> . expression LTE expression
    (29) boolean -> . expression AND expression
    (30) boolean -> . expression OR expression
    (36) boolean -> . TRUE
    (37) boolean -> . FALSE

    MINUS           shift and go to state 16
    PLUS            shift and go to state 15
    BIT_NEG         shift and go to state 17
    NOT             shift and go to state 18
    LPAREN          shift and go to state 12
    LSQBRACK        shift and go to state 7
    STRING          shift and go to state 20
    IDENTIFIER      shift and go to state 14
    NUM_INT         shift and go to state 22
    NUM_FLOAT       shift and go to state 23
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26

    identifier                     shift and go to state 64
    expression                     shift and go to state 88
    primitive                      shift and go to state 19
    boolean                        shift and go to state 24

state 36

    (78) statement -> identifier LPAREN . arguments RPAREN STMT_END
    (77) expression -> identifier LPAREN . arguments RPAREN
    (40) arguments -> . arguments COMMA expression
    (41) arguments -> . expression
    (42) arguments -> .
    (12) expression -> . expression PLUS expression
    (13) expression -> . expression MINUS expression
    (14) expression -> . expression MUL expression
    (15) expression -> . expression DIV expression
    (16) expression -> . expression EXP expression
    (17) expression -> . expression MOD expression
    (18) expression -> . expression BIT_AND expression
    (19) expression -> . expression BIT_OR expression
    (20) expression -> . expression BIT_XOR expression
    (21) expression -> . expression LSHIFT expression
    (22) expression -> . expression RSHIFT expression
    (31) expression -> . MINUS expression
    (32) expression -> . PLUS expression
    (33) expression -> . BIT_NEG expression
    (34) expression -> . NOT expression
    (35) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression QUESTION_MARK expression COLON expression
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable STMT_END
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier DOUBLE_PLUS
    (65) expression -> . identifier DOUBLE_MINUS
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (77) expression -> . identifier LPAREN arguments RPAREN
    (6) identifier -> . IDENTIFIER
    (8) primitive -> . NUM_INT
    (9) primitive -> . NUM_FLOAT
    (10) primitive -> . STRING
    (11) primitive -> . boolean
    (23) boolean -> . expression EQ expression
    (24) boolean -> . expression NEQ expression
    (25) boolean -> . expression GT expression
    (26) boolean -> . expression GTE expression
    (27) boolean -> . expression LT expression
    (28) boolean -> . expression LTE expression
    (29) boolean -> . expression AND expression
    (30) boolean -> . expression OR expression
    (36) boolean -> . TRUE
    (37) boolean -> . FALSE

    RPAREN          reduce using rule 42 (arguments -> .)
    COMMA           reduce using rule 42 (arguments -> .)
    MINUS           shift and go to state 16
    PLUS            shift and go to state 15
    BIT_NEG         shift and go to state 17
    NOT             shift and go to state 18
    LPAREN          shift and go to state 12
    LSQBRACK        shift and go to state 7
    STRING          shift and go to state 20
    IDENTIFIER      shift and go to state 14
    NUM_INT         shift and go to state 22
    NUM_FLOAT       shift and go to state 23
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26

    identifier                     shift and go to state 64
    arguments                      shift and go to state 89
    expression                     shift and go to state 63
    primitive                      shift and go to state 19
    boolean                        shift and go to state 24

state 37

    (64) expression -> identifier DOUBLE_PLUS .

    PLUS            reduce using rule 64 (expression -> identifier DOUBLE_PLUS .)
    MINUS           reduce using rule 64 (expression -> identifier DOUBLE_PLUS .)
    MUL             reduce using rule 64 (expression -> identifier DOUBLE_PLUS .)
    DIV             reduce using rule 64 (expression -> identifier DOUBLE_PLUS .)
    EXP             reduce using rule 64 (expression -> identifier DOUBLE_PLUS .)
    MOD             reduce using rule 64 (expression -> identifier DOUBLE_PLUS .)
    BIT_AND         reduce using rule 64 (expression -> identifier DOUBLE_PLUS .)
    BIT_OR          reduce using rule 64 (expression -> identifier DOUBLE_PLUS .)
    BIT_XOR         reduce using rule 64 (expression -> identifier DOUBLE_PLUS .)
    LSHIFT          reduce using rule 64 (expression -> identifier DOUBLE_PLUS .)
    RSHIFT          reduce using rule 64 (expression -> identifier DOUBLE_PLUS .)
    QUESTION_MARK   reduce using rule 64 (expression -> identifier DOUBLE_PLUS .)
    IN              reduce using rule 64 (expression -> identifier DOUBLE_PLUS .)
    NOT             reduce using rule 64 (expression -> identifier DOUBLE_PLUS .)
    EQ              reduce using rule 64 (expression -> identifier DOUBLE_PLUS .)
    NEQ             reduce using rule 64 (expression -> identifier DOUBLE_PLUS .)
    GT              reduce using rule 64 (expression -> identifier DOUBLE_PLUS .)
    GTE             reduce using rule 64 (expression -> identifier DOUBLE_PLUS .)
    LT              reduce using rule 64 (expression -> identifier DOUBLE_PLUS .)
    LTE             reduce using rule 64 (expression -> identifier DOUBLE_PLUS .)
    AND             reduce using rule 64 (expression -> identifier DOUBLE_PLUS .)
    OR              reduce using rule 64 (expression -> identifier DOUBLE_PLUS .)
    EXIT            reduce using rule 64 (expression -> identifier DOUBLE_PLUS .)
    PRINT           reduce using rule 64 (expression -> identifier DOUBLE_PLUS .)
    FOR             reduce using rule 64 (expression -> identifier DOUBLE_PLUS .)
    WHILE           reduce using rule 64 (expression -> identifier DOUBLE_PLUS .)
    FUNCTION        reduce using rule 64 (expression -> identifier DOUBLE_PLUS .)
    RETURN          reduce using rule 64 (expression -> identifier DOUBLE_PLUS .)
    IDENTIFIER      reduce using rule 64 (expression -> identifier DOUBLE_PLUS .)
    BIT_NEG         reduce using rule 64 (expression -> identifier DOUBLE_PLUS .)
    LPAREN          reduce using rule 64 (expression -> identifier DOUBLE_PLUS .)
    LSQBRACK        reduce using rule 64 (expression -> identifier DOUBLE_PLUS .)
    STRING          reduce using rule 64 (expression -> identifier DOUBLE_PLUS .)
    IF              reduce using rule 64 (expression -> identifier DOUBLE_PLUS .)
    NUM_INT         reduce using rule 64 (expression -> identifier DOUBLE_PLUS .)
    NUM_FLOAT       reduce using rule 64 (expression -> identifier DOUBLE_PLUS .)
    TRUE            reduce using rule 64 (expression -> identifier DOUBLE_PLUS .)
    FALSE           reduce using rule 64 (expression -> identifier DOUBLE_PLUS .)
    $end            reduce using rule 64 (expression -> identifier DOUBLE_PLUS .)
    RSQBRACK        reduce using rule 64 (expression -> identifier DOUBLE_PLUS .)
    COMMA           reduce using rule 64 (expression -> identifier DOUBLE_PLUS .)
    STMT_END        reduce using rule 64 (expression -> identifier DOUBLE_PLUS .)
    LBRACK          reduce using rule 64 (expression -> identifier DOUBLE_PLUS .)
    RPAREN          reduce using rule 64 (expression -> identifier DOUBLE_PLUS .)
    COLON           reduce using rule 64 (expression -> identifier DOUBLE_PLUS .)
    RBRACK          reduce using rule 64 (expression -> identifier DOUBLE_PLUS .)
    ARROW_LTR       reduce using rule 64 (expression -> identifier DOUBLE_PLUS .)
    ARROW_RTL       reduce using rule 64 (expression -> identifier DOUBLE_PLUS .)


state 38

    (65) expression -> identifier DOUBLE_MINUS .

    PLUS            reduce using rule 65 (expression -> identifier DOUBLE_MINUS .)
    MINUS           reduce using rule 65 (expression -> identifier DOUBLE_MINUS .)
    MUL             reduce using rule 65 (expression -> identifier DOUBLE_MINUS .)
    DIV             reduce using rule 65 (expression -> identifier DOUBLE_MINUS .)
    EXP             reduce using rule 65 (expression -> identifier DOUBLE_MINUS .)
    MOD             reduce using rule 65 (expression -> identifier DOUBLE_MINUS .)
    BIT_AND         reduce using rule 65 (expression -> identifier DOUBLE_MINUS .)
    BIT_OR          reduce using rule 65 (expression -> identifier DOUBLE_MINUS .)
    BIT_XOR         reduce using rule 65 (expression -> identifier DOUBLE_MINUS .)
    LSHIFT          reduce using rule 65 (expression -> identifier DOUBLE_MINUS .)
    RSHIFT          reduce using rule 65 (expression -> identifier DOUBLE_MINUS .)
    QUESTION_MARK   reduce using rule 65 (expression -> identifier DOUBLE_MINUS .)
    IN              reduce using rule 65 (expression -> identifier DOUBLE_MINUS .)
    NOT             reduce using rule 65 (expression -> identifier DOUBLE_MINUS .)
    EQ              reduce using rule 65 (expression -> identifier DOUBLE_MINUS .)
    NEQ             reduce using rule 65 (expression -> identifier DOUBLE_MINUS .)
    GT              reduce using rule 65 (expression -> identifier DOUBLE_MINUS .)
    GTE             reduce using rule 65 (expression -> identifier DOUBLE_MINUS .)
    LT              reduce using rule 65 (expression -> identifier DOUBLE_MINUS .)
    LTE             reduce using rule 65 (expression -> identifier DOUBLE_MINUS .)
    AND             reduce using rule 65 (expression -> identifier DOUBLE_MINUS .)
    OR              reduce using rule 65 (expression -> identifier DOUBLE_MINUS .)
    EXIT            reduce using rule 65 (expression -> identifier DOUBLE_MINUS .)
    PRINT           reduce using rule 65 (expression -> identifier DOUBLE_MINUS .)
    FOR             reduce using rule 65 (expression -> identifier DOUBLE_MINUS .)
    WHILE           reduce using rule 65 (expression -> identifier DOUBLE_MINUS .)
    FUNCTION        reduce using rule 65 (expression -> identifier DOUBLE_MINUS .)
    RETURN          reduce using rule 65 (expression -> identifier DOUBLE_MINUS .)
    IDENTIFIER      reduce using rule 65 (expression -> identifier DOUBLE_MINUS .)
    BIT_NEG         reduce using rule 65 (expression -> identifier DOUBLE_MINUS .)
    LPAREN          reduce using rule 65 (expression -> identifier DOUBLE_MINUS .)
    LSQBRACK        reduce using rule 65 (expression -> identifier DOUBLE_MINUS .)
    STRING          reduce using rule 65 (expression -> identifier DOUBLE_MINUS .)
    IF              reduce using rule 65 (expression -> identifier DOUBLE_MINUS .)
    NUM_INT         reduce using rule 65 (expression -> identifier DOUBLE_MINUS .)
    NUM_FLOAT       reduce using rule 65 (expression -> identifier DOUBLE_MINUS .)
    TRUE            reduce using rule 65 (expression -> identifier DOUBLE_MINUS .)
    FALSE           reduce using rule 65 (expression -> identifier DOUBLE_MINUS .)
    $end            reduce using rule 65 (expression -> identifier DOUBLE_MINUS .)
    RSQBRACK        reduce using rule 65 (expression -> identifier DOUBLE_MINUS .)
    COMMA           reduce using rule 65 (expression -> identifier DOUBLE_MINUS .)
    STMT_END        reduce using rule 65 (expression -> identifier DOUBLE_MINUS .)
    LBRACK          reduce using rule 65 (expression -> identifier DOUBLE_MINUS .)
    RPAREN          reduce using rule 65 (expression -> identifier DOUBLE_MINUS .)
    COLON           reduce using rule 65 (expression -> identifier DOUBLE_MINUS .)
    RBRACK          reduce using rule 65 (expression -> identifier DOUBLE_MINUS .)
    ARROW_LTR       reduce using rule 65 (expression -> identifier DOUBLE_MINUS .)
    ARROW_RTL       reduce using rule 65 (expression -> identifier DOUBLE_MINUS .)


state 39

    (12) expression -> expression PLUS . expression
    (12) expression -> . expression PLUS expression
    (13) expression -> . expression MINUS expression
    (14) expression -> . expression MUL expression
    (15) expression -> . expression DIV expression
    (16) expression -> . expression EXP expression
    (17) expression -> . expression MOD expression
    (18) expression -> . expression BIT_AND expression
    (19) expression -> . expression BIT_OR expression
    (20) expression -> . expression BIT_XOR expression
    (21) expression -> . expression LSHIFT expression
    (22) expression -> . expression RSHIFT expression
    (31) expression -> . MINUS expression
    (32) expression -> . PLUS expression
    (33) expression -> . BIT_NEG expression
    (34) expression -> . NOT expression
    (35) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression QUESTION_MARK expression COLON expression
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable STMT_END
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier DOUBLE_PLUS
    (65) expression -> . identifier DOUBLE_MINUS
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (77) expression -> . identifier LPAREN arguments RPAREN
    (6) identifier -> . IDENTIFIER
    (8) primitive -> . NUM_INT
    (9) primitive -> . NUM_FLOAT
    (10) primitive -> . STRING
    (11) primitive -> . boolean
    (23) boolean -> . expression EQ expression
    (24) boolean -> . expression NEQ expression
    (25) boolean -> . expression GT expression
    (26) boolean -> . expression GTE expression
    (27) boolean -> . expression LT expression
    (28) boolean -> . expression LTE expression
    (29) boolean -> . expression AND expression
    (30) boolean -> . expression OR expression
    (36) boolean -> . TRUE
    (37) boolean -> . FALSE

    MINUS           shift and go to state 16
    PLUS            shift and go to state 15
    BIT_NEG         shift and go to state 17
    NOT             shift and go to state 18
    LPAREN          shift and go to state 12
    LSQBRACK        shift and go to state 7
    STRING          shift and go to state 20
    IDENTIFIER      shift and go to state 14
    NUM_INT         shift and go to state 22
    NUM_FLOAT       shift and go to state 23
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26

    expression                     shift and go to state 90
    identifier                     shift and go to state 64
    primitive                      shift and go to state 19
    boolean                        shift and go to state 24

state 40

    (13) expression -> expression MINUS . expression
    (12) expression -> . expression PLUS expression
    (13) expression -> . expression MINUS expression
    (14) expression -> . expression MUL expression
    (15) expression -> . expression DIV expression
    (16) expression -> . expression EXP expression
    (17) expression -> . expression MOD expression
    (18) expression -> . expression BIT_AND expression
    (19) expression -> . expression BIT_OR expression
    (20) expression -> . expression BIT_XOR expression
    (21) expression -> . expression LSHIFT expression
    (22) expression -> . expression RSHIFT expression
    (31) expression -> . MINUS expression
    (32) expression -> . PLUS expression
    (33) expression -> . BIT_NEG expression
    (34) expression -> . NOT expression
    (35) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression QUESTION_MARK expression COLON expression
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable STMT_END
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier DOUBLE_PLUS
    (65) expression -> . identifier DOUBLE_MINUS
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (77) expression -> . identifier LPAREN arguments RPAREN
    (6) identifier -> . IDENTIFIER
    (8) primitive -> . NUM_INT
    (9) primitive -> . NUM_FLOAT
    (10) primitive -> . STRING
    (11) primitive -> . boolean
    (23) boolean -> . expression EQ expression
    (24) boolean -> . expression NEQ expression
    (25) boolean -> . expression GT expression
    (26) boolean -> . expression GTE expression
    (27) boolean -> . expression LT expression
    (28) boolean -> . expression LTE expression
    (29) boolean -> . expression AND expression
    (30) boolean -> . expression OR expression
    (36) boolean -> . TRUE
    (37) boolean -> . FALSE

    MINUS           shift and go to state 16
    PLUS            shift and go to state 15
    BIT_NEG         shift and go to state 17
    NOT             shift and go to state 18
    LPAREN          shift and go to state 12
    LSQBRACK        shift and go to state 7
    STRING          shift and go to state 20
    IDENTIFIER      shift and go to state 14
    NUM_INT         shift and go to state 22
    NUM_FLOAT       shift and go to state 23
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26

    expression                     shift and go to state 91
    identifier                     shift and go to state 64
    primitive                      shift and go to state 19
    boolean                        shift and go to state 24

state 41

    (14) expression -> expression MUL . expression
    (12) expression -> . expression PLUS expression
    (13) expression -> . expression MINUS expression
    (14) expression -> . expression MUL expression
    (15) expression -> . expression DIV expression
    (16) expression -> . expression EXP expression
    (17) expression -> . expression MOD expression
    (18) expression -> . expression BIT_AND expression
    (19) expression -> . expression BIT_OR expression
    (20) expression -> . expression BIT_XOR expression
    (21) expression -> . expression LSHIFT expression
    (22) expression -> . expression RSHIFT expression
    (31) expression -> . MINUS expression
    (32) expression -> . PLUS expression
    (33) expression -> . BIT_NEG expression
    (34) expression -> . NOT expression
    (35) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression QUESTION_MARK expression COLON expression
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable STMT_END
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier DOUBLE_PLUS
    (65) expression -> . identifier DOUBLE_MINUS
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (77) expression -> . identifier LPAREN arguments RPAREN
    (6) identifier -> . IDENTIFIER
    (8) primitive -> . NUM_INT
    (9) primitive -> . NUM_FLOAT
    (10) primitive -> . STRING
    (11) primitive -> . boolean
    (23) boolean -> . expression EQ expression
    (24) boolean -> . expression NEQ expression
    (25) boolean -> . expression GT expression
    (26) boolean -> . expression GTE expression
    (27) boolean -> . expression LT expression
    (28) boolean -> . expression LTE expression
    (29) boolean -> . expression AND expression
    (30) boolean -> . expression OR expression
    (36) boolean -> . TRUE
    (37) boolean -> . FALSE

    MINUS           shift and go to state 16
    PLUS            shift and go to state 15
    BIT_NEG         shift and go to state 17
    NOT             shift and go to state 18
    LPAREN          shift and go to state 12
    LSQBRACK        shift and go to state 7
    STRING          shift and go to state 20
    IDENTIFIER      shift and go to state 14
    NUM_INT         shift and go to state 22
    NUM_FLOAT       shift and go to state 23
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26

    expression                     shift and go to state 92
    identifier                     shift and go to state 64
    primitive                      shift and go to state 19
    boolean                        shift and go to state 24

state 42

    (15) expression -> expression DIV . expression
    (12) expression -> . expression PLUS expression
    (13) expression -> . expression MINUS expression
    (14) expression -> . expression MUL expression
    (15) expression -> . expression DIV expression
    (16) expression -> . expression EXP expression
    (17) expression -> . expression MOD expression
    (18) expression -> . expression BIT_AND expression
    (19) expression -> . expression BIT_OR expression
    (20) expression -> . expression BIT_XOR expression
    (21) expression -> . expression LSHIFT expression
    (22) expression -> . expression RSHIFT expression
    (31) expression -> . MINUS expression
    (32) expression -> . PLUS expression
    (33) expression -> . BIT_NEG expression
    (34) expression -> . NOT expression
    (35) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression QUESTION_MARK expression COLON expression
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable STMT_END
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier DOUBLE_PLUS
    (65) expression -> . identifier DOUBLE_MINUS
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (77) expression -> . identifier LPAREN arguments RPAREN
    (6) identifier -> . IDENTIFIER
    (8) primitive -> . NUM_INT
    (9) primitive -> . NUM_FLOAT
    (10) primitive -> . STRING
    (11) primitive -> . boolean
    (23) boolean -> . expression EQ expression
    (24) boolean -> . expression NEQ expression
    (25) boolean -> . expression GT expression
    (26) boolean -> . expression GTE expression
    (27) boolean -> . expression LT expression
    (28) boolean -> . expression LTE expression
    (29) boolean -> . expression AND expression
    (30) boolean -> . expression OR expression
    (36) boolean -> . TRUE
    (37) boolean -> . FALSE

    MINUS           shift and go to state 16
    PLUS            shift and go to state 15
    BIT_NEG         shift and go to state 17
    NOT             shift and go to state 18
    LPAREN          shift and go to state 12
    LSQBRACK        shift and go to state 7
    STRING          shift and go to state 20
    IDENTIFIER      shift and go to state 14
    NUM_INT         shift and go to state 22
    NUM_FLOAT       shift and go to state 23
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26

    expression                     shift and go to state 93
    identifier                     shift and go to state 64
    primitive                      shift and go to state 19
    boolean                        shift and go to state 24

state 43

    (16) expression -> expression EXP . expression
    (12) expression -> . expression PLUS expression
    (13) expression -> . expression MINUS expression
    (14) expression -> . expression MUL expression
    (15) expression -> . expression DIV expression
    (16) expression -> . expression EXP expression
    (17) expression -> . expression MOD expression
    (18) expression -> . expression BIT_AND expression
    (19) expression -> . expression BIT_OR expression
    (20) expression -> . expression BIT_XOR expression
    (21) expression -> . expression LSHIFT expression
    (22) expression -> . expression RSHIFT expression
    (31) expression -> . MINUS expression
    (32) expression -> . PLUS expression
    (33) expression -> . BIT_NEG expression
    (34) expression -> . NOT expression
    (35) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression QUESTION_MARK expression COLON expression
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable STMT_END
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier DOUBLE_PLUS
    (65) expression -> . identifier DOUBLE_MINUS
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (77) expression -> . identifier LPAREN arguments RPAREN
    (6) identifier -> . IDENTIFIER
    (8) primitive -> . NUM_INT
    (9) primitive -> . NUM_FLOAT
    (10) primitive -> . STRING
    (11) primitive -> . boolean
    (23) boolean -> . expression EQ expression
    (24) boolean -> . expression NEQ expression
    (25) boolean -> . expression GT expression
    (26) boolean -> . expression GTE expression
    (27) boolean -> . expression LT expression
    (28) boolean -> . expression LTE expression
    (29) boolean -> . expression AND expression
    (30) boolean -> . expression OR expression
    (36) boolean -> . TRUE
    (37) boolean -> . FALSE

    MINUS           shift and go to state 16
    PLUS            shift and go to state 15
    BIT_NEG         shift and go to state 17
    NOT             shift and go to state 18
    LPAREN          shift and go to state 12
    LSQBRACK        shift and go to state 7
    STRING          shift and go to state 20
    IDENTIFIER      shift and go to state 14
    NUM_INT         shift and go to state 22
    NUM_FLOAT       shift and go to state 23
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26

    expression                     shift and go to state 94
    identifier                     shift and go to state 64
    primitive                      shift and go to state 19
    boolean                        shift and go to state 24

state 44

    (17) expression -> expression MOD . expression
    (12) expression -> . expression PLUS expression
    (13) expression -> . expression MINUS expression
    (14) expression -> . expression MUL expression
    (15) expression -> . expression DIV expression
    (16) expression -> . expression EXP expression
    (17) expression -> . expression MOD expression
    (18) expression -> . expression BIT_AND expression
    (19) expression -> . expression BIT_OR expression
    (20) expression -> . expression BIT_XOR expression
    (21) expression -> . expression LSHIFT expression
    (22) expression -> . expression RSHIFT expression
    (31) expression -> . MINUS expression
    (32) expression -> . PLUS expression
    (33) expression -> . BIT_NEG expression
    (34) expression -> . NOT expression
    (35) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression QUESTION_MARK expression COLON expression
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable STMT_END
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier DOUBLE_PLUS
    (65) expression -> . identifier DOUBLE_MINUS
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (77) expression -> . identifier LPAREN arguments RPAREN
    (6) identifier -> . IDENTIFIER
    (8) primitive -> . NUM_INT
    (9) primitive -> . NUM_FLOAT
    (10) primitive -> . STRING
    (11) primitive -> . boolean
    (23) boolean -> . expression EQ expression
    (24) boolean -> . expression NEQ expression
    (25) boolean -> . expression GT expression
    (26) boolean -> . expression GTE expression
    (27) boolean -> . expression LT expression
    (28) boolean -> . expression LTE expression
    (29) boolean -> . expression AND expression
    (30) boolean -> . expression OR expression
    (36) boolean -> . TRUE
    (37) boolean -> . FALSE

    MINUS           shift and go to state 16
    PLUS            shift and go to state 15
    BIT_NEG         shift and go to state 17
    NOT             shift and go to state 18
    LPAREN          shift and go to state 12
    LSQBRACK        shift and go to state 7
    STRING          shift and go to state 20
    IDENTIFIER      shift and go to state 14
    NUM_INT         shift and go to state 22
    NUM_FLOAT       shift and go to state 23
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26

    expression                     shift and go to state 95
    identifier                     shift and go to state 64
    primitive                      shift and go to state 19
    boolean                        shift and go to state 24

state 45

    (18) expression -> expression BIT_AND . expression
    (12) expression -> . expression PLUS expression
    (13) expression -> . expression MINUS expression
    (14) expression -> . expression MUL expression
    (15) expression -> . expression DIV expression
    (16) expression -> . expression EXP expression
    (17) expression -> . expression MOD expression
    (18) expression -> . expression BIT_AND expression
    (19) expression -> . expression BIT_OR expression
    (20) expression -> . expression BIT_XOR expression
    (21) expression -> . expression LSHIFT expression
    (22) expression -> . expression RSHIFT expression
    (31) expression -> . MINUS expression
    (32) expression -> . PLUS expression
    (33) expression -> . BIT_NEG expression
    (34) expression -> . NOT expression
    (35) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression QUESTION_MARK expression COLON expression
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable STMT_END
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier DOUBLE_PLUS
    (65) expression -> . identifier DOUBLE_MINUS
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (77) expression -> . identifier LPAREN arguments RPAREN
    (6) identifier -> . IDENTIFIER
    (8) primitive -> . NUM_INT
    (9) primitive -> . NUM_FLOAT
    (10) primitive -> . STRING
    (11) primitive -> . boolean
    (23) boolean -> . expression EQ expression
    (24) boolean -> . expression NEQ expression
    (25) boolean -> . expression GT expression
    (26) boolean -> . expression GTE expression
    (27) boolean -> . expression LT expression
    (28) boolean -> . expression LTE expression
    (29) boolean -> . expression AND expression
    (30) boolean -> . expression OR expression
    (36) boolean -> . TRUE
    (37) boolean -> . FALSE

    MINUS           shift and go to state 16
    PLUS            shift and go to state 15
    BIT_NEG         shift and go to state 17
    NOT             shift and go to state 18
    LPAREN          shift and go to state 12
    LSQBRACK        shift and go to state 7
    STRING          shift and go to state 20
    IDENTIFIER      shift and go to state 14
    NUM_INT         shift and go to state 22
    NUM_FLOAT       shift and go to state 23
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26

    expression                     shift and go to state 96
    identifier                     shift and go to state 64
    primitive                      shift and go to state 19
    boolean                        shift and go to state 24

state 46

    (19) expression -> expression BIT_OR . expression
    (12) expression -> . expression PLUS expression
    (13) expression -> . expression MINUS expression
    (14) expression -> . expression MUL expression
    (15) expression -> . expression DIV expression
    (16) expression -> . expression EXP expression
    (17) expression -> . expression MOD expression
    (18) expression -> . expression BIT_AND expression
    (19) expression -> . expression BIT_OR expression
    (20) expression -> . expression BIT_XOR expression
    (21) expression -> . expression LSHIFT expression
    (22) expression -> . expression RSHIFT expression
    (31) expression -> . MINUS expression
    (32) expression -> . PLUS expression
    (33) expression -> . BIT_NEG expression
    (34) expression -> . NOT expression
    (35) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression QUESTION_MARK expression COLON expression
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable STMT_END
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier DOUBLE_PLUS
    (65) expression -> . identifier DOUBLE_MINUS
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (77) expression -> . identifier LPAREN arguments RPAREN
    (6) identifier -> . IDENTIFIER
    (8) primitive -> . NUM_INT
    (9) primitive -> . NUM_FLOAT
    (10) primitive -> . STRING
    (11) primitive -> . boolean
    (23) boolean -> . expression EQ expression
    (24) boolean -> . expression NEQ expression
    (25) boolean -> . expression GT expression
    (26) boolean -> . expression GTE expression
    (27) boolean -> . expression LT expression
    (28) boolean -> . expression LTE expression
    (29) boolean -> . expression AND expression
    (30) boolean -> . expression OR expression
    (36) boolean -> . TRUE
    (37) boolean -> . FALSE

    MINUS           shift and go to state 16
    PLUS            shift and go to state 15
    BIT_NEG         shift and go to state 17
    NOT             shift and go to state 18
    LPAREN          shift and go to state 12
    LSQBRACK        shift and go to state 7
    STRING          shift and go to state 20
    IDENTIFIER      shift and go to state 14
    NUM_INT         shift and go to state 22
    NUM_FLOAT       shift and go to state 23
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26

    expression                     shift and go to state 97
    identifier                     shift and go to state 64
    primitive                      shift and go to state 19
    boolean                        shift and go to state 24

state 47

    (20) expression -> expression BIT_XOR . expression
    (12) expression -> . expression PLUS expression
    (13) expression -> . expression MINUS expression
    (14) expression -> . expression MUL expression
    (15) expression -> . expression DIV expression
    (16) expression -> . expression EXP expression
    (17) expression -> . expression MOD expression
    (18) expression -> . expression BIT_AND expression
    (19) expression -> . expression BIT_OR expression
    (20) expression -> . expression BIT_XOR expression
    (21) expression -> . expression LSHIFT expression
    (22) expression -> . expression RSHIFT expression
    (31) expression -> . MINUS expression
    (32) expression -> . PLUS expression
    (33) expression -> . BIT_NEG expression
    (34) expression -> . NOT expression
    (35) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression QUESTION_MARK expression COLON expression
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable STMT_END
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier DOUBLE_PLUS
    (65) expression -> . identifier DOUBLE_MINUS
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (77) expression -> . identifier LPAREN arguments RPAREN
    (6) identifier -> . IDENTIFIER
    (8) primitive -> . NUM_INT
    (9) primitive -> . NUM_FLOAT
    (10) primitive -> . STRING
    (11) primitive -> . boolean
    (23) boolean -> . expression EQ expression
    (24) boolean -> . expression NEQ expression
    (25) boolean -> . expression GT expression
    (26) boolean -> . expression GTE expression
    (27) boolean -> . expression LT expression
    (28) boolean -> . expression LTE expression
    (29) boolean -> . expression AND expression
    (30) boolean -> . expression OR expression
    (36) boolean -> . TRUE
    (37) boolean -> . FALSE

    MINUS           shift and go to state 16
    PLUS            shift and go to state 15
    BIT_NEG         shift and go to state 17
    NOT             shift and go to state 18
    LPAREN          shift and go to state 12
    LSQBRACK        shift and go to state 7
    STRING          shift and go to state 20
    IDENTIFIER      shift and go to state 14
    NUM_INT         shift and go to state 22
    NUM_FLOAT       shift and go to state 23
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26

    expression                     shift and go to state 98
    identifier                     shift and go to state 64
    primitive                      shift and go to state 19
    boolean                        shift and go to state 24

state 48

    (21) expression -> expression LSHIFT . expression
    (12) expression -> . expression PLUS expression
    (13) expression -> . expression MINUS expression
    (14) expression -> . expression MUL expression
    (15) expression -> . expression DIV expression
    (16) expression -> . expression EXP expression
    (17) expression -> . expression MOD expression
    (18) expression -> . expression BIT_AND expression
    (19) expression -> . expression BIT_OR expression
    (20) expression -> . expression BIT_XOR expression
    (21) expression -> . expression LSHIFT expression
    (22) expression -> . expression RSHIFT expression
    (31) expression -> . MINUS expression
    (32) expression -> . PLUS expression
    (33) expression -> . BIT_NEG expression
    (34) expression -> . NOT expression
    (35) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression QUESTION_MARK expression COLON expression
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable STMT_END
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier DOUBLE_PLUS
    (65) expression -> . identifier DOUBLE_MINUS
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (77) expression -> . identifier LPAREN arguments RPAREN
    (6) identifier -> . IDENTIFIER
    (8) primitive -> . NUM_INT
    (9) primitive -> . NUM_FLOAT
    (10) primitive -> . STRING
    (11) primitive -> . boolean
    (23) boolean -> . expression EQ expression
    (24) boolean -> . expression NEQ expression
    (25) boolean -> . expression GT expression
    (26) boolean -> . expression GTE expression
    (27) boolean -> . expression LT expression
    (28) boolean -> . expression LTE expression
    (29) boolean -> . expression AND expression
    (30) boolean -> . expression OR expression
    (36) boolean -> . TRUE
    (37) boolean -> . FALSE

    MINUS           shift and go to state 16
    PLUS            shift and go to state 15
    BIT_NEG         shift and go to state 17
    NOT             shift and go to state 18
    LPAREN          shift and go to state 12
    LSQBRACK        shift and go to state 7
    STRING          shift and go to state 20
    IDENTIFIER      shift and go to state 14
    NUM_INT         shift and go to state 22
    NUM_FLOAT       shift and go to state 23
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26

    expression                     shift and go to state 99
    identifier                     shift and go to state 64
    primitive                      shift and go to state 19
    boolean                        shift and go to state 24

state 49

    (22) expression -> expression RSHIFT . expression
    (12) expression -> . expression PLUS expression
    (13) expression -> . expression MINUS expression
    (14) expression -> . expression MUL expression
    (15) expression -> . expression DIV expression
    (16) expression -> . expression EXP expression
    (17) expression -> . expression MOD expression
    (18) expression -> . expression BIT_AND expression
    (19) expression -> . expression BIT_OR expression
    (20) expression -> . expression BIT_XOR expression
    (21) expression -> . expression LSHIFT expression
    (22) expression -> . expression RSHIFT expression
    (31) expression -> . MINUS expression
    (32) expression -> . PLUS expression
    (33) expression -> . BIT_NEG expression
    (34) expression -> . NOT expression
    (35) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression QUESTION_MARK expression COLON expression
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable STMT_END
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier DOUBLE_PLUS
    (65) expression -> . identifier DOUBLE_MINUS
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (77) expression -> . identifier LPAREN arguments RPAREN
    (6) identifier -> . IDENTIFIER
    (8) primitive -> . NUM_INT
    (9) primitive -> . NUM_FLOAT
    (10) primitive -> . STRING
    (11) primitive -> . boolean
    (23) boolean -> . expression EQ expression
    (24) boolean -> . expression NEQ expression
    (25) boolean -> . expression GT expression
    (26) boolean -> . expression GTE expression
    (27) boolean -> . expression LT expression
    (28) boolean -> . expression LTE expression
    (29) boolean -> . expression AND expression
    (30) boolean -> . expression OR expression
    (36) boolean -> . TRUE
    (37) boolean -> . FALSE

    MINUS           shift and go to state 16
    PLUS            shift and go to state 15
    BIT_NEG         shift and go to state 17
    NOT             shift and go to state 18
    LPAREN          shift and go to state 12
    LSQBRACK        shift and go to state 7
    STRING          shift and go to state 20
    IDENTIFIER      shift and go to state 14
    NUM_INT         shift and go to state 22
    NUM_FLOAT       shift and go to state 23
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26

    expression                     shift and go to state 100
    identifier                     shift and go to state 64
    primitive                      shift and go to state 19
    boolean                        shift and go to state 24

state 50

    (43) expression -> expression QUESTION_MARK . expression COLON expression
    (12) expression -> . expression PLUS expression
    (13) expression -> . expression MINUS expression
    (14) expression -> . expression MUL expression
    (15) expression -> . expression DIV expression
    (16) expression -> . expression EXP expression
    (17) expression -> . expression MOD expression
    (18) expression -> . expression BIT_AND expression
    (19) expression -> . expression BIT_OR expression
    (20) expression -> . expression BIT_XOR expression
    (21) expression -> . expression LSHIFT expression
    (22) expression -> . expression RSHIFT expression
    (31) expression -> . MINUS expression
    (32) expression -> . PLUS expression
    (33) expression -> . BIT_NEG expression
    (34) expression -> . NOT expression
    (35) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression QUESTION_MARK expression COLON expression
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable STMT_END
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier DOUBLE_PLUS
    (65) expression -> . identifier DOUBLE_MINUS
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (77) expression -> . identifier LPAREN arguments RPAREN
    (6) identifier -> . IDENTIFIER
    (8) primitive -> . NUM_INT
    (9) primitive -> . NUM_FLOAT
    (10) primitive -> . STRING
    (11) primitive -> . boolean
    (23) boolean -> . expression EQ expression
    (24) boolean -> . expression NEQ expression
    (25) boolean -> . expression GT expression
    (26) boolean -> . expression GTE expression
    (27) boolean -> . expression LT expression
    (28) boolean -> . expression LTE expression
    (29) boolean -> . expression AND expression
    (30) boolean -> . expression OR expression
    (36) boolean -> . TRUE
    (37) boolean -> . FALSE

    MINUS           shift and go to state 16
    PLUS            shift and go to state 15
    BIT_NEG         shift and go to state 17
    NOT             shift and go to state 18
    LPAREN          shift and go to state 12
    LSQBRACK        shift and go to state 7
    STRING          shift and go to state 20
    IDENTIFIER      shift and go to state 14
    NUM_INT         shift and go to state 22
    NUM_FLOAT       shift and go to state 23
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26

    expression                     shift and go to state 101
    identifier                     shift and go to state 64
    primitive                      shift and go to state 19
    boolean                        shift and go to state 24

state 51

    (55) expression -> expression IN . expression
    (12) expression -> . expression PLUS expression
    (13) expression -> . expression MINUS expression
    (14) expression -> . expression MUL expression
    (15) expression -> . expression DIV expression
    (16) expression -> . expression EXP expression
    (17) expression -> . expression MOD expression
    (18) expression -> . expression BIT_AND expression
    (19) expression -> . expression BIT_OR expression
    (20) expression -> . expression BIT_XOR expression
    (21) expression -> . expression LSHIFT expression
    (22) expression -> . expression RSHIFT expression
    (31) expression -> . MINUS expression
    (32) expression -> . PLUS expression
    (33) expression -> . BIT_NEG expression
    (34) expression -> . NOT expression
    (35) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression QUESTION_MARK expression COLON expression
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable STMT_END
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier DOUBLE_PLUS
    (65) expression -> . identifier DOUBLE_MINUS
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (77) expression -> . identifier LPAREN arguments RPAREN
    (6) identifier -> . IDENTIFIER
    (8) primitive -> . NUM_INT
    (9) primitive -> . NUM_FLOAT
    (10) primitive -> . STRING
    (11) primitive -> . boolean
    (23) boolean -> . expression EQ expression
    (24) boolean -> . expression NEQ expression
    (25) boolean -> . expression GT expression
    (26) boolean -> . expression GTE expression
    (27) boolean -> . expression LT expression
    (28) boolean -> . expression LTE expression
    (29) boolean -> . expression AND expression
    (30) boolean -> . expression OR expression
    (36) boolean -> . TRUE
    (37) boolean -> . FALSE

    MINUS           shift and go to state 16
    PLUS            shift and go to state 15
    BIT_NEG         shift and go to state 17
    NOT             shift and go to state 18
    LPAREN          shift and go to state 12
    LSQBRACK        shift and go to state 7
    STRING          shift and go to state 20
    IDENTIFIER      shift and go to state 14
    NUM_INT         shift and go to state 22
    NUM_FLOAT       shift and go to state 23
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26

    expression                     shift and go to state 102
    identifier                     shift and go to state 64
    primitive                      shift and go to state 19
    boolean                        shift and go to state 24

state 52

    (56) expression -> expression NOT . IN expression

    IN              shift and go to state 103


state 53

    (23) boolean -> expression EQ . expression
    (12) expression -> . expression PLUS expression
    (13) expression -> . expression MINUS expression
    (14) expression -> . expression MUL expression
    (15) expression -> . expression DIV expression
    (16) expression -> . expression EXP expression
    (17) expression -> . expression MOD expression
    (18) expression -> . expression BIT_AND expression
    (19) expression -> . expression BIT_OR expression
    (20) expression -> . expression BIT_XOR expression
    (21) expression -> . expression LSHIFT expression
    (22) expression -> . expression RSHIFT expression
    (31) expression -> . MINUS expression
    (32) expression -> . PLUS expression
    (33) expression -> . BIT_NEG expression
    (34) expression -> . NOT expression
    (35) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression QUESTION_MARK expression COLON expression
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable STMT_END
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier DOUBLE_PLUS
    (65) expression -> . identifier DOUBLE_MINUS
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (77) expression -> . identifier LPAREN arguments RPAREN
    (6) identifier -> . IDENTIFIER
    (8) primitive -> . NUM_INT
    (9) primitive -> . NUM_FLOAT
    (10) primitive -> . STRING
    (11) primitive -> . boolean
    (23) boolean -> . expression EQ expression
    (24) boolean -> . expression NEQ expression
    (25) boolean -> . expression GT expression
    (26) boolean -> . expression GTE expression
    (27) boolean -> . expression LT expression
    (28) boolean -> . expression LTE expression
    (29) boolean -> . expression AND expression
    (30) boolean -> . expression OR expression
    (36) boolean -> . TRUE
    (37) boolean -> . FALSE

    MINUS           shift and go to state 16
    PLUS            shift and go to state 15
    BIT_NEG         shift and go to state 17
    NOT             shift and go to state 18
    LPAREN          shift and go to state 12
    LSQBRACK        shift and go to state 7
    STRING          shift and go to state 20
    IDENTIFIER      shift and go to state 14
    NUM_INT         shift and go to state 22
    NUM_FLOAT       shift and go to state 23
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26

    expression                     shift and go to state 104
    identifier                     shift and go to state 64
    primitive                      shift and go to state 19
    boolean                        shift and go to state 24

state 54

    (24) boolean -> expression NEQ . expression
    (12) expression -> . expression PLUS expression
    (13) expression -> . expression MINUS expression
    (14) expression -> . expression MUL expression
    (15) expression -> . expression DIV expression
    (16) expression -> . expression EXP expression
    (17) expression -> . expression MOD expression
    (18) expression -> . expression BIT_AND expression
    (19) expression -> . expression BIT_OR expression
    (20) expression -> . expression BIT_XOR expression
    (21) expression -> . expression LSHIFT expression
    (22) expression -> . expression RSHIFT expression
    (31) expression -> . MINUS expression
    (32) expression -> . PLUS expression
    (33) expression -> . BIT_NEG expression
    (34) expression -> . NOT expression
    (35) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression QUESTION_MARK expression COLON expression
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable STMT_END
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier DOUBLE_PLUS
    (65) expression -> . identifier DOUBLE_MINUS
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (77) expression -> . identifier LPAREN arguments RPAREN
    (6) identifier -> . IDENTIFIER
    (8) primitive -> . NUM_INT
    (9) primitive -> . NUM_FLOAT
    (10) primitive -> . STRING
    (11) primitive -> . boolean
    (23) boolean -> . expression EQ expression
    (24) boolean -> . expression NEQ expression
    (25) boolean -> . expression GT expression
    (26) boolean -> . expression GTE expression
    (27) boolean -> . expression LT expression
    (28) boolean -> . expression LTE expression
    (29) boolean -> . expression AND expression
    (30) boolean -> . expression OR expression
    (36) boolean -> . TRUE
    (37) boolean -> . FALSE

    MINUS           shift and go to state 16
    PLUS            shift and go to state 15
    BIT_NEG         shift and go to state 17
    NOT             shift and go to state 18
    LPAREN          shift and go to state 12
    LSQBRACK        shift and go to state 7
    STRING          shift and go to state 20
    IDENTIFIER      shift and go to state 14
    NUM_INT         shift and go to state 22
    NUM_FLOAT       shift and go to state 23
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26

    expression                     shift and go to state 105
    identifier                     shift and go to state 64
    primitive                      shift and go to state 19
    boolean                        shift and go to state 24

state 55

    (25) boolean -> expression GT . expression
    (12) expression -> . expression PLUS expression
    (13) expression -> . expression MINUS expression
    (14) expression -> . expression MUL expression
    (15) expression -> . expression DIV expression
    (16) expression -> . expression EXP expression
    (17) expression -> . expression MOD expression
    (18) expression -> . expression BIT_AND expression
    (19) expression -> . expression BIT_OR expression
    (20) expression -> . expression BIT_XOR expression
    (21) expression -> . expression LSHIFT expression
    (22) expression -> . expression RSHIFT expression
    (31) expression -> . MINUS expression
    (32) expression -> . PLUS expression
    (33) expression -> . BIT_NEG expression
    (34) expression -> . NOT expression
    (35) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression QUESTION_MARK expression COLON expression
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable STMT_END
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier DOUBLE_PLUS
    (65) expression -> . identifier DOUBLE_MINUS
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (77) expression -> . identifier LPAREN arguments RPAREN
    (6) identifier -> . IDENTIFIER
    (8) primitive -> . NUM_INT
    (9) primitive -> . NUM_FLOAT
    (10) primitive -> . STRING
    (11) primitive -> . boolean
    (23) boolean -> . expression EQ expression
    (24) boolean -> . expression NEQ expression
    (25) boolean -> . expression GT expression
    (26) boolean -> . expression GTE expression
    (27) boolean -> . expression LT expression
    (28) boolean -> . expression LTE expression
    (29) boolean -> . expression AND expression
    (30) boolean -> . expression OR expression
    (36) boolean -> . TRUE
    (37) boolean -> . FALSE

    MINUS           shift and go to state 16
    PLUS            shift and go to state 15
    BIT_NEG         shift and go to state 17
    NOT             shift and go to state 18
    LPAREN          shift and go to state 12
    LSQBRACK        shift and go to state 7
    STRING          shift and go to state 20
    IDENTIFIER      shift and go to state 14
    NUM_INT         shift and go to state 22
    NUM_FLOAT       shift and go to state 23
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26

    expression                     shift and go to state 106
    identifier                     shift and go to state 64
    primitive                      shift and go to state 19
    boolean                        shift and go to state 24

state 56

    (26) boolean -> expression GTE . expression
    (12) expression -> . expression PLUS expression
    (13) expression -> . expression MINUS expression
    (14) expression -> . expression MUL expression
    (15) expression -> . expression DIV expression
    (16) expression -> . expression EXP expression
    (17) expression -> . expression MOD expression
    (18) expression -> . expression BIT_AND expression
    (19) expression -> . expression BIT_OR expression
    (20) expression -> . expression BIT_XOR expression
    (21) expression -> . expression LSHIFT expression
    (22) expression -> . expression RSHIFT expression
    (31) expression -> . MINUS expression
    (32) expression -> . PLUS expression
    (33) expression -> . BIT_NEG expression
    (34) expression -> . NOT expression
    (35) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression QUESTION_MARK expression COLON expression
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable STMT_END
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier DOUBLE_PLUS
    (65) expression -> . identifier DOUBLE_MINUS
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (77) expression -> . identifier LPAREN arguments RPAREN
    (6) identifier -> . IDENTIFIER
    (8) primitive -> . NUM_INT
    (9) primitive -> . NUM_FLOAT
    (10) primitive -> . STRING
    (11) primitive -> . boolean
    (23) boolean -> . expression EQ expression
    (24) boolean -> . expression NEQ expression
    (25) boolean -> . expression GT expression
    (26) boolean -> . expression GTE expression
    (27) boolean -> . expression LT expression
    (28) boolean -> . expression LTE expression
    (29) boolean -> . expression AND expression
    (30) boolean -> . expression OR expression
    (36) boolean -> . TRUE
    (37) boolean -> . FALSE

    MINUS           shift and go to state 16
    PLUS            shift and go to state 15
    BIT_NEG         shift and go to state 17
    NOT             shift and go to state 18
    LPAREN          shift and go to state 12
    LSQBRACK        shift and go to state 7
    STRING          shift and go to state 20
    IDENTIFIER      shift and go to state 14
    NUM_INT         shift and go to state 22
    NUM_FLOAT       shift and go to state 23
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26

    expression                     shift and go to state 107
    identifier                     shift and go to state 64
    primitive                      shift and go to state 19
    boolean                        shift and go to state 24

state 57

    (27) boolean -> expression LT . expression
    (12) expression -> . expression PLUS expression
    (13) expression -> . expression MINUS expression
    (14) expression -> . expression MUL expression
    (15) expression -> . expression DIV expression
    (16) expression -> . expression EXP expression
    (17) expression -> . expression MOD expression
    (18) expression -> . expression BIT_AND expression
    (19) expression -> . expression BIT_OR expression
    (20) expression -> . expression BIT_XOR expression
    (21) expression -> . expression LSHIFT expression
    (22) expression -> . expression RSHIFT expression
    (31) expression -> . MINUS expression
    (32) expression -> . PLUS expression
    (33) expression -> . BIT_NEG expression
    (34) expression -> . NOT expression
    (35) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression QUESTION_MARK expression COLON expression
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable STMT_END
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier DOUBLE_PLUS
    (65) expression -> . identifier DOUBLE_MINUS
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (77) expression -> . identifier LPAREN arguments RPAREN
    (6) identifier -> . IDENTIFIER
    (8) primitive -> . NUM_INT
    (9) primitive -> . NUM_FLOAT
    (10) primitive -> . STRING
    (11) primitive -> . boolean
    (23) boolean -> . expression EQ expression
    (24) boolean -> . expression NEQ expression
    (25) boolean -> . expression GT expression
    (26) boolean -> . expression GTE expression
    (27) boolean -> . expression LT expression
    (28) boolean -> . expression LTE expression
    (29) boolean -> . expression AND expression
    (30) boolean -> . expression OR expression
    (36) boolean -> . TRUE
    (37) boolean -> . FALSE

    MINUS           shift and go to state 16
    PLUS            shift and go to state 15
    BIT_NEG         shift and go to state 17
    NOT             shift and go to state 18
    LPAREN          shift and go to state 12
    LSQBRACK        shift and go to state 7
    STRING          shift and go to state 20
    IDENTIFIER      shift and go to state 14
    NUM_INT         shift and go to state 22
    NUM_FLOAT       shift and go to state 23
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26

    expression                     shift and go to state 108
    identifier                     shift and go to state 64
    primitive                      shift and go to state 19
    boolean                        shift and go to state 24

state 58

    (28) boolean -> expression LTE . expression
    (12) expression -> . expression PLUS expression
    (13) expression -> . expression MINUS expression
    (14) expression -> . expression MUL expression
    (15) expression -> . expression DIV expression
    (16) expression -> . expression EXP expression
    (17) expression -> . expression MOD expression
    (18) expression -> . expression BIT_AND expression
    (19) expression -> . expression BIT_OR expression
    (20) expression -> . expression BIT_XOR expression
    (21) expression -> . expression LSHIFT expression
    (22) expression -> . expression RSHIFT expression
    (31) expression -> . MINUS expression
    (32) expression -> . PLUS expression
    (33) expression -> . BIT_NEG expression
    (34) expression -> . NOT expression
    (35) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression QUESTION_MARK expression COLON expression
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable STMT_END
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier DOUBLE_PLUS
    (65) expression -> . identifier DOUBLE_MINUS
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (77) expression -> . identifier LPAREN arguments RPAREN
    (6) identifier -> . IDENTIFIER
    (8) primitive -> . NUM_INT
    (9) primitive -> . NUM_FLOAT
    (10) primitive -> . STRING
    (11) primitive -> . boolean
    (23) boolean -> . expression EQ expression
    (24) boolean -> . expression NEQ expression
    (25) boolean -> . expression GT expression
    (26) boolean -> . expression GTE expression
    (27) boolean -> . expression LT expression
    (28) boolean -> . expression LTE expression
    (29) boolean -> . expression AND expression
    (30) boolean -> . expression OR expression
    (36) boolean -> . TRUE
    (37) boolean -> . FALSE

    MINUS           shift and go to state 16
    PLUS            shift and go to state 15
    BIT_NEG         shift and go to state 17
    NOT             shift and go to state 18
    LPAREN          shift and go to state 12
    LSQBRACK        shift and go to state 7
    STRING          shift and go to state 20
    IDENTIFIER      shift and go to state 14
    NUM_INT         shift and go to state 22
    NUM_FLOAT       shift and go to state 23
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26

    expression                     shift and go to state 109
    identifier                     shift and go to state 64
    primitive                      shift and go to state 19
    boolean                        shift and go to state 24

state 59

    (29) boolean -> expression AND . expression
    (12) expression -> . expression PLUS expression
    (13) expression -> . expression MINUS expression
    (14) expression -> . expression MUL expression
    (15) expression -> . expression DIV expression
    (16) expression -> . expression EXP expression
    (17) expression -> . expression MOD expression
    (18) expression -> . expression BIT_AND expression
    (19) expression -> . expression BIT_OR expression
    (20) expression -> . expression BIT_XOR expression
    (21) expression -> . expression LSHIFT expression
    (22) expression -> . expression RSHIFT expression
    (31) expression -> . MINUS expression
    (32) expression -> . PLUS expression
    (33) expression -> . BIT_NEG expression
    (34) expression -> . NOT expression
    (35) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression QUESTION_MARK expression COLON expression
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable STMT_END
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier DOUBLE_PLUS
    (65) expression -> . identifier DOUBLE_MINUS
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (77) expression -> . identifier LPAREN arguments RPAREN
    (6) identifier -> . IDENTIFIER
    (8) primitive -> . NUM_INT
    (9) primitive -> . NUM_FLOAT
    (10) primitive -> . STRING
    (11) primitive -> . boolean
    (23) boolean -> . expression EQ expression
    (24) boolean -> . expression NEQ expression
    (25) boolean -> . expression GT expression
    (26) boolean -> . expression GTE expression
    (27) boolean -> . expression LT expression
    (28) boolean -> . expression LTE expression
    (29) boolean -> . expression AND expression
    (30) boolean -> . expression OR expression
    (36) boolean -> . TRUE
    (37) boolean -> . FALSE

    MINUS           shift and go to state 16
    PLUS            shift and go to state 15
    BIT_NEG         shift and go to state 17
    NOT             shift and go to state 18
    LPAREN          shift and go to state 12
    LSQBRACK        shift and go to state 7
    STRING          shift and go to state 20
    IDENTIFIER      shift and go to state 14
    NUM_INT         shift and go to state 22
    NUM_FLOAT       shift and go to state 23
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26

    expression                     shift and go to state 110
    identifier                     shift and go to state 64
    primitive                      shift and go to state 19
    boolean                        shift and go to state 24

state 60

    (30) boolean -> expression OR . expression
    (12) expression -> . expression PLUS expression
    (13) expression -> . expression MINUS expression
    (14) expression -> . expression MUL expression
    (15) expression -> . expression DIV expression
    (16) expression -> . expression EXP expression
    (17) expression -> . expression MOD expression
    (18) expression -> . expression BIT_AND expression
    (19) expression -> . expression BIT_OR expression
    (20) expression -> . expression BIT_XOR expression
    (21) expression -> . expression LSHIFT expression
    (22) expression -> . expression RSHIFT expression
    (31) expression -> . MINUS expression
    (32) expression -> . PLUS expression
    (33) expression -> . BIT_NEG expression
    (34) expression -> . NOT expression
    (35) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression QUESTION_MARK expression COLON expression
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable STMT_END
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier DOUBLE_PLUS
    (65) expression -> . identifier DOUBLE_MINUS
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (77) expression -> . identifier LPAREN arguments RPAREN
    (6) identifier -> . IDENTIFIER
    (8) primitive -> . NUM_INT
    (9) primitive -> . NUM_FLOAT
    (10) primitive -> . STRING
    (11) primitive -> . boolean
    (23) boolean -> . expression EQ expression
    (24) boolean -> . expression NEQ expression
    (25) boolean -> . expression GT expression
    (26) boolean -> . expression GTE expression
    (27) boolean -> . expression LT expression
    (28) boolean -> . expression LTE expression
    (29) boolean -> . expression AND expression
    (30) boolean -> . expression OR expression
    (36) boolean -> . TRUE
    (37) boolean -> . FALSE

    MINUS           shift and go to state 16
    PLUS            shift and go to state 15
    BIT_NEG         shift and go to state 17
    NOT             shift and go to state 18
    LPAREN          shift and go to state 12
    LSQBRACK        shift and go to state 7
    STRING          shift and go to state 20
    IDENTIFIER      shift and go to state 14
    NUM_INT         shift and go to state 22
    NUM_FLOAT       shift and go to state 23
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26

    expression                     shift and go to state 111
    identifier                     shift and go to state 64
    primitive                      shift and go to state 19
    boolean                        shift and go to state 24

state 61

    (7) statement -> EXIT STMT_END .

    EXIT            reduce using rule 7 (statement -> EXIT STMT_END .)
    PRINT           reduce using rule 7 (statement -> EXIT STMT_END .)
    FOR             reduce using rule 7 (statement -> EXIT STMT_END .)
    WHILE           reduce using rule 7 (statement -> EXIT STMT_END .)
    FUNCTION        reduce using rule 7 (statement -> EXIT STMT_END .)
    RETURN          reduce using rule 7 (statement -> EXIT STMT_END .)
    IDENTIFIER      reduce using rule 7 (statement -> EXIT STMT_END .)
    MINUS           reduce using rule 7 (statement -> EXIT STMT_END .)
    PLUS            reduce using rule 7 (statement -> EXIT STMT_END .)
    BIT_NEG         reduce using rule 7 (statement -> EXIT STMT_END .)
    NOT             reduce using rule 7 (statement -> EXIT STMT_END .)
    LPAREN          reduce using rule 7 (statement -> EXIT STMT_END .)
    LSQBRACK        reduce using rule 7 (statement -> EXIT STMT_END .)
    STRING          reduce using rule 7 (statement -> EXIT STMT_END .)
    IF              reduce using rule 7 (statement -> EXIT STMT_END .)
    NUM_INT         reduce using rule 7 (statement -> EXIT STMT_END .)
    NUM_FLOAT       reduce using rule 7 (statement -> EXIT STMT_END .)
    TRUE            reduce using rule 7 (statement -> EXIT STMT_END .)
    FALSE           reduce using rule 7 (statement -> EXIT STMT_END .)
    $end            reduce using rule 7 (statement -> EXIT STMT_END .)
    RBRACK          reduce using rule 7 (statement -> EXIT STMT_END .)


state 62

    (44) expression -> LSQBRACK arguments . RSQBRACK
    (40) arguments -> arguments . COMMA expression

    RSQBRACK        shift and go to state 112
    COMMA           shift and go to state 113


state 63

    (41) arguments -> expression .
    (12) expression -> expression . PLUS expression
    (13) expression -> expression . MINUS expression
    (14) expression -> expression . MUL expression
    (15) expression -> expression . DIV expression
    (16) expression -> expression . EXP expression
    (17) expression -> expression . MOD expression
    (18) expression -> expression . BIT_AND expression
    (19) expression -> expression . BIT_OR expression
    (20) expression -> expression . BIT_XOR expression
    (21) expression -> expression . LSHIFT expression
    (22) expression -> expression . RSHIFT expression
    (43) expression -> expression . QUESTION_MARK expression COLON expression
    (55) expression -> expression . IN expression
    (56) expression -> expression . NOT IN expression
    (23) boolean -> expression . EQ expression
    (24) boolean -> expression . NEQ expression
    (25) boolean -> expression . GT expression
    (26) boolean -> expression . GTE expression
    (27) boolean -> expression . LT expression
    (28) boolean -> expression . LTE expression
    (29) boolean -> expression . AND expression
    (30) boolean -> expression . OR expression

    RSQBRACK        reduce using rule 41 (arguments -> expression .)
    COMMA           reduce using rule 41 (arguments -> expression .)
    STMT_END        reduce using rule 41 (arguments -> expression .)
    RPAREN          reduce using rule 41 (arguments -> expression .)
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    MUL             shift and go to state 41
    DIV             shift and go to state 42
    EXP             shift and go to state 43
    MOD             shift and go to state 44
    BIT_AND         shift and go to state 45
    BIT_OR          shift and go to state 46
    BIT_XOR         shift and go to state 47
    LSHIFT          shift and go to state 48
    RSHIFT          shift and go to state 49
    QUESTION_MARK   shift and go to state 50
    IN              shift and go to state 51
    NOT             shift and go to state 52
    EQ              shift and go to state 53
    NEQ             shift and go to state 54
    GT              shift and go to state 55
    GTE             shift and go to state 56
    LT              shift and go to state 57
    LTE             shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60


state 64

    (45) expression -> identifier . LSQBRACK expression RSQBRACK
    (46) expression -> identifier . LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> identifier . LSQBRACK COLON expression RSQBRACK
    (48) expression -> identifier . LSQBRACK expression COLON RSQBRACK
    (49) expression -> identifier . LSQBRACK COLON RSQBRACK
    (51) expression -> identifier . EQUALS assignable STMT_END
    (64) expression -> identifier . DOUBLE_PLUS
    (65) expression -> identifier . DOUBLE_MINUS
    (68) expression -> identifier .
    (77) expression -> identifier . LPAREN arguments RPAREN

  ! shift/reduce conflict for LSQBRACK resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    LSQBRACK        shift and go to state 114
    EQUALS          shift and go to state 29
    DOUBLE_PLUS     shift and go to state 37
    DOUBLE_MINUS    shift and go to state 38
    PLUS            reduce using rule 68 (expression -> identifier .)
    MINUS           reduce using rule 68 (expression -> identifier .)
    MUL             reduce using rule 68 (expression -> identifier .)
    DIV             reduce using rule 68 (expression -> identifier .)
    EXP             reduce using rule 68 (expression -> identifier .)
    MOD             reduce using rule 68 (expression -> identifier .)
    BIT_AND         reduce using rule 68 (expression -> identifier .)
    BIT_OR          reduce using rule 68 (expression -> identifier .)
    BIT_XOR         reduce using rule 68 (expression -> identifier .)
    LSHIFT          reduce using rule 68 (expression -> identifier .)
    RSHIFT          reduce using rule 68 (expression -> identifier .)
    QUESTION_MARK   reduce using rule 68 (expression -> identifier .)
    IN              reduce using rule 68 (expression -> identifier .)
    NOT             reduce using rule 68 (expression -> identifier .)
    EQ              reduce using rule 68 (expression -> identifier .)
    NEQ             reduce using rule 68 (expression -> identifier .)
    GT              reduce using rule 68 (expression -> identifier .)
    GTE             reduce using rule 68 (expression -> identifier .)
    LT              reduce using rule 68 (expression -> identifier .)
    LTE             reduce using rule 68 (expression -> identifier .)
    AND             reduce using rule 68 (expression -> identifier .)
    OR              reduce using rule 68 (expression -> identifier .)
    RSQBRACK        reduce using rule 68 (expression -> identifier .)
    COMMA           reduce using rule 68 (expression -> identifier .)
    STMT_END        reduce using rule 68 (expression -> identifier .)
    LBRACK          reduce using rule 68 (expression -> identifier .)
    RPAREN          reduce using rule 68 (expression -> identifier .)
    EXIT            reduce using rule 68 (expression -> identifier .)
    PRINT           reduce using rule 68 (expression -> identifier .)
    FOR             reduce using rule 68 (expression -> identifier .)
    WHILE           reduce using rule 68 (expression -> identifier .)
    FUNCTION        reduce using rule 68 (expression -> identifier .)
    RETURN          reduce using rule 68 (expression -> identifier .)
    IDENTIFIER      reduce using rule 68 (expression -> identifier .)
    BIT_NEG         reduce using rule 68 (expression -> identifier .)
    STRING          reduce using rule 68 (expression -> identifier .)
    IF              reduce using rule 68 (expression -> identifier .)
    NUM_INT         reduce using rule 68 (expression -> identifier .)
    NUM_FLOAT       reduce using rule 68 (expression -> identifier .)
    TRUE            reduce using rule 68 (expression -> identifier .)
    FALSE           reduce using rule 68 (expression -> identifier .)
    $end            reduce using rule 68 (expression -> identifier .)
    COLON           reduce using rule 68 (expression -> identifier .)
    RBRACK          reduce using rule 68 (expression -> identifier .)
    ARROW_LTR       reduce using rule 68 (expression -> identifier .)
    ARROW_RTL       reduce using rule 68 (expression -> identifier .)
    LPAREN          shift and go to state 115

  ! LPAREN          [ reduce using rule 68 (expression -> identifier .) ]
  ! LSQBRACK        [ reduce using rule 68 (expression -> identifier .) ]


state 65

    (57) statement -> PRINT arguments . STMT_END
    (40) arguments -> arguments . COMMA expression

    STMT_END        shift and go to state 116
    COMMA           shift and go to state 113


state 66

    (69) statement -> FOR identifier . IN expression ARROW_LTR expression LBRACK statement_list RBRACK
    (70) statement -> FOR identifier . IN expression ARROW_RTL expression LBRACK statement_list RBRACK
    (71) statement -> FOR identifier . IN expression LBRACK statement_list RBRACK

    IN              shift and go to state 117


state 67

    (73) statement -> FOR LBRACK . statement_list RBRACK
    (1) statement_list -> . statement
    (2) statement_list -> . statement_list statement
    (3) statement -> . identifier
    (4) statement -> . expression
    (5) statement -> . if_statement
    (7) statement -> . EXIT STMT_END
    (50) statement -> . identifier LSQBRACK expression RSQBRACK EQUALS expression STMT_END
    (57) statement -> . PRINT arguments STMT_END
    (58) statement -> . identifier PLUS_EQ expression STMT_END
    (59) statement -> . identifier MINUS_EQ expression STMT_END
    (60) statement -> . identifier MUL_EQ expression STMT_END
    (61) statement -> . identifier DIV_EQ expression STMT_END
    (62) statement -> . identifier EXP_EQ expression STMT_END
    (63) statement -> . identifier MOD_EQ expression STMT_END
    (69) statement -> . FOR identifier IN expression ARROW_LTR expression LBRACK statement_list RBRACK
    (70) statement -> . FOR identifier IN expression ARROW_RTL expression LBRACK statement_list RBRACK
    (71) statement -> . FOR identifier IN expression LBRACK statement_list RBRACK
    (72) statement -> . WHILE expression LBRACK statement_list RBRACK
    (73) statement -> . FOR LBRACK statement_list RBRACK
    (74) statement -> . FUNCTION identifier LPAREN arguments RPAREN LBRACK statement_list RBRACK
    (75) statement -> . FUNCTION identifier LBRACK statement_list RBRACK
    (76) statement -> . RETURN expression STMT_END
    (78) statement -> . identifier LPAREN arguments RPAREN STMT_END
    (6) identifier -> . IDENTIFIER
    (12) expression -> . expression PLUS expression
    (13) expression -> . expression MINUS expression
    (14) expression -> . expression MUL expression
    (15) expression -> . expression DIV expression
    (16) expression -> . expression EXP expression
    (17) expression -> . expression MOD expression
    (18) expression -> . expression BIT_AND expression
    (19) expression -> . expression BIT_OR expression
    (20) expression -> . expression BIT_XOR expression
    (21) expression -> . expression LSHIFT expression
    (22) expression -> . expression RSHIFT expression
    (31) expression -> . MINUS expression
    (32) expression -> . PLUS expression
    (33) expression -> . BIT_NEG expression
    (34) expression -> . NOT expression
    (35) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression QUESTION_MARK expression COLON expression
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable STMT_END
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier DOUBLE_PLUS
    (65) expression -> . identifier DOUBLE_MINUS
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (77) expression -> . identifier LPAREN arguments RPAREN
    (52) if_statement -> . IF expression LBRACK statement_list RBRACK
    (53) if_statement -> . IF expression LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK
    (54) if_statement -> . IF expression LBRACK statement_list RBRACK ELSE if_statement
    (8) primitive -> . NUM_INT
    (9) primitive -> . NUM_FLOAT
    (10) primitive -> . STRING
    (11) primitive -> . boolean
    (23) boolean -> . expression EQ expression
    (24) boolean -> . expression NEQ expression
    (25) boolean -> . expression GT expression
    (26) boolean -> . expression GTE expression
    (27) boolean -> . expression LT expression
    (28) boolean -> . expression LTE expression
    (29) boolean -> . expression AND expression
    (30) boolean -> . expression OR expression
    (36) boolean -> . TRUE
    (37) boolean -> . FALSE

    EXIT            shift and go to state 6
    PRINT           shift and go to state 8
    FOR             shift and go to state 9
    WHILE           shift and go to state 10
    FUNCTION        shift and go to state 11
    RETURN          shift and go to state 13
    IDENTIFIER      shift and go to state 14
    MINUS           shift and go to state 16
    PLUS            shift and go to state 15
    BIT_NEG         shift and go to state 17
    NOT             shift and go to state 18
    LPAREN          shift and go to state 12
    LSQBRACK        shift and go to state 7
    STRING          shift and go to state 20
    IF              shift and go to state 21
    NUM_INT         shift and go to state 22
    NUM_FLOAT       shift and go to state 23
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26

    statement_list                 shift and go to state 118
    statement                      shift and go to state 2
    identifier                     shift and go to state 3
    expression                     shift and go to state 4
    if_statement                   shift and go to state 5
    primitive                      shift and go to state 19
    boolean                        shift and go to state 24

state 68

    (72) statement -> WHILE expression . LBRACK statement_list RBRACK
    (12) expression -> expression . PLUS expression
    (13) expression -> expression . MINUS expression
    (14) expression -> expression . MUL expression
    (15) expression -> expression . DIV expression
    (16) expression -> expression . EXP expression
    (17) expression -> expression . MOD expression
    (18) expression -> expression . BIT_AND expression
    (19) expression -> expression . BIT_OR expression
    (20) expression -> expression . BIT_XOR expression
    (21) expression -> expression . LSHIFT expression
    (22) expression -> expression . RSHIFT expression
    (43) expression -> expression . QUESTION_MARK expression COLON expression
    (55) expression -> expression . IN expression
    (56) expression -> expression . NOT IN expression
    (23) boolean -> expression . EQ expression
    (24) boolean -> expression . NEQ expression
    (25) boolean -> expression . GT expression
    (26) boolean -> expression . GTE expression
    (27) boolean -> expression . LT expression
    (28) boolean -> expression . LTE expression
    (29) boolean -> expression . AND expression
    (30) boolean -> expression . OR expression

    LBRACK          shift and go to state 119
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    MUL             shift and go to state 41
    DIV             shift and go to state 42
    EXP             shift and go to state 43
    MOD             shift and go to state 44
    BIT_AND         shift and go to state 45
    BIT_OR          shift and go to state 46
    BIT_XOR         shift and go to state 47
    LSHIFT          shift and go to state 48
    RSHIFT          shift and go to state 49
    QUESTION_MARK   shift and go to state 50
    IN              shift and go to state 51
    NOT             shift and go to state 52
    EQ              shift and go to state 53
    NEQ             shift and go to state 54
    GT              shift and go to state 55
    GTE             shift and go to state 56
    LT              shift and go to state 57
    LTE             shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60


state 69

    (74) statement -> FUNCTION identifier . LPAREN arguments RPAREN LBRACK statement_list RBRACK
    (75) statement -> FUNCTION identifier . LBRACK statement_list RBRACK

    LPAREN          shift and go to state 120
    LBRACK          shift and go to state 121


state 70

    (35) expression -> LPAREN expression . RPAREN
    (12) expression -> expression . PLUS expression
    (13) expression -> expression . MINUS expression
    (14) expression -> expression . MUL expression
    (15) expression -> expression . DIV expression
    (16) expression -> expression . EXP expression
    (17) expression -> expression . MOD expression
    (18) expression -> expression . BIT_AND expression
    (19) expression -> expression . BIT_OR expression
    (20) expression -> expression . BIT_XOR expression
    (21) expression -> expression . LSHIFT expression
    (22) expression -> expression . RSHIFT expression
    (43) expression -> expression . QUESTION_MARK expression COLON expression
    (55) expression -> expression . IN expression
    (56) expression -> expression . NOT IN expression
    (23) boolean -> expression . EQ expression
    (24) boolean -> expression . NEQ expression
    (25) boolean -> expression . GT expression
    (26) boolean -> expression . GTE expression
    (27) boolean -> expression . LT expression
    (28) boolean -> expression . LTE expression
    (29) boolean -> expression . AND expression
    (30) boolean -> expression . OR expression

    RPAREN          shift and go to state 122
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    MUL             shift and go to state 41
    DIV             shift and go to state 42
    EXP             shift and go to state 43
    MOD             shift and go to state 44
    BIT_AND         shift and go to state 45
    BIT_OR          shift and go to state 46
    BIT_XOR         shift and go to state 47
    LSHIFT          shift and go to state 48
    RSHIFT          shift and go to state 49
    QUESTION_MARK   shift and go to state 50
    IN              shift and go to state 51
    NOT             shift and go to state 52
    EQ              shift and go to state 53
    NEQ             shift and go to state 54
    GT              shift and go to state 55
    GTE             shift and go to state 56
    LT              shift and go to state 57
    LTE             shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60


state 71

    (76) statement -> RETURN expression . STMT_END
    (12) expression -> expression . PLUS expression
    (13) expression -> expression . MINUS expression
    (14) expression -> expression . MUL expression
    (15) expression -> expression . DIV expression
    (16) expression -> expression . EXP expression
    (17) expression -> expression . MOD expression
    (18) expression -> expression . BIT_AND expression
    (19) expression -> expression . BIT_OR expression
    (20) expression -> expression . BIT_XOR expression
    (21) expression -> expression . LSHIFT expression
    (22) expression -> expression . RSHIFT expression
    (43) expression -> expression . QUESTION_MARK expression COLON expression
    (55) expression -> expression . IN expression
    (56) expression -> expression . NOT IN expression
    (23) boolean -> expression . EQ expression
    (24) boolean -> expression . NEQ expression
    (25) boolean -> expression . GT expression
    (26) boolean -> expression . GTE expression
    (27) boolean -> expression . LT expression
    (28) boolean -> expression . LTE expression
    (29) boolean -> expression . AND expression
    (30) boolean -> expression . OR expression

    STMT_END        shift and go to state 123
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    MUL             shift and go to state 41
    DIV             shift and go to state 42
    EXP             shift and go to state 43
    MOD             shift and go to state 44
    BIT_AND         shift and go to state 45
    BIT_OR          shift and go to state 46
    BIT_XOR         shift and go to state 47
    LSHIFT          shift and go to state 48
    RSHIFT          shift and go to state 49
    QUESTION_MARK   shift and go to state 50
    IN              shift and go to state 51
    NOT             shift and go to state 52
    EQ              shift and go to state 53
    NEQ             shift and go to state 54
    GT              shift and go to state 55
    GTE             shift and go to state 56
    LT              shift and go to state 57
    LTE             shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60


state 72

    (32) expression -> PLUS expression .
    (12) expression -> expression . PLUS expression
    (13) expression -> expression . MINUS expression
    (14) expression -> expression . MUL expression
    (15) expression -> expression . DIV expression
    (16) expression -> expression . EXP expression
    (17) expression -> expression . MOD expression
    (18) expression -> expression . BIT_AND expression
    (19) expression -> expression . BIT_OR expression
    (20) expression -> expression . BIT_XOR expression
    (21) expression -> expression . LSHIFT expression
    (22) expression -> expression . RSHIFT expression
    (43) expression -> expression . QUESTION_MARK expression COLON expression
    (55) expression -> expression . IN expression
    (56) expression -> expression . NOT IN expression
    (23) boolean -> expression . EQ expression
    (24) boolean -> expression . NEQ expression
    (25) boolean -> expression . GT expression
    (26) boolean -> expression . GTE expression
    (27) boolean -> expression . LT expression
    (28) boolean -> expression . LTE expression
    (29) boolean -> expression . AND expression
    (30) boolean -> expression . OR expression

    PLUS            reduce using rule 32 (expression -> PLUS expression .)
    MINUS           reduce using rule 32 (expression -> PLUS expression .)
    MUL             reduce using rule 32 (expression -> PLUS expression .)
    DIV             reduce using rule 32 (expression -> PLUS expression .)
    EXP             reduce using rule 32 (expression -> PLUS expression .)
    MOD             reduce using rule 32 (expression -> PLUS expression .)
    BIT_AND         reduce using rule 32 (expression -> PLUS expression .)
    BIT_OR          reduce using rule 32 (expression -> PLUS expression .)
    BIT_XOR         reduce using rule 32 (expression -> PLUS expression .)
    LSHIFT          reduce using rule 32 (expression -> PLUS expression .)
    RSHIFT          reduce using rule 32 (expression -> PLUS expression .)
    QUESTION_MARK   reduce using rule 32 (expression -> PLUS expression .)
    IN              reduce using rule 32 (expression -> PLUS expression .)
    NOT             reduce using rule 32 (expression -> PLUS expression .)
    EQ              reduce using rule 32 (expression -> PLUS expression .)
    NEQ             reduce using rule 32 (expression -> PLUS expression .)
    GT              reduce using rule 32 (expression -> PLUS expression .)
    GTE             reduce using rule 32 (expression -> PLUS expression .)
    LT              reduce using rule 32 (expression -> PLUS expression .)
    LTE             reduce using rule 32 (expression -> PLUS expression .)
    AND             reduce using rule 32 (expression -> PLUS expression .)
    OR              reduce using rule 32 (expression -> PLUS expression .)
    EXIT            reduce using rule 32 (expression -> PLUS expression .)
    PRINT           reduce using rule 32 (expression -> PLUS expression .)
    FOR             reduce using rule 32 (expression -> PLUS expression .)
    WHILE           reduce using rule 32 (expression -> PLUS expression .)
    FUNCTION        reduce using rule 32 (expression -> PLUS expression .)
    RETURN          reduce using rule 32 (expression -> PLUS expression .)
    IDENTIFIER      reduce using rule 32 (expression -> PLUS expression .)
    BIT_NEG         reduce using rule 32 (expression -> PLUS expression .)
    LPAREN          reduce using rule 32 (expression -> PLUS expression .)
    LSQBRACK        reduce using rule 32 (expression -> PLUS expression .)
    STRING          reduce using rule 32 (expression -> PLUS expression .)
    IF              reduce using rule 32 (expression -> PLUS expression .)
    NUM_INT         reduce using rule 32 (expression -> PLUS expression .)
    NUM_FLOAT       reduce using rule 32 (expression -> PLUS expression .)
    TRUE            reduce using rule 32 (expression -> PLUS expression .)
    FALSE           reduce using rule 32 (expression -> PLUS expression .)
    $end            reduce using rule 32 (expression -> PLUS expression .)
    RSQBRACK        reduce using rule 32 (expression -> PLUS expression .)
    COMMA           reduce using rule 32 (expression -> PLUS expression .)
    STMT_END        reduce using rule 32 (expression -> PLUS expression .)
    LBRACK          reduce using rule 32 (expression -> PLUS expression .)
    RPAREN          reduce using rule 32 (expression -> PLUS expression .)
    COLON           reduce using rule 32 (expression -> PLUS expression .)
    RBRACK          reduce using rule 32 (expression -> PLUS expression .)
    ARROW_LTR       reduce using rule 32 (expression -> PLUS expression .)
    ARROW_RTL       reduce using rule 32 (expression -> PLUS expression .)

  ! PLUS            [ shift and go to state 39 ]
  ! MINUS           [ shift and go to state 40 ]
  ! MUL             [ shift and go to state 41 ]
  ! DIV             [ shift and go to state 42 ]
  ! EXP             [ shift and go to state 43 ]
  ! MOD             [ shift and go to state 44 ]
  ! BIT_AND         [ shift and go to state 45 ]
  ! BIT_OR          [ shift and go to state 46 ]
  ! BIT_XOR         [ shift and go to state 47 ]
  ! LSHIFT          [ shift and go to state 48 ]
  ! RSHIFT          [ shift and go to state 49 ]
  ! QUESTION_MARK   [ shift and go to state 50 ]
  ! IN              [ shift and go to state 51 ]
  ! NOT             [ shift and go to state 52 ]
  ! EQ              [ shift and go to state 53 ]
  ! NEQ             [ shift and go to state 54 ]
  ! GT              [ shift and go to state 55 ]
  ! GTE             [ shift and go to state 56 ]
  ! LT              [ shift and go to state 57 ]
  ! LTE             [ shift and go to state 58 ]
  ! AND             [ shift and go to state 59 ]
  ! OR              [ shift and go to state 60 ]


state 73

    (31) expression -> MINUS expression .
    (12) expression -> expression . PLUS expression
    (13) expression -> expression . MINUS expression
    (14) expression -> expression . MUL expression
    (15) expression -> expression . DIV expression
    (16) expression -> expression . EXP expression
    (17) expression -> expression . MOD expression
    (18) expression -> expression . BIT_AND expression
    (19) expression -> expression . BIT_OR expression
    (20) expression -> expression . BIT_XOR expression
    (21) expression -> expression . LSHIFT expression
    (22) expression -> expression . RSHIFT expression
    (43) expression -> expression . QUESTION_MARK expression COLON expression
    (55) expression -> expression . IN expression
    (56) expression -> expression . NOT IN expression
    (23) boolean -> expression . EQ expression
    (24) boolean -> expression . NEQ expression
    (25) boolean -> expression . GT expression
    (26) boolean -> expression . GTE expression
    (27) boolean -> expression . LT expression
    (28) boolean -> expression . LTE expression
    (29) boolean -> expression . AND expression
    (30) boolean -> expression . OR expression

    PLUS            reduce using rule 31 (expression -> MINUS expression .)
    MINUS           reduce using rule 31 (expression -> MINUS expression .)
    MUL             reduce using rule 31 (expression -> MINUS expression .)
    DIV             reduce using rule 31 (expression -> MINUS expression .)
    EXP             reduce using rule 31 (expression -> MINUS expression .)
    MOD             reduce using rule 31 (expression -> MINUS expression .)
    BIT_AND         reduce using rule 31 (expression -> MINUS expression .)
    BIT_OR          reduce using rule 31 (expression -> MINUS expression .)
    BIT_XOR         reduce using rule 31 (expression -> MINUS expression .)
    LSHIFT          reduce using rule 31 (expression -> MINUS expression .)
    RSHIFT          reduce using rule 31 (expression -> MINUS expression .)
    QUESTION_MARK   reduce using rule 31 (expression -> MINUS expression .)
    IN              reduce using rule 31 (expression -> MINUS expression .)
    NOT             reduce using rule 31 (expression -> MINUS expression .)
    EQ              reduce using rule 31 (expression -> MINUS expression .)
    NEQ             reduce using rule 31 (expression -> MINUS expression .)
    GT              reduce using rule 31 (expression -> MINUS expression .)
    GTE             reduce using rule 31 (expression -> MINUS expression .)
    LT              reduce using rule 31 (expression -> MINUS expression .)
    LTE             reduce using rule 31 (expression -> MINUS expression .)
    AND             reduce using rule 31 (expression -> MINUS expression .)
    OR              reduce using rule 31 (expression -> MINUS expression .)
    EXIT            reduce using rule 31 (expression -> MINUS expression .)
    PRINT           reduce using rule 31 (expression -> MINUS expression .)
    FOR             reduce using rule 31 (expression -> MINUS expression .)
    WHILE           reduce using rule 31 (expression -> MINUS expression .)
    FUNCTION        reduce using rule 31 (expression -> MINUS expression .)
    RETURN          reduce using rule 31 (expression -> MINUS expression .)
    IDENTIFIER      reduce using rule 31 (expression -> MINUS expression .)
    BIT_NEG         reduce using rule 31 (expression -> MINUS expression .)
    LPAREN          reduce using rule 31 (expression -> MINUS expression .)
    LSQBRACK        reduce using rule 31 (expression -> MINUS expression .)
    STRING          reduce using rule 31 (expression -> MINUS expression .)
    IF              reduce using rule 31 (expression -> MINUS expression .)
    NUM_INT         reduce using rule 31 (expression -> MINUS expression .)
    NUM_FLOAT       reduce using rule 31 (expression -> MINUS expression .)
    TRUE            reduce using rule 31 (expression -> MINUS expression .)
    FALSE           reduce using rule 31 (expression -> MINUS expression .)
    $end            reduce using rule 31 (expression -> MINUS expression .)
    RSQBRACK        reduce using rule 31 (expression -> MINUS expression .)
    COMMA           reduce using rule 31 (expression -> MINUS expression .)
    STMT_END        reduce using rule 31 (expression -> MINUS expression .)
    LBRACK          reduce using rule 31 (expression -> MINUS expression .)
    RPAREN          reduce using rule 31 (expression -> MINUS expression .)
    COLON           reduce using rule 31 (expression -> MINUS expression .)
    RBRACK          reduce using rule 31 (expression -> MINUS expression .)
    ARROW_LTR       reduce using rule 31 (expression -> MINUS expression .)
    ARROW_RTL       reduce using rule 31 (expression -> MINUS expression .)

  ! PLUS            [ shift and go to state 39 ]
  ! MINUS           [ shift and go to state 40 ]
  ! MUL             [ shift and go to state 41 ]
  ! DIV             [ shift and go to state 42 ]
  ! EXP             [ shift and go to state 43 ]
  ! MOD             [ shift and go to state 44 ]
  ! BIT_AND         [ shift and go to state 45 ]
  ! BIT_OR          [ shift and go to state 46 ]
  ! BIT_XOR         [ shift and go to state 47 ]
  ! LSHIFT          [ shift and go to state 48 ]
  ! RSHIFT          [ shift and go to state 49 ]
  ! QUESTION_MARK   [ shift and go to state 50 ]
  ! IN              [ shift and go to state 51 ]
  ! NOT             [ shift and go to state 52 ]
  ! EQ              [ shift and go to state 53 ]
  ! NEQ             [ shift and go to state 54 ]
  ! GT              [ shift and go to state 55 ]
  ! GTE             [ shift and go to state 56 ]
  ! LT              [ shift and go to state 57 ]
  ! LTE             [ shift and go to state 58 ]
  ! AND             [ shift and go to state 59 ]
  ! OR              [ shift and go to state 60 ]


state 74

    (33) expression -> BIT_NEG expression .
    (12) expression -> expression . PLUS expression
    (13) expression -> expression . MINUS expression
    (14) expression -> expression . MUL expression
    (15) expression -> expression . DIV expression
    (16) expression -> expression . EXP expression
    (17) expression -> expression . MOD expression
    (18) expression -> expression . BIT_AND expression
    (19) expression -> expression . BIT_OR expression
    (20) expression -> expression . BIT_XOR expression
    (21) expression -> expression . LSHIFT expression
    (22) expression -> expression . RSHIFT expression
    (43) expression -> expression . QUESTION_MARK expression COLON expression
    (55) expression -> expression . IN expression
    (56) expression -> expression . NOT IN expression
    (23) boolean -> expression . EQ expression
    (24) boolean -> expression . NEQ expression
    (25) boolean -> expression . GT expression
    (26) boolean -> expression . GTE expression
    (27) boolean -> expression . LT expression
    (28) boolean -> expression . LTE expression
    (29) boolean -> expression . AND expression
    (30) boolean -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for BIT_AND resolved as shift
  ! shift/reduce conflict for BIT_OR resolved as shift
  ! shift/reduce conflict for BIT_XOR resolved as shift
  ! shift/reduce conflict for LSHIFT resolved as shift
  ! shift/reduce conflict for RSHIFT resolved as shift
  ! shift/reduce conflict for QUESTION_MARK resolved as shift
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    EXIT            reduce using rule 33 (expression -> BIT_NEG expression .)
    PRINT           reduce using rule 33 (expression -> BIT_NEG expression .)
    FOR             reduce using rule 33 (expression -> BIT_NEG expression .)
    WHILE           reduce using rule 33 (expression -> BIT_NEG expression .)
    FUNCTION        reduce using rule 33 (expression -> BIT_NEG expression .)
    RETURN          reduce using rule 33 (expression -> BIT_NEG expression .)
    IDENTIFIER      reduce using rule 33 (expression -> BIT_NEG expression .)
    BIT_NEG         reduce using rule 33 (expression -> BIT_NEG expression .)
    LPAREN          reduce using rule 33 (expression -> BIT_NEG expression .)
    LSQBRACK        reduce using rule 33 (expression -> BIT_NEG expression .)
    STRING          reduce using rule 33 (expression -> BIT_NEG expression .)
    IF              reduce using rule 33 (expression -> BIT_NEG expression .)
    NUM_INT         reduce using rule 33 (expression -> BIT_NEG expression .)
    NUM_FLOAT       reduce using rule 33 (expression -> BIT_NEG expression .)
    TRUE            reduce using rule 33 (expression -> BIT_NEG expression .)
    FALSE           reduce using rule 33 (expression -> BIT_NEG expression .)
    $end            reduce using rule 33 (expression -> BIT_NEG expression .)
    RSQBRACK        reduce using rule 33 (expression -> BIT_NEG expression .)
    COMMA           reduce using rule 33 (expression -> BIT_NEG expression .)
    STMT_END        reduce using rule 33 (expression -> BIT_NEG expression .)
    LBRACK          reduce using rule 33 (expression -> BIT_NEG expression .)
    RPAREN          reduce using rule 33 (expression -> BIT_NEG expression .)
    COLON           reduce using rule 33 (expression -> BIT_NEG expression .)
    RBRACK          reduce using rule 33 (expression -> BIT_NEG expression .)
    ARROW_LTR       reduce using rule 33 (expression -> BIT_NEG expression .)
    ARROW_RTL       reduce using rule 33 (expression -> BIT_NEG expression .)
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    MUL             shift and go to state 41
    DIV             shift and go to state 42
    EXP             shift and go to state 43
    MOD             shift and go to state 44
    BIT_AND         shift and go to state 45
    BIT_OR          shift and go to state 46
    BIT_XOR         shift and go to state 47
    LSHIFT          shift and go to state 48
    RSHIFT          shift and go to state 49
    QUESTION_MARK   shift and go to state 50
    IN              shift and go to state 51
    NOT             shift and go to state 52
    EQ              shift and go to state 53
    NEQ             shift and go to state 54
    GT              shift and go to state 55
    GTE             shift and go to state 56
    LT              shift and go to state 57
    LTE             shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60

  ! PLUS            [ reduce using rule 33 (expression -> BIT_NEG expression .) ]
  ! MINUS           [ reduce using rule 33 (expression -> BIT_NEG expression .) ]
  ! MUL             [ reduce using rule 33 (expression -> BIT_NEG expression .) ]
  ! DIV             [ reduce using rule 33 (expression -> BIT_NEG expression .) ]
  ! EXP             [ reduce using rule 33 (expression -> BIT_NEG expression .) ]
  ! MOD             [ reduce using rule 33 (expression -> BIT_NEG expression .) ]
  ! BIT_AND         [ reduce using rule 33 (expression -> BIT_NEG expression .) ]
  ! BIT_OR          [ reduce using rule 33 (expression -> BIT_NEG expression .) ]
  ! BIT_XOR         [ reduce using rule 33 (expression -> BIT_NEG expression .) ]
  ! LSHIFT          [ reduce using rule 33 (expression -> BIT_NEG expression .) ]
  ! RSHIFT          [ reduce using rule 33 (expression -> BIT_NEG expression .) ]
  ! QUESTION_MARK   [ reduce using rule 33 (expression -> BIT_NEG expression .) ]
  ! IN              [ reduce using rule 33 (expression -> BIT_NEG expression .) ]
  ! NOT             [ reduce using rule 33 (expression -> BIT_NEG expression .) ]
  ! EQ              [ reduce using rule 33 (expression -> BIT_NEG expression .) ]
  ! NEQ             [ reduce using rule 33 (expression -> BIT_NEG expression .) ]
  ! GT              [ reduce using rule 33 (expression -> BIT_NEG expression .) ]
  ! GTE             [ reduce using rule 33 (expression -> BIT_NEG expression .) ]
  ! LT              [ reduce using rule 33 (expression -> BIT_NEG expression .) ]
  ! LTE             [ reduce using rule 33 (expression -> BIT_NEG expression .) ]
  ! AND             [ reduce using rule 33 (expression -> BIT_NEG expression .) ]
  ! OR              [ reduce using rule 33 (expression -> BIT_NEG expression .) ]


state 75

    (34) expression -> NOT expression .
    (12) expression -> expression . PLUS expression
    (13) expression -> expression . MINUS expression
    (14) expression -> expression . MUL expression
    (15) expression -> expression . DIV expression
    (16) expression -> expression . EXP expression
    (17) expression -> expression . MOD expression
    (18) expression -> expression . BIT_AND expression
    (19) expression -> expression . BIT_OR expression
    (20) expression -> expression . BIT_XOR expression
    (21) expression -> expression . LSHIFT expression
    (22) expression -> expression . RSHIFT expression
    (43) expression -> expression . QUESTION_MARK expression COLON expression
    (55) expression -> expression . IN expression
    (56) expression -> expression . NOT IN expression
    (23) boolean -> expression . EQ expression
    (24) boolean -> expression . NEQ expression
    (25) boolean -> expression . GT expression
    (26) boolean -> expression . GTE expression
    (27) boolean -> expression . LT expression
    (28) boolean -> expression . LTE expression
    (29) boolean -> expression . AND expression
    (30) boolean -> expression . OR expression

    BIT_AND         reduce using rule 34 (expression -> NOT expression .)
    BIT_OR          reduce using rule 34 (expression -> NOT expression .)
    BIT_XOR         reduce using rule 34 (expression -> NOT expression .)
    LSHIFT          reduce using rule 34 (expression -> NOT expression .)
    RSHIFT          reduce using rule 34 (expression -> NOT expression .)
    QUESTION_MARK   reduce using rule 34 (expression -> NOT expression .)
    IN              reduce using rule 34 (expression -> NOT expression .)
    NOT             reduce using rule 34 (expression -> NOT expression .)
    EQ              reduce using rule 34 (expression -> NOT expression .)
    NEQ             reduce using rule 34 (expression -> NOT expression .)
    GT              reduce using rule 34 (expression -> NOT expression .)
    GTE             reduce using rule 34 (expression -> NOT expression .)
    LT              reduce using rule 34 (expression -> NOT expression .)
    LTE             reduce using rule 34 (expression -> NOT expression .)
    AND             reduce using rule 34 (expression -> NOT expression .)
    OR              reduce using rule 34 (expression -> NOT expression .)
    EXIT            reduce using rule 34 (expression -> NOT expression .)
    PRINT           reduce using rule 34 (expression -> NOT expression .)
    FOR             reduce using rule 34 (expression -> NOT expression .)
    WHILE           reduce using rule 34 (expression -> NOT expression .)
    FUNCTION        reduce using rule 34 (expression -> NOT expression .)
    RETURN          reduce using rule 34 (expression -> NOT expression .)
    IDENTIFIER      reduce using rule 34 (expression -> NOT expression .)
    BIT_NEG         reduce using rule 34 (expression -> NOT expression .)
    LPAREN          reduce using rule 34 (expression -> NOT expression .)
    LSQBRACK        reduce using rule 34 (expression -> NOT expression .)
    STRING          reduce using rule 34 (expression -> NOT expression .)
    IF              reduce using rule 34 (expression -> NOT expression .)
    NUM_INT         reduce using rule 34 (expression -> NOT expression .)
    NUM_FLOAT       reduce using rule 34 (expression -> NOT expression .)
    TRUE            reduce using rule 34 (expression -> NOT expression .)
    FALSE           reduce using rule 34 (expression -> NOT expression .)
    $end            reduce using rule 34 (expression -> NOT expression .)
    RSQBRACK        reduce using rule 34 (expression -> NOT expression .)
    COMMA           reduce using rule 34 (expression -> NOT expression .)
    STMT_END        reduce using rule 34 (expression -> NOT expression .)
    LBRACK          reduce using rule 34 (expression -> NOT expression .)
    RPAREN          reduce using rule 34 (expression -> NOT expression .)
    COLON           reduce using rule 34 (expression -> NOT expression .)
    RBRACK          reduce using rule 34 (expression -> NOT expression .)
    ARROW_LTR       reduce using rule 34 (expression -> NOT expression .)
    ARROW_RTL       reduce using rule 34 (expression -> NOT expression .)
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    MUL             shift and go to state 41
    DIV             shift and go to state 42
    EXP             shift and go to state 43
    MOD             shift and go to state 44

  ! PLUS            [ reduce using rule 34 (expression -> NOT expression .) ]
  ! MINUS           [ reduce using rule 34 (expression -> NOT expression .) ]
  ! MUL             [ reduce using rule 34 (expression -> NOT expression .) ]
  ! DIV             [ reduce using rule 34 (expression -> NOT expression .) ]
  ! EXP             [ reduce using rule 34 (expression -> NOT expression .) ]
  ! MOD             [ reduce using rule 34 (expression -> NOT expression .) ]
  ! BIT_AND         [ shift and go to state 45 ]
  ! BIT_OR          [ shift and go to state 46 ]
  ! BIT_XOR         [ shift and go to state 47 ]
  ! LSHIFT          [ shift and go to state 48 ]
  ! RSHIFT          [ shift and go to state 49 ]
  ! QUESTION_MARK   [ shift and go to state 50 ]
  ! IN              [ shift and go to state 51 ]
  ! NOT             [ shift and go to state 52 ]
  ! EQ              [ shift and go to state 53 ]
  ! NEQ             [ shift and go to state 54 ]
  ! GT              [ shift and go to state 55 ]
  ! GTE             [ shift and go to state 56 ]
  ! LT              [ shift and go to state 57 ]
  ! LTE             [ shift and go to state 58 ]
  ! AND             [ shift and go to state 59 ]
  ! OR              [ shift and go to state 60 ]


state 76

    (52) if_statement -> IF expression . LBRACK statement_list RBRACK
    (53) if_statement -> IF expression . LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK
    (54) if_statement -> IF expression . LBRACK statement_list RBRACK ELSE if_statement
    (12) expression -> expression . PLUS expression
    (13) expression -> expression . MINUS expression
    (14) expression -> expression . MUL expression
    (15) expression -> expression . DIV expression
    (16) expression -> expression . EXP expression
    (17) expression -> expression . MOD expression
    (18) expression -> expression . BIT_AND expression
    (19) expression -> expression . BIT_OR expression
    (20) expression -> expression . BIT_XOR expression
    (21) expression -> expression . LSHIFT expression
    (22) expression -> expression . RSHIFT expression
    (43) expression -> expression . QUESTION_MARK expression COLON expression
    (55) expression -> expression . IN expression
    (56) expression -> expression . NOT IN expression
    (23) boolean -> expression . EQ expression
    (24) boolean -> expression . NEQ expression
    (25) boolean -> expression . GT expression
    (26) boolean -> expression . GTE expression
    (27) boolean -> expression . LT expression
    (28) boolean -> expression . LTE expression
    (29) boolean -> expression . AND expression
    (30) boolean -> expression . OR expression

    LBRACK          shift and go to state 124
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    MUL             shift and go to state 41
    DIV             shift and go to state 42
    EXP             shift and go to state 43
    MOD             shift and go to state 44
    BIT_AND         shift and go to state 45
    BIT_OR          shift and go to state 46
    BIT_XOR         shift and go to state 47
    LSHIFT          shift and go to state 48
    RSHIFT          shift and go to state 49
    QUESTION_MARK   shift and go to state 50
    IN              shift and go to state 51
    NOT             shift and go to state 52
    EQ              shift and go to state 53
    NEQ             shift and go to state 54
    GT              shift and go to state 55
    GTE             shift and go to state 56
    LT              shift and go to state 57
    LTE             shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60


state 77

    (50) statement -> identifier LSQBRACK expression . RSQBRACK EQUALS expression STMT_END
    (45) expression -> identifier LSQBRACK expression . RSQBRACK
    (46) expression -> identifier LSQBRACK expression . COLON expression RSQBRACK
    (48) expression -> identifier LSQBRACK expression . COLON RSQBRACK
    (12) expression -> expression . PLUS expression
    (13) expression -> expression . MINUS expression
    (14) expression -> expression . MUL expression
    (15) expression -> expression . DIV expression
    (16) expression -> expression . EXP expression
    (17) expression -> expression . MOD expression
    (18) expression -> expression . BIT_AND expression
    (19) expression -> expression . BIT_OR expression
    (20) expression -> expression . BIT_XOR expression
    (21) expression -> expression . LSHIFT expression
    (22) expression -> expression . RSHIFT expression
    (43) expression -> expression . QUESTION_MARK expression COLON expression
    (55) expression -> expression . IN expression
    (56) expression -> expression . NOT IN expression
    (23) boolean -> expression . EQ expression
    (24) boolean -> expression . NEQ expression
    (25) boolean -> expression . GT expression
    (26) boolean -> expression . GTE expression
    (27) boolean -> expression . LT expression
    (28) boolean -> expression . LTE expression
    (29) boolean -> expression . AND expression
    (30) boolean -> expression . OR expression

    RSQBRACK        shift and go to state 125
    COLON           shift and go to state 126
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    MUL             shift and go to state 41
    DIV             shift and go to state 42
    EXP             shift and go to state 43
    MOD             shift and go to state 44
    BIT_AND         shift and go to state 45
    BIT_OR          shift and go to state 46
    BIT_XOR         shift and go to state 47
    LSHIFT          shift and go to state 48
    RSHIFT          shift and go to state 49
    QUESTION_MARK   shift and go to state 50
    IN              shift and go to state 51
    NOT             shift and go to state 52
    EQ              shift and go to state 53
    NEQ             shift and go to state 54
    GT              shift and go to state 55
    GTE             shift and go to state 56
    LT              shift and go to state 57
    LTE             shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60


state 78

    (47) expression -> identifier LSQBRACK COLON . expression RSQBRACK
    (49) expression -> identifier LSQBRACK COLON . RSQBRACK
    (12) expression -> . expression PLUS expression
    (13) expression -> . expression MINUS expression
    (14) expression -> . expression MUL expression
    (15) expression -> . expression DIV expression
    (16) expression -> . expression EXP expression
    (17) expression -> . expression MOD expression
    (18) expression -> . expression BIT_AND expression
    (19) expression -> . expression BIT_OR expression
    (20) expression -> . expression BIT_XOR expression
    (21) expression -> . expression LSHIFT expression
    (22) expression -> . expression RSHIFT expression
    (31) expression -> . MINUS expression
    (32) expression -> . PLUS expression
    (33) expression -> . BIT_NEG expression
    (34) expression -> . NOT expression
    (35) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression QUESTION_MARK expression COLON expression
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable STMT_END
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier DOUBLE_PLUS
    (65) expression -> . identifier DOUBLE_MINUS
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (77) expression -> . identifier LPAREN arguments RPAREN
    (6) identifier -> . IDENTIFIER
    (8) primitive -> . NUM_INT
    (9) primitive -> . NUM_FLOAT
    (10) primitive -> . STRING
    (11) primitive -> . boolean
    (23) boolean -> . expression EQ expression
    (24) boolean -> . expression NEQ expression
    (25) boolean -> . expression GT expression
    (26) boolean -> . expression GTE expression
    (27) boolean -> . expression LT expression
    (28) boolean -> . expression LTE expression
    (29) boolean -> . expression AND expression
    (30) boolean -> . expression OR expression
    (36) boolean -> . TRUE
    (37) boolean -> . FALSE

    RSQBRACK        shift and go to state 128
    MINUS           shift and go to state 16
    PLUS            shift and go to state 15
    BIT_NEG         shift and go to state 17
    NOT             shift and go to state 18
    LPAREN          shift and go to state 12
    LSQBRACK        shift and go to state 7
    STRING          shift and go to state 20
    IDENTIFIER      shift and go to state 14
    NUM_INT         shift and go to state 22
    NUM_FLOAT       shift and go to state 23
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26

    identifier                     shift and go to state 64
    expression                     shift and go to state 127
    primitive                      shift and go to state 19
    boolean                        shift and go to state 24

state 79

    (51) expression -> identifier EQUALS assignable . STMT_END

    STMT_END        shift and go to state 129


state 80

    (38) assignable -> primitive .
    (66) expression -> primitive .

  ! reduce/reduce conflict for STMT_END resolved using rule 38 (assignable -> primitive .)
    STMT_END        reduce using rule 38 (assignable -> primitive .)
    PLUS            reduce using rule 66 (expression -> primitive .)
    MINUS           reduce using rule 66 (expression -> primitive .)
    MUL             reduce using rule 66 (expression -> primitive .)
    DIV             reduce using rule 66 (expression -> primitive .)
    EXP             reduce using rule 66 (expression -> primitive .)
    MOD             reduce using rule 66 (expression -> primitive .)
    BIT_AND         reduce using rule 66 (expression -> primitive .)
    BIT_OR          reduce using rule 66 (expression -> primitive .)
    BIT_XOR         reduce using rule 66 (expression -> primitive .)
    LSHIFT          reduce using rule 66 (expression -> primitive .)
    RSHIFT          reduce using rule 66 (expression -> primitive .)
    QUESTION_MARK   reduce using rule 66 (expression -> primitive .)
    IN              reduce using rule 66 (expression -> primitive .)
    NOT             reduce using rule 66 (expression -> primitive .)
    EQ              reduce using rule 66 (expression -> primitive .)
    NEQ             reduce using rule 66 (expression -> primitive .)
    GT              reduce using rule 66 (expression -> primitive .)
    GTE             reduce using rule 66 (expression -> primitive .)
    LT              reduce using rule 66 (expression -> primitive .)
    LTE             reduce using rule 66 (expression -> primitive .)
    AND             reduce using rule 66 (expression -> primitive .)
    OR              reduce using rule 66 (expression -> primitive .)

  ! STMT_END        [ reduce using rule 66 (expression -> primitive .) ]


state 81

    (39) assignable -> expression .
    (12) expression -> expression . PLUS expression
    (13) expression -> expression . MINUS expression
    (14) expression -> expression . MUL expression
    (15) expression -> expression . DIV expression
    (16) expression -> expression . EXP expression
    (17) expression -> expression . MOD expression
    (18) expression -> expression . BIT_AND expression
    (19) expression -> expression . BIT_OR expression
    (20) expression -> expression . BIT_XOR expression
    (21) expression -> expression . LSHIFT expression
    (22) expression -> expression . RSHIFT expression
    (43) expression -> expression . QUESTION_MARK expression COLON expression
    (55) expression -> expression . IN expression
    (56) expression -> expression . NOT IN expression
    (23) boolean -> expression . EQ expression
    (24) boolean -> expression . NEQ expression
    (25) boolean -> expression . GT expression
    (26) boolean -> expression . GTE expression
    (27) boolean -> expression . LT expression
    (28) boolean -> expression . LTE expression
    (29) boolean -> expression . AND expression
    (30) boolean -> expression . OR expression

    STMT_END        reduce using rule 39 (assignable -> expression .)
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    MUL             shift and go to state 41
    DIV             shift and go to state 42
    EXP             shift and go to state 43
    MOD             shift and go to state 44
    BIT_AND         shift and go to state 45
    BIT_OR          shift and go to state 46
    BIT_XOR         shift and go to state 47
    LSHIFT          shift and go to state 48
    RSHIFT          shift and go to state 49
    QUESTION_MARK   shift and go to state 50
    IN              shift and go to state 51
    NOT             shift and go to state 52
    EQ              shift and go to state 53
    NEQ             shift and go to state 54
    GT              shift and go to state 55
    GTE             shift and go to state 56
    LT              shift and go to state 57
    LTE             shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60


state 82

    (10) primitive -> STRING .
    (67) expression -> STRING .

  ! reduce/reduce conflict for PLUS resolved using rule 10 (primitive -> STRING .)
  ! reduce/reduce conflict for MINUS resolved using rule 10 (primitive -> STRING .)
  ! reduce/reduce conflict for MUL resolved using rule 10 (primitive -> STRING .)
  ! reduce/reduce conflict for DIV resolved using rule 10 (primitive -> STRING .)
  ! reduce/reduce conflict for EXP resolved using rule 10 (primitive -> STRING .)
  ! reduce/reduce conflict for MOD resolved using rule 10 (primitive -> STRING .)
  ! reduce/reduce conflict for BIT_AND resolved using rule 10 (primitive -> STRING .)
  ! reduce/reduce conflict for BIT_OR resolved using rule 10 (primitive -> STRING .)
  ! reduce/reduce conflict for BIT_XOR resolved using rule 10 (primitive -> STRING .)
  ! reduce/reduce conflict for LSHIFT resolved using rule 10 (primitive -> STRING .)
  ! reduce/reduce conflict for RSHIFT resolved using rule 10 (primitive -> STRING .)
  ! reduce/reduce conflict for QUESTION_MARK resolved using rule 10 (primitive -> STRING .)
  ! reduce/reduce conflict for IN resolved using rule 10 (primitive -> STRING .)
  ! reduce/reduce conflict for NOT resolved using rule 10 (primitive -> STRING .)
  ! reduce/reduce conflict for EQ resolved using rule 10 (primitive -> STRING .)
  ! reduce/reduce conflict for NEQ resolved using rule 10 (primitive -> STRING .)
  ! reduce/reduce conflict for GT resolved using rule 10 (primitive -> STRING .)
  ! reduce/reduce conflict for GTE resolved using rule 10 (primitive -> STRING .)
  ! reduce/reduce conflict for LT resolved using rule 10 (primitive -> STRING .)
  ! reduce/reduce conflict for LTE resolved using rule 10 (primitive -> STRING .)
  ! reduce/reduce conflict for AND resolved using rule 10 (primitive -> STRING .)
  ! reduce/reduce conflict for OR resolved using rule 10 (primitive -> STRING .)
  ! reduce/reduce conflict for STMT_END resolved using rule 10 (primitive -> STRING .)
    STMT_END        reduce using rule 10 (primitive -> STRING .)
    PLUS            reduce using rule 10 (primitive -> STRING .)
    MINUS           reduce using rule 10 (primitive -> STRING .)
    MUL             reduce using rule 10 (primitive -> STRING .)
    DIV             reduce using rule 10 (primitive -> STRING .)
    EXP             reduce using rule 10 (primitive -> STRING .)
    MOD             reduce using rule 10 (primitive -> STRING .)
    BIT_AND         reduce using rule 10 (primitive -> STRING .)
    BIT_OR          reduce using rule 10 (primitive -> STRING .)
    BIT_XOR         reduce using rule 10 (primitive -> STRING .)
    LSHIFT          reduce using rule 10 (primitive -> STRING .)
    RSHIFT          reduce using rule 10 (primitive -> STRING .)
    QUESTION_MARK   reduce using rule 10 (primitive -> STRING .)
    IN              reduce using rule 10 (primitive -> STRING .)
    NOT             reduce using rule 10 (primitive -> STRING .)
    EQ              reduce using rule 10 (primitive -> STRING .)
    NEQ             reduce using rule 10 (primitive -> STRING .)
    GT              reduce using rule 10 (primitive -> STRING .)
    GTE             reduce using rule 10 (primitive -> STRING .)
    LT              reduce using rule 10 (primitive -> STRING .)
    LTE             reduce using rule 10 (primitive -> STRING .)
    AND             reduce using rule 10 (primitive -> STRING .)
    OR              reduce using rule 10 (primitive -> STRING .)

  ! PLUS            [ reduce using rule 67 (expression -> STRING .) ]
  ! MINUS           [ reduce using rule 67 (expression -> STRING .) ]
  ! MUL             [ reduce using rule 67 (expression -> STRING .) ]
  ! DIV             [ reduce using rule 67 (expression -> STRING .) ]
  ! EXP             [ reduce using rule 67 (expression -> STRING .) ]
  ! MOD             [ reduce using rule 67 (expression -> STRING .) ]
  ! BIT_AND         [ reduce using rule 67 (expression -> STRING .) ]
  ! BIT_OR          [ reduce using rule 67 (expression -> STRING .) ]
  ! BIT_XOR         [ reduce using rule 67 (expression -> STRING .) ]
  ! LSHIFT          [ reduce using rule 67 (expression -> STRING .) ]
  ! RSHIFT          [ reduce using rule 67 (expression -> STRING .) ]
  ! QUESTION_MARK   [ reduce using rule 67 (expression -> STRING .) ]
  ! IN              [ reduce using rule 67 (expression -> STRING .) ]
  ! NOT             [ reduce using rule 67 (expression -> STRING .) ]
  ! EQ              [ reduce using rule 67 (expression -> STRING .) ]
  ! NEQ             [ reduce using rule 67 (expression -> STRING .) ]
  ! GT              [ reduce using rule 67 (expression -> STRING .) ]
  ! GTE             [ reduce using rule 67 (expression -> STRING .) ]
  ! LT              [ reduce using rule 67 (expression -> STRING .) ]
  ! LTE             [ reduce using rule 67 (expression -> STRING .) ]
  ! AND             [ reduce using rule 67 (expression -> STRING .) ]
  ! OR              [ reduce using rule 67 (expression -> STRING .) ]
  ! STMT_END        [ reduce using rule 67 (expression -> STRING .) ]


state 83

    (58) statement -> identifier PLUS_EQ expression . STMT_END
    (12) expression -> expression . PLUS expression
    (13) expression -> expression . MINUS expression
    (14) expression -> expression . MUL expression
    (15) expression -> expression . DIV expression
    (16) expression -> expression . EXP expression
    (17) expression -> expression . MOD expression
    (18) expression -> expression . BIT_AND expression
    (19) expression -> expression . BIT_OR expression
    (20) expression -> expression . BIT_XOR expression
    (21) expression -> expression . LSHIFT expression
    (22) expression -> expression . RSHIFT expression
    (43) expression -> expression . QUESTION_MARK expression COLON expression
    (55) expression -> expression . IN expression
    (56) expression -> expression . NOT IN expression
    (23) boolean -> expression . EQ expression
    (24) boolean -> expression . NEQ expression
    (25) boolean -> expression . GT expression
    (26) boolean -> expression . GTE expression
    (27) boolean -> expression . LT expression
    (28) boolean -> expression . LTE expression
    (29) boolean -> expression . AND expression
    (30) boolean -> expression . OR expression

    STMT_END        shift and go to state 130
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    MUL             shift and go to state 41
    DIV             shift and go to state 42
    EXP             shift and go to state 43
    MOD             shift and go to state 44
    BIT_AND         shift and go to state 45
    BIT_OR          shift and go to state 46
    BIT_XOR         shift and go to state 47
    LSHIFT          shift and go to state 48
    RSHIFT          shift and go to state 49
    QUESTION_MARK   shift and go to state 50
    IN              shift and go to state 51
    NOT             shift and go to state 52
    EQ              shift and go to state 53
    NEQ             shift and go to state 54
    GT              shift and go to state 55
    GTE             shift and go to state 56
    LT              shift and go to state 57
    LTE             shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60


state 84

    (59) statement -> identifier MINUS_EQ expression . STMT_END
    (12) expression -> expression . PLUS expression
    (13) expression -> expression . MINUS expression
    (14) expression -> expression . MUL expression
    (15) expression -> expression . DIV expression
    (16) expression -> expression . EXP expression
    (17) expression -> expression . MOD expression
    (18) expression -> expression . BIT_AND expression
    (19) expression -> expression . BIT_OR expression
    (20) expression -> expression . BIT_XOR expression
    (21) expression -> expression . LSHIFT expression
    (22) expression -> expression . RSHIFT expression
    (43) expression -> expression . QUESTION_MARK expression COLON expression
    (55) expression -> expression . IN expression
    (56) expression -> expression . NOT IN expression
    (23) boolean -> expression . EQ expression
    (24) boolean -> expression . NEQ expression
    (25) boolean -> expression . GT expression
    (26) boolean -> expression . GTE expression
    (27) boolean -> expression . LT expression
    (28) boolean -> expression . LTE expression
    (29) boolean -> expression . AND expression
    (30) boolean -> expression . OR expression

    STMT_END        shift and go to state 131
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    MUL             shift and go to state 41
    DIV             shift and go to state 42
    EXP             shift and go to state 43
    MOD             shift and go to state 44
    BIT_AND         shift and go to state 45
    BIT_OR          shift and go to state 46
    BIT_XOR         shift and go to state 47
    LSHIFT          shift and go to state 48
    RSHIFT          shift and go to state 49
    QUESTION_MARK   shift and go to state 50
    IN              shift and go to state 51
    NOT             shift and go to state 52
    EQ              shift and go to state 53
    NEQ             shift and go to state 54
    GT              shift and go to state 55
    GTE             shift and go to state 56
    LT              shift and go to state 57
    LTE             shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60


state 85

    (60) statement -> identifier MUL_EQ expression . STMT_END
    (12) expression -> expression . PLUS expression
    (13) expression -> expression . MINUS expression
    (14) expression -> expression . MUL expression
    (15) expression -> expression . DIV expression
    (16) expression -> expression . EXP expression
    (17) expression -> expression . MOD expression
    (18) expression -> expression . BIT_AND expression
    (19) expression -> expression . BIT_OR expression
    (20) expression -> expression . BIT_XOR expression
    (21) expression -> expression . LSHIFT expression
    (22) expression -> expression . RSHIFT expression
    (43) expression -> expression . QUESTION_MARK expression COLON expression
    (55) expression -> expression . IN expression
    (56) expression -> expression . NOT IN expression
    (23) boolean -> expression . EQ expression
    (24) boolean -> expression . NEQ expression
    (25) boolean -> expression . GT expression
    (26) boolean -> expression . GTE expression
    (27) boolean -> expression . LT expression
    (28) boolean -> expression . LTE expression
    (29) boolean -> expression . AND expression
    (30) boolean -> expression . OR expression

    STMT_END        shift and go to state 132
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    MUL             shift and go to state 41
    DIV             shift and go to state 42
    EXP             shift and go to state 43
    MOD             shift and go to state 44
    BIT_AND         shift and go to state 45
    BIT_OR          shift and go to state 46
    BIT_XOR         shift and go to state 47
    LSHIFT          shift and go to state 48
    RSHIFT          shift and go to state 49
    QUESTION_MARK   shift and go to state 50
    IN              shift and go to state 51
    NOT             shift and go to state 52
    EQ              shift and go to state 53
    NEQ             shift and go to state 54
    GT              shift and go to state 55
    GTE             shift and go to state 56
    LT              shift and go to state 57
    LTE             shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60


state 86

    (61) statement -> identifier DIV_EQ expression . STMT_END
    (12) expression -> expression . PLUS expression
    (13) expression -> expression . MINUS expression
    (14) expression -> expression . MUL expression
    (15) expression -> expression . DIV expression
    (16) expression -> expression . EXP expression
    (17) expression -> expression . MOD expression
    (18) expression -> expression . BIT_AND expression
    (19) expression -> expression . BIT_OR expression
    (20) expression -> expression . BIT_XOR expression
    (21) expression -> expression . LSHIFT expression
    (22) expression -> expression . RSHIFT expression
    (43) expression -> expression . QUESTION_MARK expression COLON expression
    (55) expression -> expression . IN expression
    (56) expression -> expression . NOT IN expression
    (23) boolean -> expression . EQ expression
    (24) boolean -> expression . NEQ expression
    (25) boolean -> expression . GT expression
    (26) boolean -> expression . GTE expression
    (27) boolean -> expression . LT expression
    (28) boolean -> expression . LTE expression
    (29) boolean -> expression . AND expression
    (30) boolean -> expression . OR expression

    STMT_END        shift and go to state 133
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    MUL             shift and go to state 41
    DIV             shift and go to state 42
    EXP             shift and go to state 43
    MOD             shift and go to state 44
    BIT_AND         shift and go to state 45
    BIT_OR          shift and go to state 46
    BIT_XOR         shift and go to state 47
    LSHIFT          shift and go to state 48
    RSHIFT          shift and go to state 49
    QUESTION_MARK   shift and go to state 50
    IN              shift and go to state 51
    NOT             shift and go to state 52
    EQ              shift and go to state 53
    NEQ             shift and go to state 54
    GT              shift and go to state 55
    GTE             shift and go to state 56
    LT              shift and go to state 57
    LTE             shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60


state 87

    (62) statement -> identifier EXP_EQ expression . STMT_END
    (12) expression -> expression . PLUS expression
    (13) expression -> expression . MINUS expression
    (14) expression -> expression . MUL expression
    (15) expression -> expression . DIV expression
    (16) expression -> expression . EXP expression
    (17) expression -> expression . MOD expression
    (18) expression -> expression . BIT_AND expression
    (19) expression -> expression . BIT_OR expression
    (20) expression -> expression . BIT_XOR expression
    (21) expression -> expression . LSHIFT expression
    (22) expression -> expression . RSHIFT expression
    (43) expression -> expression . QUESTION_MARK expression COLON expression
    (55) expression -> expression . IN expression
    (56) expression -> expression . NOT IN expression
    (23) boolean -> expression . EQ expression
    (24) boolean -> expression . NEQ expression
    (25) boolean -> expression . GT expression
    (26) boolean -> expression . GTE expression
    (27) boolean -> expression . LT expression
    (28) boolean -> expression . LTE expression
    (29) boolean -> expression . AND expression
    (30) boolean -> expression . OR expression

    STMT_END        shift and go to state 134
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    MUL             shift and go to state 41
    DIV             shift and go to state 42
    EXP             shift and go to state 43
    MOD             shift and go to state 44
    BIT_AND         shift and go to state 45
    BIT_OR          shift and go to state 46
    BIT_XOR         shift and go to state 47
    LSHIFT          shift and go to state 48
    RSHIFT          shift and go to state 49
    QUESTION_MARK   shift and go to state 50
    IN              shift and go to state 51
    NOT             shift and go to state 52
    EQ              shift and go to state 53
    NEQ             shift and go to state 54
    GT              shift and go to state 55
    GTE             shift and go to state 56
    LT              shift and go to state 57
    LTE             shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60


state 88

    (63) statement -> identifier MOD_EQ expression . STMT_END
    (12) expression -> expression . PLUS expression
    (13) expression -> expression . MINUS expression
    (14) expression -> expression . MUL expression
    (15) expression -> expression . DIV expression
    (16) expression -> expression . EXP expression
    (17) expression -> expression . MOD expression
    (18) expression -> expression . BIT_AND expression
    (19) expression -> expression . BIT_OR expression
    (20) expression -> expression . BIT_XOR expression
    (21) expression -> expression . LSHIFT expression
    (22) expression -> expression . RSHIFT expression
    (43) expression -> expression . QUESTION_MARK expression COLON expression
    (55) expression -> expression . IN expression
    (56) expression -> expression . NOT IN expression
    (23) boolean -> expression . EQ expression
    (24) boolean -> expression . NEQ expression
    (25) boolean -> expression . GT expression
    (26) boolean -> expression . GTE expression
    (27) boolean -> expression . LT expression
    (28) boolean -> expression . LTE expression
    (29) boolean -> expression . AND expression
    (30) boolean -> expression . OR expression

    STMT_END        shift and go to state 135
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    MUL             shift and go to state 41
    DIV             shift and go to state 42
    EXP             shift and go to state 43
    MOD             shift and go to state 44
    BIT_AND         shift and go to state 45
    BIT_OR          shift and go to state 46
    BIT_XOR         shift and go to state 47
    LSHIFT          shift and go to state 48
    RSHIFT          shift and go to state 49
    QUESTION_MARK   shift and go to state 50
    IN              shift and go to state 51
    NOT             shift and go to state 52
    EQ              shift and go to state 53
    NEQ             shift and go to state 54
    GT              shift and go to state 55
    GTE             shift and go to state 56
    LT              shift and go to state 57
    LTE             shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60


state 89

    (78) statement -> identifier LPAREN arguments . RPAREN STMT_END
    (77) expression -> identifier LPAREN arguments . RPAREN
    (40) arguments -> arguments . COMMA expression

    RPAREN          shift and go to state 136
    COMMA           shift and go to state 113


state 90

    (12) expression -> expression PLUS expression .
    (12) expression -> expression . PLUS expression
    (13) expression -> expression . MINUS expression
    (14) expression -> expression . MUL expression
    (15) expression -> expression . DIV expression
    (16) expression -> expression . EXP expression
    (17) expression -> expression . MOD expression
    (18) expression -> expression . BIT_AND expression
    (19) expression -> expression . BIT_OR expression
    (20) expression -> expression . BIT_XOR expression
    (21) expression -> expression . LSHIFT expression
    (22) expression -> expression . RSHIFT expression
    (43) expression -> expression . QUESTION_MARK expression COLON expression
    (55) expression -> expression . IN expression
    (56) expression -> expression . NOT IN expression
    (23) boolean -> expression . EQ expression
    (24) boolean -> expression . NEQ expression
    (25) boolean -> expression . GT expression
    (26) boolean -> expression . GTE expression
    (27) boolean -> expression . LT expression
    (28) boolean -> expression . LTE expression
    (29) boolean -> expression . AND expression
    (30) boolean -> expression . OR expression

    PLUS            reduce using rule 12 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 12 (expression -> expression PLUS expression .)
    BIT_AND         reduce using rule 12 (expression -> expression PLUS expression .)
    BIT_OR          reduce using rule 12 (expression -> expression PLUS expression .)
    BIT_XOR         reduce using rule 12 (expression -> expression PLUS expression .)
    LSHIFT          reduce using rule 12 (expression -> expression PLUS expression .)
    RSHIFT          reduce using rule 12 (expression -> expression PLUS expression .)
    QUESTION_MARK   reduce using rule 12 (expression -> expression PLUS expression .)
    IN              reduce using rule 12 (expression -> expression PLUS expression .)
    NOT             reduce using rule 12 (expression -> expression PLUS expression .)
    EQ              reduce using rule 12 (expression -> expression PLUS expression .)
    NEQ             reduce using rule 12 (expression -> expression PLUS expression .)
    GT              reduce using rule 12 (expression -> expression PLUS expression .)
    GTE             reduce using rule 12 (expression -> expression PLUS expression .)
    LT              reduce using rule 12 (expression -> expression PLUS expression .)
    LTE             reduce using rule 12 (expression -> expression PLUS expression .)
    AND             reduce using rule 12 (expression -> expression PLUS expression .)
    OR              reduce using rule 12 (expression -> expression PLUS expression .)
    EXIT            reduce using rule 12 (expression -> expression PLUS expression .)
    PRINT           reduce using rule 12 (expression -> expression PLUS expression .)
    FOR             reduce using rule 12 (expression -> expression PLUS expression .)
    WHILE           reduce using rule 12 (expression -> expression PLUS expression .)
    FUNCTION        reduce using rule 12 (expression -> expression PLUS expression .)
    RETURN          reduce using rule 12 (expression -> expression PLUS expression .)
    IDENTIFIER      reduce using rule 12 (expression -> expression PLUS expression .)
    BIT_NEG         reduce using rule 12 (expression -> expression PLUS expression .)
    LPAREN          reduce using rule 12 (expression -> expression PLUS expression .)
    LSQBRACK        reduce using rule 12 (expression -> expression PLUS expression .)
    STRING          reduce using rule 12 (expression -> expression PLUS expression .)
    IF              reduce using rule 12 (expression -> expression PLUS expression .)
    NUM_INT         reduce using rule 12 (expression -> expression PLUS expression .)
    NUM_FLOAT       reduce using rule 12 (expression -> expression PLUS expression .)
    TRUE            reduce using rule 12 (expression -> expression PLUS expression .)
    FALSE           reduce using rule 12 (expression -> expression PLUS expression .)
    $end            reduce using rule 12 (expression -> expression PLUS expression .)
    RSQBRACK        reduce using rule 12 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 12 (expression -> expression PLUS expression .)
    STMT_END        reduce using rule 12 (expression -> expression PLUS expression .)
    LBRACK          reduce using rule 12 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 12 (expression -> expression PLUS expression .)
    COLON           reduce using rule 12 (expression -> expression PLUS expression .)
    RBRACK          reduce using rule 12 (expression -> expression PLUS expression .)
    ARROW_LTR       reduce using rule 12 (expression -> expression PLUS expression .)
    ARROW_RTL       reduce using rule 12 (expression -> expression PLUS expression .)
    MUL             shift and go to state 41
    DIV             shift and go to state 42
    EXP             shift and go to state 43
    MOD             shift and go to state 44

  ! MUL             [ reduce using rule 12 (expression -> expression PLUS expression .) ]
  ! DIV             [ reduce using rule 12 (expression -> expression PLUS expression .) ]
  ! EXP             [ reduce using rule 12 (expression -> expression PLUS expression .) ]
  ! MOD             [ reduce using rule 12 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 39 ]
  ! MINUS           [ shift and go to state 40 ]
  ! BIT_AND         [ shift and go to state 45 ]
  ! BIT_OR          [ shift and go to state 46 ]
  ! BIT_XOR         [ shift and go to state 47 ]
  ! LSHIFT          [ shift and go to state 48 ]
  ! RSHIFT          [ shift and go to state 49 ]
  ! QUESTION_MARK   [ shift and go to state 50 ]
  ! IN              [ shift and go to state 51 ]
  ! NOT             [ shift and go to state 52 ]
  ! EQ              [ shift and go to state 53 ]
  ! NEQ             [ shift and go to state 54 ]
  ! GT              [ shift and go to state 55 ]
  ! GTE             [ shift and go to state 56 ]
  ! LT              [ shift and go to state 57 ]
  ! LTE             [ shift and go to state 58 ]
  ! AND             [ shift and go to state 59 ]
  ! OR              [ shift and go to state 60 ]


state 91

    (13) expression -> expression MINUS expression .
    (12) expression -> expression . PLUS expression
    (13) expression -> expression . MINUS expression
    (14) expression -> expression . MUL expression
    (15) expression -> expression . DIV expression
    (16) expression -> expression . EXP expression
    (17) expression -> expression . MOD expression
    (18) expression -> expression . BIT_AND expression
    (19) expression -> expression . BIT_OR expression
    (20) expression -> expression . BIT_XOR expression
    (21) expression -> expression . LSHIFT expression
    (22) expression -> expression . RSHIFT expression
    (43) expression -> expression . QUESTION_MARK expression COLON expression
    (55) expression -> expression . IN expression
    (56) expression -> expression . NOT IN expression
    (23) boolean -> expression . EQ expression
    (24) boolean -> expression . NEQ expression
    (25) boolean -> expression . GT expression
    (26) boolean -> expression . GTE expression
    (27) boolean -> expression . LT expression
    (28) boolean -> expression . LTE expression
    (29) boolean -> expression . AND expression
    (30) boolean -> expression . OR expression

    PLUS            reduce using rule 13 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 13 (expression -> expression MINUS expression .)
    BIT_AND         reduce using rule 13 (expression -> expression MINUS expression .)
    BIT_OR          reduce using rule 13 (expression -> expression MINUS expression .)
    BIT_XOR         reduce using rule 13 (expression -> expression MINUS expression .)
    LSHIFT          reduce using rule 13 (expression -> expression MINUS expression .)
    RSHIFT          reduce using rule 13 (expression -> expression MINUS expression .)
    QUESTION_MARK   reduce using rule 13 (expression -> expression MINUS expression .)
    IN              reduce using rule 13 (expression -> expression MINUS expression .)
    NOT             reduce using rule 13 (expression -> expression MINUS expression .)
    EQ              reduce using rule 13 (expression -> expression MINUS expression .)
    NEQ             reduce using rule 13 (expression -> expression MINUS expression .)
    GT              reduce using rule 13 (expression -> expression MINUS expression .)
    GTE             reduce using rule 13 (expression -> expression MINUS expression .)
    LT              reduce using rule 13 (expression -> expression MINUS expression .)
    LTE             reduce using rule 13 (expression -> expression MINUS expression .)
    AND             reduce using rule 13 (expression -> expression MINUS expression .)
    OR              reduce using rule 13 (expression -> expression MINUS expression .)
    EXIT            reduce using rule 13 (expression -> expression MINUS expression .)
    PRINT           reduce using rule 13 (expression -> expression MINUS expression .)
    FOR             reduce using rule 13 (expression -> expression MINUS expression .)
    WHILE           reduce using rule 13 (expression -> expression MINUS expression .)
    FUNCTION        reduce using rule 13 (expression -> expression MINUS expression .)
    RETURN          reduce using rule 13 (expression -> expression MINUS expression .)
    IDENTIFIER      reduce using rule 13 (expression -> expression MINUS expression .)
    BIT_NEG         reduce using rule 13 (expression -> expression MINUS expression .)
    LPAREN          reduce using rule 13 (expression -> expression MINUS expression .)
    LSQBRACK        reduce using rule 13 (expression -> expression MINUS expression .)
    STRING          reduce using rule 13 (expression -> expression MINUS expression .)
    IF              reduce using rule 13 (expression -> expression MINUS expression .)
    NUM_INT         reduce using rule 13 (expression -> expression MINUS expression .)
    NUM_FLOAT       reduce using rule 13 (expression -> expression MINUS expression .)
    TRUE            reduce using rule 13 (expression -> expression MINUS expression .)
    FALSE           reduce using rule 13 (expression -> expression MINUS expression .)
    $end            reduce using rule 13 (expression -> expression MINUS expression .)
    RSQBRACK        reduce using rule 13 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 13 (expression -> expression MINUS expression .)
    STMT_END        reduce using rule 13 (expression -> expression MINUS expression .)
    LBRACK          reduce using rule 13 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 13 (expression -> expression MINUS expression .)
    COLON           reduce using rule 13 (expression -> expression MINUS expression .)
    RBRACK          reduce using rule 13 (expression -> expression MINUS expression .)
    ARROW_LTR       reduce using rule 13 (expression -> expression MINUS expression .)
    ARROW_RTL       reduce using rule 13 (expression -> expression MINUS expression .)
    MUL             shift and go to state 41
    DIV             shift and go to state 42
    EXP             shift and go to state 43
    MOD             shift and go to state 44

  ! MUL             [ reduce using rule 13 (expression -> expression MINUS expression .) ]
  ! DIV             [ reduce using rule 13 (expression -> expression MINUS expression .) ]
  ! EXP             [ reduce using rule 13 (expression -> expression MINUS expression .) ]
  ! MOD             [ reduce using rule 13 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 39 ]
  ! MINUS           [ shift and go to state 40 ]
  ! BIT_AND         [ shift and go to state 45 ]
  ! BIT_OR          [ shift and go to state 46 ]
  ! BIT_XOR         [ shift and go to state 47 ]
  ! LSHIFT          [ shift and go to state 48 ]
  ! RSHIFT          [ shift and go to state 49 ]
  ! QUESTION_MARK   [ shift and go to state 50 ]
  ! IN              [ shift and go to state 51 ]
  ! NOT             [ shift and go to state 52 ]
  ! EQ              [ shift and go to state 53 ]
  ! NEQ             [ shift and go to state 54 ]
  ! GT              [ shift and go to state 55 ]
  ! GTE             [ shift and go to state 56 ]
  ! LT              [ shift and go to state 57 ]
  ! LTE             [ shift and go to state 58 ]
  ! AND             [ shift and go to state 59 ]
  ! OR              [ shift and go to state 60 ]


state 92

    (14) expression -> expression MUL expression .
    (12) expression -> expression . PLUS expression
    (13) expression -> expression . MINUS expression
    (14) expression -> expression . MUL expression
    (15) expression -> expression . DIV expression
    (16) expression -> expression . EXP expression
    (17) expression -> expression . MOD expression
    (18) expression -> expression . BIT_AND expression
    (19) expression -> expression . BIT_OR expression
    (20) expression -> expression . BIT_XOR expression
    (21) expression -> expression . LSHIFT expression
    (22) expression -> expression . RSHIFT expression
    (43) expression -> expression . QUESTION_MARK expression COLON expression
    (55) expression -> expression . IN expression
    (56) expression -> expression . NOT IN expression
    (23) boolean -> expression . EQ expression
    (24) boolean -> expression . NEQ expression
    (25) boolean -> expression . GT expression
    (26) boolean -> expression . GTE expression
    (27) boolean -> expression . LT expression
    (28) boolean -> expression . LTE expression
    (29) boolean -> expression . AND expression
    (30) boolean -> expression . OR expression

    PLUS            reduce using rule 14 (expression -> expression MUL expression .)
    MINUS           reduce using rule 14 (expression -> expression MUL expression .)
    MUL             reduce using rule 14 (expression -> expression MUL expression .)
    DIV             reduce using rule 14 (expression -> expression MUL expression .)
    BIT_AND         reduce using rule 14 (expression -> expression MUL expression .)
    BIT_OR          reduce using rule 14 (expression -> expression MUL expression .)
    BIT_XOR         reduce using rule 14 (expression -> expression MUL expression .)
    LSHIFT          reduce using rule 14 (expression -> expression MUL expression .)
    RSHIFT          reduce using rule 14 (expression -> expression MUL expression .)
    QUESTION_MARK   reduce using rule 14 (expression -> expression MUL expression .)
    IN              reduce using rule 14 (expression -> expression MUL expression .)
    NOT             reduce using rule 14 (expression -> expression MUL expression .)
    EQ              reduce using rule 14 (expression -> expression MUL expression .)
    NEQ             reduce using rule 14 (expression -> expression MUL expression .)
    GT              reduce using rule 14 (expression -> expression MUL expression .)
    GTE             reduce using rule 14 (expression -> expression MUL expression .)
    LT              reduce using rule 14 (expression -> expression MUL expression .)
    LTE             reduce using rule 14 (expression -> expression MUL expression .)
    AND             reduce using rule 14 (expression -> expression MUL expression .)
    OR              reduce using rule 14 (expression -> expression MUL expression .)
    EXIT            reduce using rule 14 (expression -> expression MUL expression .)
    PRINT           reduce using rule 14 (expression -> expression MUL expression .)
    FOR             reduce using rule 14 (expression -> expression MUL expression .)
    WHILE           reduce using rule 14 (expression -> expression MUL expression .)
    FUNCTION        reduce using rule 14 (expression -> expression MUL expression .)
    RETURN          reduce using rule 14 (expression -> expression MUL expression .)
    IDENTIFIER      reduce using rule 14 (expression -> expression MUL expression .)
    BIT_NEG         reduce using rule 14 (expression -> expression MUL expression .)
    LPAREN          reduce using rule 14 (expression -> expression MUL expression .)
    LSQBRACK        reduce using rule 14 (expression -> expression MUL expression .)
    STRING          reduce using rule 14 (expression -> expression MUL expression .)
    IF              reduce using rule 14 (expression -> expression MUL expression .)
    NUM_INT         reduce using rule 14 (expression -> expression MUL expression .)
    NUM_FLOAT       reduce using rule 14 (expression -> expression MUL expression .)
    TRUE            reduce using rule 14 (expression -> expression MUL expression .)
    FALSE           reduce using rule 14 (expression -> expression MUL expression .)
    $end            reduce using rule 14 (expression -> expression MUL expression .)
    RSQBRACK        reduce using rule 14 (expression -> expression MUL expression .)
    COMMA           reduce using rule 14 (expression -> expression MUL expression .)
    STMT_END        reduce using rule 14 (expression -> expression MUL expression .)
    LBRACK          reduce using rule 14 (expression -> expression MUL expression .)
    RPAREN          reduce using rule 14 (expression -> expression MUL expression .)
    COLON           reduce using rule 14 (expression -> expression MUL expression .)
    RBRACK          reduce using rule 14 (expression -> expression MUL expression .)
    ARROW_LTR       reduce using rule 14 (expression -> expression MUL expression .)
    ARROW_RTL       reduce using rule 14 (expression -> expression MUL expression .)
    EXP             shift and go to state 43
    MOD             shift and go to state 44

  ! EXP             [ reduce using rule 14 (expression -> expression MUL expression .) ]
  ! MOD             [ reduce using rule 14 (expression -> expression MUL expression .) ]
  ! PLUS            [ shift and go to state 39 ]
  ! MINUS           [ shift and go to state 40 ]
  ! MUL             [ shift and go to state 41 ]
  ! DIV             [ shift and go to state 42 ]
  ! BIT_AND         [ shift and go to state 45 ]
  ! BIT_OR          [ shift and go to state 46 ]
  ! BIT_XOR         [ shift and go to state 47 ]
  ! LSHIFT          [ shift and go to state 48 ]
  ! RSHIFT          [ shift and go to state 49 ]
  ! QUESTION_MARK   [ shift and go to state 50 ]
  ! IN              [ shift and go to state 51 ]
  ! NOT             [ shift and go to state 52 ]
  ! EQ              [ shift and go to state 53 ]
  ! NEQ             [ shift and go to state 54 ]
  ! GT              [ shift and go to state 55 ]
  ! GTE             [ shift and go to state 56 ]
  ! LT              [ shift and go to state 57 ]
  ! LTE             [ shift and go to state 58 ]
  ! AND             [ shift and go to state 59 ]
  ! OR              [ shift and go to state 60 ]


state 93

    (15) expression -> expression DIV expression .
    (12) expression -> expression . PLUS expression
    (13) expression -> expression . MINUS expression
    (14) expression -> expression . MUL expression
    (15) expression -> expression . DIV expression
    (16) expression -> expression . EXP expression
    (17) expression -> expression . MOD expression
    (18) expression -> expression . BIT_AND expression
    (19) expression -> expression . BIT_OR expression
    (20) expression -> expression . BIT_XOR expression
    (21) expression -> expression . LSHIFT expression
    (22) expression -> expression . RSHIFT expression
    (43) expression -> expression . QUESTION_MARK expression COLON expression
    (55) expression -> expression . IN expression
    (56) expression -> expression . NOT IN expression
    (23) boolean -> expression . EQ expression
    (24) boolean -> expression . NEQ expression
    (25) boolean -> expression . GT expression
    (26) boolean -> expression . GTE expression
    (27) boolean -> expression . LT expression
    (28) boolean -> expression . LTE expression
    (29) boolean -> expression . AND expression
    (30) boolean -> expression . OR expression

    PLUS            reduce using rule 15 (expression -> expression DIV expression .)
    MINUS           reduce using rule 15 (expression -> expression DIV expression .)
    MUL             reduce using rule 15 (expression -> expression DIV expression .)
    DIV             reduce using rule 15 (expression -> expression DIV expression .)
    BIT_AND         reduce using rule 15 (expression -> expression DIV expression .)
    BIT_OR          reduce using rule 15 (expression -> expression DIV expression .)
    BIT_XOR         reduce using rule 15 (expression -> expression DIV expression .)
    LSHIFT          reduce using rule 15 (expression -> expression DIV expression .)
    RSHIFT          reduce using rule 15 (expression -> expression DIV expression .)
    QUESTION_MARK   reduce using rule 15 (expression -> expression DIV expression .)
    IN              reduce using rule 15 (expression -> expression DIV expression .)
    NOT             reduce using rule 15 (expression -> expression DIV expression .)
    EQ              reduce using rule 15 (expression -> expression DIV expression .)
    NEQ             reduce using rule 15 (expression -> expression DIV expression .)
    GT              reduce using rule 15 (expression -> expression DIV expression .)
    GTE             reduce using rule 15 (expression -> expression DIV expression .)
    LT              reduce using rule 15 (expression -> expression DIV expression .)
    LTE             reduce using rule 15 (expression -> expression DIV expression .)
    AND             reduce using rule 15 (expression -> expression DIV expression .)
    OR              reduce using rule 15 (expression -> expression DIV expression .)
    EXIT            reduce using rule 15 (expression -> expression DIV expression .)
    PRINT           reduce using rule 15 (expression -> expression DIV expression .)
    FOR             reduce using rule 15 (expression -> expression DIV expression .)
    WHILE           reduce using rule 15 (expression -> expression DIV expression .)
    FUNCTION        reduce using rule 15 (expression -> expression DIV expression .)
    RETURN          reduce using rule 15 (expression -> expression DIV expression .)
    IDENTIFIER      reduce using rule 15 (expression -> expression DIV expression .)
    BIT_NEG         reduce using rule 15 (expression -> expression DIV expression .)
    LPAREN          reduce using rule 15 (expression -> expression DIV expression .)
    LSQBRACK        reduce using rule 15 (expression -> expression DIV expression .)
    STRING          reduce using rule 15 (expression -> expression DIV expression .)
    IF              reduce using rule 15 (expression -> expression DIV expression .)
    NUM_INT         reduce using rule 15 (expression -> expression DIV expression .)
    NUM_FLOAT       reduce using rule 15 (expression -> expression DIV expression .)
    TRUE            reduce using rule 15 (expression -> expression DIV expression .)
    FALSE           reduce using rule 15 (expression -> expression DIV expression .)
    $end            reduce using rule 15 (expression -> expression DIV expression .)
    RSQBRACK        reduce using rule 15 (expression -> expression DIV expression .)
    COMMA           reduce using rule 15 (expression -> expression DIV expression .)
    STMT_END        reduce using rule 15 (expression -> expression DIV expression .)
    LBRACK          reduce using rule 15 (expression -> expression DIV expression .)
    RPAREN          reduce using rule 15 (expression -> expression DIV expression .)
    COLON           reduce using rule 15 (expression -> expression DIV expression .)
    RBRACK          reduce using rule 15 (expression -> expression DIV expression .)
    ARROW_LTR       reduce using rule 15 (expression -> expression DIV expression .)
    ARROW_RTL       reduce using rule 15 (expression -> expression DIV expression .)
    EXP             shift and go to state 43
    MOD             shift and go to state 44

  ! EXP             [ reduce using rule 15 (expression -> expression DIV expression .) ]
  ! MOD             [ reduce using rule 15 (expression -> expression DIV expression .) ]
  ! PLUS            [ shift and go to state 39 ]
  ! MINUS           [ shift and go to state 40 ]
  ! MUL             [ shift and go to state 41 ]
  ! DIV             [ shift and go to state 42 ]
  ! BIT_AND         [ shift and go to state 45 ]
  ! BIT_OR          [ shift and go to state 46 ]
  ! BIT_XOR         [ shift and go to state 47 ]
  ! LSHIFT          [ shift and go to state 48 ]
  ! RSHIFT          [ shift and go to state 49 ]
  ! QUESTION_MARK   [ shift and go to state 50 ]
  ! IN              [ shift and go to state 51 ]
  ! NOT             [ shift and go to state 52 ]
  ! EQ              [ shift and go to state 53 ]
  ! NEQ             [ shift and go to state 54 ]
  ! GT              [ shift and go to state 55 ]
  ! GTE             [ shift and go to state 56 ]
  ! LT              [ shift and go to state 57 ]
  ! LTE             [ shift and go to state 58 ]
  ! AND             [ shift and go to state 59 ]
  ! OR              [ shift and go to state 60 ]


state 94

    (16) expression -> expression EXP expression .
    (12) expression -> expression . PLUS expression
    (13) expression -> expression . MINUS expression
    (14) expression -> expression . MUL expression
    (15) expression -> expression . DIV expression
    (16) expression -> expression . EXP expression
    (17) expression -> expression . MOD expression
    (18) expression -> expression . BIT_AND expression
    (19) expression -> expression . BIT_OR expression
    (20) expression -> expression . BIT_XOR expression
    (21) expression -> expression . LSHIFT expression
    (22) expression -> expression . RSHIFT expression
    (43) expression -> expression . QUESTION_MARK expression COLON expression
    (55) expression -> expression . IN expression
    (56) expression -> expression . NOT IN expression
    (23) boolean -> expression . EQ expression
    (24) boolean -> expression . NEQ expression
    (25) boolean -> expression . GT expression
    (26) boolean -> expression . GTE expression
    (27) boolean -> expression . LT expression
    (28) boolean -> expression . LTE expression
    (29) boolean -> expression . AND expression
    (30) boolean -> expression . OR expression

    PLUS            reduce using rule 16 (expression -> expression EXP expression .)
    MINUS           reduce using rule 16 (expression -> expression EXP expression .)
    MUL             reduce using rule 16 (expression -> expression EXP expression .)
    DIV             reduce using rule 16 (expression -> expression EXP expression .)
    EXP             reduce using rule 16 (expression -> expression EXP expression .)
    MOD             reduce using rule 16 (expression -> expression EXP expression .)
    BIT_AND         reduce using rule 16 (expression -> expression EXP expression .)
    BIT_OR          reduce using rule 16 (expression -> expression EXP expression .)
    BIT_XOR         reduce using rule 16 (expression -> expression EXP expression .)
    LSHIFT          reduce using rule 16 (expression -> expression EXP expression .)
    RSHIFT          reduce using rule 16 (expression -> expression EXP expression .)
    QUESTION_MARK   reduce using rule 16 (expression -> expression EXP expression .)
    IN              reduce using rule 16 (expression -> expression EXP expression .)
    NOT             reduce using rule 16 (expression -> expression EXP expression .)
    EQ              reduce using rule 16 (expression -> expression EXP expression .)
    NEQ             reduce using rule 16 (expression -> expression EXP expression .)
    GT              reduce using rule 16 (expression -> expression EXP expression .)
    GTE             reduce using rule 16 (expression -> expression EXP expression .)
    LT              reduce using rule 16 (expression -> expression EXP expression .)
    LTE             reduce using rule 16 (expression -> expression EXP expression .)
    AND             reduce using rule 16 (expression -> expression EXP expression .)
    OR              reduce using rule 16 (expression -> expression EXP expression .)
    EXIT            reduce using rule 16 (expression -> expression EXP expression .)
    PRINT           reduce using rule 16 (expression -> expression EXP expression .)
    FOR             reduce using rule 16 (expression -> expression EXP expression .)
    WHILE           reduce using rule 16 (expression -> expression EXP expression .)
    FUNCTION        reduce using rule 16 (expression -> expression EXP expression .)
    RETURN          reduce using rule 16 (expression -> expression EXP expression .)
    IDENTIFIER      reduce using rule 16 (expression -> expression EXP expression .)
    BIT_NEG         reduce using rule 16 (expression -> expression EXP expression .)
    LPAREN          reduce using rule 16 (expression -> expression EXP expression .)
    LSQBRACK        reduce using rule 16 (expression -> expression EXP expression .)
    STRING          reduce using rule 16 (expression -> expression EXP expression .)
    IF              reduce using rule 16 (expression -> expression EXP expression .)
    NUM_INT         reduce using rule 16 (expression -> expression EXP expression .)
    NUM_FLOAT       reduce using rule 16 (expression -> expression EXP expression .)
    TRUE            reduce using rule 16 (expression -> expression EXP expression .)
    FALSE           reduce using rule 16 (expression -> expression EXP expression .)
    $end            reduce using rule 16 (expression -> expression EXP expression .)
    RSQBRACK        reduce using rule 16 (expression -> expression EXP expression .)
    COMMA           reduce using rule 16 (expression -> expression EXP expression .)
    STMT_END        reduce using rule 16 (expression -> expression EXP expression .)
    LBRACK          reduce using rule 16 (expression -> expression EXP expression .)
    RPAREN          reduce using rule 16 (expression -> expression EXP expression .)
    COLON           reduce using rule 16 (expression -> expression EXP expression .)
    RBRACK          reduce using rule 16 (expression -> expression EXP expression .)
    ARROW_LTR       reduce using rule 16 (expression -> expression EXP expression .)
    ARROW_RTL       reduce using rule 16 (expression -> expression EXP expression .)

  ! PLUS            [ shift and go to state 39 ]
  ! MINUS           [ shift and go to state 40 ]
  ! MUL             [ shift and go to state 41 ]
  ! DIV             [ shift and go to state 42 ]
  ! EXP             [ shift and go to state 43 ]
  ! MOD             [ shift and go to state 44 ]
  ! BIT_AND         [ shift and go to state 45 ]
  ! BIT_OR          [ shift and go to state 46 ]
  ! BIT_XOR         [ shift and go to state 47 ]
  ! LSHIFT          [ shift and go to state 48 ]
  ! RSHIFT          [ shift and go to state 49 ]
  ! QUESTION_MARK   [ shift and go to state 50 ]
  ! IN              [ shift and go to state 51 ]
  ! NOT             [ shift and go to state 52 ]
  ! EQ              [ shift and go to state 53 ]
  ! NEQ             [ shift and go to state 54 ]
  ! GT              [ shift and go to state 55 ]
  ! GTE             [ shift and go to state 56 ]
  ! LT              [ shift and go to state 57 ]
  ! LTE             [ shift and go to state 58 ]
  ! AND             [ shift and go to state 59 ]
  ! OR              [ shift and go to state 60 ]


state 95

    (17) expression -> expression MOD expression .
    (12) expression -> expression . PLUS expression
    (13) expression -> expression . MINUS expression
    (14) expression -> expression . MUL expression
    (15) expression -> expression . DIV expression
    (16) expression -> expression . EXP expression
    (17) expression -> expression . MOD expression
    (18) expression -> expression . BIT_AND expression
    (19) expression -> expression . BIT_OR expression
    (20) expression -> expression . BIT_XOR expression
    (21) expression -> expression . LSHIFT expression
    (22) expression -> expression . RSHIFT expression
    (43) expression -> expression . QUESTION_MARK expression COLON expression
    (55) expression -> expression . IN expression
    (56) expression -> expression . NOT IN expression
    (23) boolean -> expression . EQ expression
    (24) boolean -> expression . NEQ expression
    (25) boolean -> expression . GT expression
    (26) boolean -> expression . GTE expression
    (27) boolean -> expression . LT expression
    (28) boolean -> expression . LTE expression
    (29) boolean -> expression . AND expression
    (30) boolean -> expression . OR expression

    PLUS            reduce using rule 17 (expression -> expression MOD expression .)
    MINUS           reduce using rule 17 (expression -> expression MOD expression .)
    MUL             reduce using rule 17 (expression -> expression MOD expression .)
    DIV             reduce using rule 17 (expression -> expression MOD expression .)
    EXP             reduce using rule 17 (expression -> expression MOD expression .)
    MOD             reduce using rule 17 (expression -> expression MOD expression .)
    BIT_AND         reduce using rule 17 (expression -> expression MOD expression .)
    BIT_OR          reduce using rule 17 (expression -> expression MOD expression .)
    BIT_XOR         reduce using rule 17 (expression -> expression MOD expression .)
    LSHIFT          reduce using rule 17 (expression -> expression MOD expression .)
    RSHIFT          reduce using rule 17 (expression -> expression MOD expression .)
    QUESTION_MARK   reduce using rule 17 (expression -> expression MOD expression .)
    IN              reduce using rule 17 (expression -> expression MOD expression .)
    NOT             reduce using rule 17 (expression -> expression MOD expression .)
    EQ              reduce using rule 17 (expression -> expression MOD expression .)
    NEQ             reduce using rule 17 (expression -> expression MOD expression .)
    GT              reduce using rule 17 (expression -> expression MOD expression .)
    GTE             reduce using rule 17 (expression -> expression MOD expression .)
    LT              reduce using rule 17 (expression -> expression MOD expression .)
    LTE             reduce using rule 17 (expression -> expression MOD expression .)
    AND             reduce using rule 17 (expression -> expression MOD expression .)
    OR              reduce using rule 17 (expression -> expression MOD expression .)
    EXIT            reduce using rule 17 (expression -> expression MOD expression .)
    PRINT           reduce using rule 17 (expression -> expression MOD expression .)
    FOR             reduce using rule 17 (expression -> expression MOD expression .)
    WHILE           reduce using rule 17 (expression -> expression MOD expression .)
    FUNCTION        reduce using rule 17 (expression -> expression MOD expression .)
    RETURN          reduce using rule 17 (expression -> expression MOD expression .)
    IDENTIFIER      reduce using rule 17 (expression -> expression MOD expression .)
    BIT_NEG         reduce using rule 17 (expression -> expression MOD expression .)
    LPAREN          reduce using rule 17 (expression -> expression MOD expression .)
    LSQBRACK        reduce using rule 17 (expression -> expression MOD expression .)
    STRING          reduce using rule 17 (expression -> expression MOD expression .)
    IF              reduce using rule 17 (expression -> expression MOD expression .)
    NUM_INT         reduce using rule 17 (expression -> expression MOD expression .)
    NUM_FLOAT       reduce using rule 17 (expression -> expression MOD expression .)
    TRUE            reduce using rule 17 (expression -> expression MOD expression .)
    FALSE           reduce using rule 17 (expression -> expression MOD expression .)
    $end            reduce using rule 17 (expression -> expression MOD expression .)
    RSQBRACK        reduce using rule 17 (expression -> expression MOD expression .)
    COMMA           reduce using rule 17 (expression -> expression MOD expression .)
    STMT_END        reduce using rule 17 (expression -> expression MOD expression .)
    LBRACK          reduce using rule 17 (expression -> expression MOD expression .)
    RPAREN          reduce using rule 17 (expression -> expression MOD expression .)
    COLON           reduce using rule 17 (expression -> expression MOD expression .)
    RBRACK          reduce using rule 17 (expression -> expression MOD expression .)
    ARROW_LTR       reduce using rule 17 (expression -> expression MOD expression .)
    ARROW_RTL       reduce using rule 17 (expression -> expression MOD expression .)

  ! PLUS            [ shift and go to state 39 ]
  ! MINUS           [ shift and go to state 40 ]
  ! MUL             [ shift and go to state 41 ]
  ! DIV             [ shift and go to state 42 ]
  ! EXP             [ shift and go to state 43 ]
  ! MOD             [ shift and go to state 44 ]
  ! BIT_AND         [ shift and go to state 45 ]
  ! BIT_OR          [ shift and go to state 46 ]
  ! BIT_XOR         [ shift and go to state 47 ]
  ! LSHIFT          [ shift and go to state 48 ]
  ! RSHIFT          [ shift and go to state 49 ]
  ! QUESTION_MARK   [ shift and go to state 50 ]
  ! IN              [ shift and go to state 51 ]
  ! NOT             [ shift and go to state 52 ]
  ! EQ              [ shift and go to state 53 ]
  ! NEQ             [ shift and go to state 54 ]
  ! GT              [ shift and go to state 55 ]
  ! GTE             [ shift and go to state 56 ]
  ! LT              [ shift and go to state 57 ]
  ! LTE             [ shift and go to state 58 ]
  ! AND             [ shift and go to state 59 ]
  ! OR              [ shift and go to state 60 ]


state 96

    (18) expression -> expression BIT_AND expression .
    (12) expression -> expression . PLUS expression
    (13) expression -> expression . MINUS expression
    (14) expression -> expression . MUL expression
    (15) expression -> expression . DIV expression
    (16) expression -> expression . EXP expression
    (17) expression -> expression . MOD expression
    (18) expression -> expression . BIT_AND expression
    (19) expression -> expression . BIT_OR expression
    (20) expression -> expression . BIT_XOR expression
    (21) expression -> expression . LSHIFT expression
    (22) expression -> expression . RSHIFT expression
    (43) expression -> expression . QUESTION_MARK expression COLON expression
    (55) expression -> expression . IN expression
    (56) expression -> expression . NOT IN expression
    (23) boolean -> expression . EQ expression
    (24) boolean -> expression . NEQ expression
    (25) boolean -> expression . GT expression
    (26) boolean -> expression . GTE expression
    (27) boolean -> expression . LT expression
    (28) boolean -> expression . LTE expression
    (29) boolean -> expression . AND expression
    (30) boolean -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for BIT_AND resolved as shift
  ! shift/reduce conflict for BIT_OR resolved as shift
  ! shift/reduce conflict for BIT_XOR resolved as shift
  ! shift/reduce conflict for LSHIFT resolved as shift
  ! shift/reduce conflict for RSHIFT resolved as shift
  ! shift/reduce conflict for QUESTION_MARK resolved as shift
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    EXIT            reduce using rule 18 (expression -> expression BIT_AND expression .)
    PRINT           reduce using rule 18 (expression -> expression BIT_AND expression .)
    FOR             reduce using rule 18 (expression -> expression BIT_AND expression .)
    WHILE           reduce using rule 18 (expression -> expression BIT_AND expression .)
    FUNCTION        reduce using rule 18 (expression -> expression BIT_AND expression .)
    RETURN          reduce using rule 18 (expression -> expression BIT_AND expression .)
    IDENTIFIER      reduce using rule 18 (expression -> expression BIT_AND expression .)
    BIT_NEG         reduce using rule 18 (expression -> expression BIT_AND expression .)
    LPAREN          reduce using rule 18 (expression -> expression BIT_AND expression .)
    LSQBRACK        reduce using rule 18 (expression -> expression BIT_AND expression .)
    STRING          reduce using rule 18 (expression -> expression BIT_AND expression .)
    IF              reduce using rule 18 (expression -> expression BIT_AND expression .)
    NUM_INT         reduce using rule 18 (expression -> expression BIT_AND expression .)
    NUM_FLOAT       reduce using rule 18 (expression -> expression BIT_AND expression .)
    TRUE            reduce using rule 18 (expression -> expression BIT_AND expression .)
    FALSE           reduce using rule 18 (expression -> expression BIT_AND expression .)
    $end            reduce using rule 18 (expression -> expression BIT_AND expression .)
    RSQBRACK        reduce using rule 18 (expression -> expression BIT_AND expression .)
    COMMA           reduce using rule 18 (expression -> expression BIT_AND expression .)
    STMT_END        reduce using rule 18 (expression -> expression BIT_AND expression .)
    LBRACK          reduce using rule 18 (expression -> expression BIT_AND expression .)
    RPAREN          reduce using rule 18 (expression -> expression BIT_AND expression .)
    COLON           reduce using rule 18 (expression -> expression BIT_AND expression .)
    RBRACK          reduce using rule 18 (expression -> expression BIT_AND expression .)
    ARROW_LTR       reduce using rule 18 (expression -> expression BIT_AND expression .)
    ARROW_RTL       reduce using rule 18 (expression -> expression BIT_AND expression .)
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    MUL             shift and go to state 41
    DIV             shift and go to state 42
    EXP             shift and go to state 43
    MOD             shift and go to state 44
    BIT_AND         shift and go to state 45
    BIT_OR          shift and go to state 46
    BIT_XOR         shift and go to state 47
    LSHIFT          shift and go to state 48
    RSHIFT          shift and go to state 49
    QUESTION_MARK   shift and go to state 50
    IN              shift and go to state 51
    NOT             shift and go to state 52
    EQ              shift and go to state 53
    NEQ             shift and go to state 54
    GT              shift and go to state 55
    GTE             shift and go to state 56
    LT              shift and go to state 57
    LTE             shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60

  ! PLUS            [ reduce using rule 18 (expression -> expression BIT_AND expression .) ]
  ! MINUS           [ reduce using rule 18 (expression -> expression BIT_AND expression .) ]
  ! MUL             [ reduce using rule 18 (expression -> expression BIT_AND expression .) ]
  ! DIV             [ reduce using rule 18 (expression -> expression BIT_AND expression .) ]
  ! EXP             [ reduce using rule 18 (expression -> expression BIT_AND expression .) ]
  ! MOD             [ reduce using rule 18 (expression -> expression BIT_AND expression .) ]
  ! BIT_AND         [ reduce using rule 18 (expression -> expression BIT_AND expression .) ]
  ! BIT_OR          [ reduce using rule 18 (expression -> expression BIT_AND expression .) ]
  ! BIT_XOR         [ reduce using rule 18 (expression -> expression BIT_AND expression .) ]
  ! LSHIFT          [ reduce using rule 18 (expression -> expression BIT_AND expression .) ]
  ! RSHIFT          [ reduce using rule 18 (expression -> expression BIT_AND expression .) ]
  ! QUESTION_MARK   [ reduce using rule 18 (expression -> expression BIT_AND expression .) ]
  ! IN              [ reduce using rule 18 (expression -> expression BIT_AND expression .) ]
  ! NOT             [ reduce using rule 18 (expression -> expression BIT_AND expression .) ]
  ! EQ              [ reduce using rule 18 (expression -> expression BIT_AND expression .) ]
  ! NEQ             [ reduce using rule 18 (expression -> expression BIT_AND expression .) ]
  ! GT              [ reduce using rule 18 (expression -> expression BIT_AND expression .) ]
  ! GTE             [ reduce using rule 18 (expression -> expression BIT_AND expression .) ]
  ! LT              [ reduce using rule 18 (expression -> expression BIT_AND expression .) ]
  ! LTE             [ reduce using rule 18 (expression -> expression BIT_AND expression .) ]
  ! AND             [ reduce using rule 18 (expression -> expression BIT_AND expression .) ]
  ! OR              [ reduce using rule 18 (expression -> expression BIT_AND expression .) ]


state 97

    (19) expression -> expression BIT_OR expression .
    (12) expression -> expression . PLUS expression
    (13) expression -> expression . MINUS expression
    (14) expression -> expression . MUL expression
    (15) expression -> expression . DIV expression
    (16) expression -> expression . EXP expression
    (17) expression -> expression . MOD expression
    (18) expression -> expression . BIT_AND expression
    (19) expression -> expression . BIT_OR expression
    (20) expression -> expression . BIT_XOR expression
    (21) expression -> expression . LSHIFT expression
    (22) expression -> expression . RSHIFT expression
    (43) expression -> expression . QUESTION_MARK expression COLON expression
    (55) expression -> expression . IN expression
    (56) expression -> expression . NOT IN expression
    (23) boolean -> expression . EQ expression
    (24) boolean -> expression . NEQ expression
    (25) boolean -> expression . GT expression
    (26) boolean -> expression . GTE expression
    (27) boolean -> expression . LT expression
    (28) boolean -> expression . LTE expression
    (29) boolean -> expression . AND expression
    (30) boolean -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for BIT_AND resolved as shift
  ! shift/reduce conflict for BIT_OR resolved as shift
  ! shift/reduce conflict for BIT_XOR resolved as shift
  ! shift/reduce conflict for LSHIFT resolved as shift
  ! shift/reduce conflict for RSHIFT resolved as shift
  ! shift/reduce conflict for QUESTION_MARK resolved as shift
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    EXIT            reduce using rule 19 (expression -> expression BIT_OR expression .)
    PRINT           reduce using rule 19 (expression -> expression BIT_OR expression .)
    FOR             reduce using rule 19 (expression -> expression BIT_OR expression .)
    WHILE           reduce using rule 19 (expression -> expression BIT_OR expression .)
    FUNCTION        reduce using rule 19 (expression -> expression BIT_OR expression .)
    RETURN          reduce using rule 19 (expression -> expression BIT_OR expression .)
    IDENTIFIER      reduce using rule 19 (expression -> expression BIT_OR expression .)
    BIT_NEG         reduce using rule 19 (expression -> expression BIT_OR expression .)
    LPAREN          reduce using rule 19 (expression -> expression BIT_OR expression .)
    LSQBRACK        reduce using rule 19 (expression -> expression BIT_OR expression .)
    STRING          reduce using rule 19 (expression -> expression BIT_OR expression .)
    IF              reduce using rule 19 (expression -> expression BIT_OR expression .)
    NUM_INT         reduce using rule 19 (expression -> expression BIT_OR expression .)
    NUM_FLOAT       reduce using rule 19 (expression -> expression BIT_OR expression .)
    TRUE            reduce using rule 19 (expression -> expression BIT_OR expression .)
    FALSE           reduce using rule 19 (expression -> expression BIT_OR expression .)
    $end            reduce using rule 19 (expression -> expression BIT_OR expression .)
    RSQBRACK        reduce using rule 19 (expression -> expression BIT_OR expression .)
    COMMA           reduce using rule 19 (expression -> expression BIT_OR expression .)
    STMT_END        reduce using rule 19 (expression -> expression BIT_OR expression .)
    LBRACK          reduce using rule 19 (expression -> expression BIT_OR expression .)
    RPAREN          reduce using rule 19 (expression -> expression BIT_OR expression .)
    COLON           reduce using rule 19 (expression -> expression BIT_OR expression .)
    RBRACK          reduce using rule 19 (expression -> expression BIT_OR expression .)
    ARROW_LTR       reduce using rule 19 (expression -> expression BIT_OR expression .)
    ARROW_RTL       reduce using rule 19 (expression -> expression BIT_OR expression .)
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    MUL             shift and go to state 41
    DIV             shift and go to state 42
    EXP             shift and go to state 43
    MOD             shift and go to state 44
    BIT_AND         shift and go to state 45
    BIT_OR          shift and go to state 46
    BIT_XOR         shift and go to state 47
    LSHIFT          shift and go to state 48
    RSHIFT          shift and go to state 49
    QUESTION_MARK   shift and go to state 50
    IN              shift and go to state 51
    NOT             shift and go to state 52
    EQ              shift and go to state 53
    NEQ             shift and go to state 54
    GT              shift and go to state 55
    GTE             shift and go to state 56
    LT              shift and go to state 57
    LTE             shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60

  ! PLUS            [ reduce using rule 19 (expression -> expression BIT_OR expression .) ]
  ! MINUS           [ reduce using rule 19 (expression -> expression BIT_OR expression .) ]
  ! MUL             [ reduce using rule 19 (expression -> expression BIT_OR expression .) ]
  ! DIV             [ reduce using rule 19 (expression -> expression BIT_OR expression .) ]
  ! EXP             [ reduce using rule 19 (expression -> expression BIT_OR expression .) ]
  ! MOD             [ reduce using rule 19 (expression -> expression BIT_OR expression .) ]
  ! BIT_AND         [ reduce using rule 19 (expression -> expression BIT_OR expression .) ]
  ! BIT_OR          [ reduce using rule 19 (expression -> expression BIT_OR expression .) ]
  ! BIT_XOR         [ reduce using rule 19 (expression -> expression BIT_OR expression .) ]
  ! LSHIFT          [ reduce using rule 19 (expression -> expression BIT_OR expression .) ]
  ! RSHIFT          [ reduce using rule 19 (expression -> expression BIT_OR expression .) ]
  ! QUESTION_MARK   [ reduce using rule 19 (expression -> expression BIT_OR expression .) ]
  ! IN              [ reduce using rule 19 (expression -> expression BIT_OR expression .) ]
  ! NOT             [ reduce using rule 19 (expression -> expression BIT_OR expression .) ]
  ! EQ              [ reduce using rule 19 (expression -> expression BIT_OR expression .) ]
  ! NEQ             [ reduce using rule 19 (expression -> expression BIT_OR expression .) ]
  ! GT              [ reduce using rule 19 (expression -> expression BIT_OR expression .) ]
  ! GTE             [ reduce using rule 19 (expression -> expression BIT_OR expression .) ]
  ! LT              [ reduce using rule 19 (expression -> expression BIT_OR expression .) ]
  ! LTE             [ reduce using rule 19 (expression -> expression BIT_OR expression .) ]
  ! AND             [ reduce using rule 19 (expression -> expression BIT_OR expression .) ]
  ! OR              [ reduce using rule 19 (expression -> expression BIT_OR expression .) ]


state 98

    (20) expression -> expression BIT_XOR expression .
    (12) expression -> expression . PLUS expression
    (13) expression -> expression . MINUS expression
    (14) expression -> expression . MUL expression
    (15) expression -> expression . DIV expression
    (16) expression -> expression . EXP expression
    (17) expression -> expression . MOD expression
    (18) expression -> expression . BIT_AND expression
    (19) expression -> expression . BIT_OR expression
    (20) expression -> expression . BIT_XOR expression
    (21) expression -> expression . LSHIFT expression
    (22) expression -> expression . RSHIFT expression
    (43) expression -> expression . QUESTION_MARK expression COLON expression
    (55) expression -> expression . IN expression
    (56) expression -> expression . NOT IN expression
    (23) boolean -> expression . EQ expression
    (24) boolean -> expression . NEQ expression
    (25) boolean -> expression . GT expression
    (26) boolean -> expression . GTE expression
    (27) boolean -> expression . LT expression
    (28) boolean -> expression . LTE expression
    (29) boolean -> expression . AND expression
    (30) boolean -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for BIT_AND resolved as shift
  ! shift/reduce conflict for BIT_OR resolved as shift
  ! shift/reduce conflict for BIT_XOR resolved as shift
  ! shift/reduce conflict for LSHIFT resolved as shift
  ! shift/reduce conflict for RSHIFT resolved as shift
  ! shift/reduce conflict for QUESTION_MARK resolved as shift
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    EXIT            reduce using rule 20 (expression -> expression BIT_XOR expression .)
    PRINT           reduce using rule 20 (expression -> expression BIT_XOR expression .)
    FOR             reduce using rule 20 (expression -> expression BIT_XOR expression .)
    WHILE           reduce using rule 20 (expression -> expression BIT_XOR expression .)
    FUNCTION        reduce using rule 20 (expression -> expression BIT_XOR expression .)
    RETURN          reduce using rule 20 (expression -> expression BIT_XOR expression .)
    IDENTIFIER      reduce using rule 20 (expression -> expression BIT_XOR expression .)
    BIT_NEG         reduce using rule 20 (expression -> expression BIT_XOR expression .)
    LPAREN          reduce using rule 20 (expression -> expression BIT_XOR expression .)
    LSQBRACK        reduce using rule 20 (expression -> expression BIT_XOR expression .)
    STRING          reduce using rule 20 (expression -> expression BIT_XOR expression .)
    IF              reduce using rule 20 (expression -> expression BIT_XOR expression .)
    NUM_INT         reduce using rule 20 (expression -> expression BIT_XOR expression .)
    NUM_FLOAT       reduce using rule 20 (expression -> expression BIT_XOR expression .)
    TRUE            reduce using rule 20 (expression -> expression BIT_XOR expression .)
    FALSE           reduce using rule 20 (expression -> expression BIT_XOR expression .)
    $end            reduce using rule 20 (expression -> expression BIT_XOR expression .)
    RSQBRACK        reduce using rule 20 (expression -> expression BIT_XOR expression .)
    COMMA           reduce using rule 20 (expression -> expression BIT_XOR expression .)
    STMT_END        reduce using rule 20 (expression -> expression BIT_XOR expression .)
    LBRACK          reduce using rule 20 (expression -> expression BIT_XOR expression .)
    RPAREN          reduce using rule 20 (expression -> expression BIT_XOR expression .)
    COLON           reduce using rule 20 (expression -> expression BIT_XOR expression .)
    RBRACK          reduce using rule 20 (expression -> expression BIT_XOR expression .)
    ARROW_LTR       reduce using rule 20 (expression -> expression BIT_XOR expression .)
    ARROW_RTL       reduce using rule 20 (expression -> expression BIT_XOR expression .)
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    MUL             shift and go to state 41
    DIV             shift and go to state 42
    EXP             shift and go to state 43
    MOD             shift and go to state 44
    BIT_AND         shift and go to state 45
    BIT_OR          shift and go to state 46
    BIT_XOR         shift and go to state 47
    LSHIFT          shift and go to state 48
    RSHIFT          shift and go to state 49
    QUESTION_MARK   shift and go to state 50
    IN              shift and go to state 51
    NOT             shift and go to state 52
    EQ              shift and go to state 53
    NEQ             shift and go to state 54
    GT              shift and go to state 55
    GTE             shift and go to state 56
    LT              shift and go to state 57
    LTE             shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60

  ! PLUS            [ reduce using rule 20 (expression -> expression BIT_XOR expression .) ]
  ! MINUS           [ reduce using rule 20 (expression -> expression BIT_XOR expression .) ]
  ! MUL             [ reduce using rule 20 (expression -> expression BIT_XOR expression .) ]
  ! DIV             [ reduce using rule 20 (expression -> expression BIT_XOR expression .) ]
  ! EXP             [ reduce using rule 20 (expression -> expression BIT_XOR expression .) ]
  ! MOD             [ reduce using rule 20 (expression -> expression BIT_XOR expression .) ]
  ! BIT_AND         [ reduce using rule 20 (expression -> expression BIT_XOR expression .) ]
  ! BIT_OR          [ reduce using rule 20 (expression -> expression BIT_XOR expression .) ]
  ! BIT_XOR         [ reduce using rule 20 (expression -> expression BIT_XOR expression .) ]
  ! LSHIFT          [ reduce using rule 20 (expression -> expression BIT_XOR expression .) ]
  ! RSHIFT          [ reduce using rule 20 (expression -> expression BIT_XOR expression .) ]
  ! QUESTION_MARK   [ reduce using rule 20 (expression -> expression BIT_XOR expression .) ]
  ! IN              [ reduce using rule 20 (expression -> expression BIT_XOR expression .) ]
  ! NOT             [ reduce using rule 20 (expression -> expression BIT_XOR expression .) ]
  ! EQ              [ reduce using rule 20 (expression -> expression BIT_XOR expression .) ]
  ! NEQ             [ reduce using rule 20 (expression -> expression BIT_XOR expression .) ]
  ! GT              [ reduce using rule 20 (expression -> expression BIT_XOR expression .) ]
  ! GTE             [ reduce using rule 20 (expression -> expression BIT_XOR expression .) ]
  ! LT              [ reduce using rule 20 (expression -> expression BIT_XOR expression .) ]
  ! LTE             [ reduce using rule 20 (expression -> expression BIT_XOR expression .) ]
  ! AND             [ reduce using rule 20 (expression -> expression BIT_XOR expression .) ]
  ! OR              [ reduce using rule 20 (expression -> expression BIT_XOR expression .) ]


state 99

    (21) expression -> expression LSHIFT expression .
    (12) expression -> expression . PLUS expression
    (13) expression -> expression . MINUS expression
    (14) expression -> expression . MUL expression
    (15) expression -> expression . DIV expression
    (16) expression -> expression . EXP expression
    (17) expression -> expression . MOD expression
    (18) expression -> expression . BIT_AND expression
    (19) expression -> expression . BIT_OR expression
    (20) expression -> expression . BIT_XOR expression
    (21) expression -> expression . LSHIFT expression
    (22) expression -> expression . RSHIFT expression
    (43) expression -> expression . QUESTION_MARK expression COLON expression
    (55) expression -> expression . IN expression
    (56) expression -> expression . NOT IN expression
    (23) boolean -> expression . EQ expression
    (24) boolean -> expression . NEQ expression
    (25) boolean -> expression . GT expression
    (26) boolean -> expression . GTE expression
    (27) boolean -> expression . LT expression
    (28) boolean -> expression . LTE expression
    (29) boolean -> expression . AND expression
    (30) boolean -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for BIT_AND resolved as shift
  ! shift/reduce conflict for BIT_OR resolved as shift
  ! shift/reduce conflict for BIT_XOR resolved as shift
  ! shift/reduce conflict for LSHIFT resolved as shift
  ! shift/reduce conflict for RSHIFT resolved as shift
  ! shift/reduce conflict for QUESTION_MARK resolved as shift
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    EXIT            reduce using rule 21 (expression -> expression LSHIFT expression .)
    PRINT           reduce using rule 21 (expression -> expression LSHIFT expression .)
    FOR             reduce using rule 21 (expression -> expression LSHIFT expression .)
    WHILE           reduce using rule 21 (expression -> expression LSHIFT expression .)
    FUNCTION        reduce using rule 21 (expression -> expression LSHIFT expression .)
    RETURN          reduce using rule 21 (expression -> expression LSHIFT expression .)
    IDENTIFIER      reduce using rule 21 (expression -> expression LSHIFT expression .)
    BIT_NEG         reduce using rule 21 (expression -> expression LSHIFT expression .)
    LPAREN          reduce using rule 21 (expression -> expression LSHIFT expression .)
    LSQBRACK        reduce using rule 21 (expression -> expression LSHIFT expression .)
    STRING          reduce using rule 21 (expression -> expression LSHIFT expression .)
    IF              reduce using rule 21 (expression -> expression LSHIFT expression .)
    NUM_INT         reduce using rule 21 (expression -> expression LSHIFT expression .)
    NUM_FLOAT       reduce using rule 21 (expression -> expression LSHIFT expression .)
    TRUE            reduce using rule 21 (expression -> expression LSHIFT expression .)
    FALSE           reduce using rule 21 (expression -> expression LSHIFT expression .)
    $end            reduce using rule 21 (expression -> expression LSHIFT expression .)
    RSQBRACK        reduce using rule 21 (expression -> expression LSHIFT expression .)
    COMMA           reduce using rule 21 (expression -> expression LSHIFT expression .)
    STMT_END        reduce using rule 21 (expression -> expression LSHIFT expression .)
    LBRACK          reduce using rule 21 (expression -> expression LSHIFT expression .)
    RPAREN          reduce using rule 21 (expression -> expression LSHIFT expression .)
    COLON           reduce using rule 21 (expression -> expression LSHIFT expression .)
    RBRACK          reduce using rule 21 (expression -> expression LSHIFT expression .)
    ARROW_LTR       reduce using rule 21 (expression -> expression LSHIFT expression .)
    ARROW_RTL       reduce using rule 21 (expression -> expression LSHIFT expression .)
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    MUL             shift and go to state 41
    DIV             shift and go to state 42
    EXP             shift and go to state 43
    MOD             shift and go to state 44
    BIT_AND         shift and go to state 45
    BIT_OR          shift and go to state 46
    BIT_XOR         shift and go to state 47
    LSHIFT          shift and go to state 48
    RSHIFT          shift and go to state 49
    QUESTION_MARK   shift and go to state 50
    IN              shift and go to state 51
    NOT             shift and go to state 52
    EQ              shift and go to state 53
    NEQ             shift and go to state 54
    GT              shift and go to state 55
    GTE             shift and go to state 56
    LT              shift and go to state 57
    LTE             shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60

  ! PLUS            [ reduce using rule 21 (expression -> expression LSHIFT expression .) ]
  ! MINUS           [ reduce using rule 21 (expression -> expression LSHIFT expression .) ]
  ! MUL             [ reduce using rule 21 (expression -> expression LSHIFT expression .) ]
  ! DIV             [ reduce using rule 21 (expression -> expression LSHIFT expression .) ]
  ! EXP             [ reduce using rule 21 (expression -> expression LSHIFT expression .) ]
  ! MOD             [ reduce using rule 21 (expression -> expression LSHIFT expression .) ]
  ! BIT_AND         [ reduce using rule 21 (expression -> expression LSHIFT expression .) ]
  ! BIT_OR          [ reduce using rule 21 (expression -> expression LSHIFT expression .) ]
  ! BIT_XOR         [ reduce using rule 21 (expression -> expression LSHIFT expression .) ]
  ! LSHIFT          [ reduce using rule 21 (expression -> expression LSHIFT expression .) ]
  ! RSHIFT          [ reduce using rule 21 (expression -> expression LSHIFT expression .) ]
  ! QUESTION_MARK   [ reduce using rule 21 (expression -> expression LSHIFT expression .) ]
  ! IN              [ reduce using rule 21 (expression -> expression LSHIFT expression .) ]
  ! NOT             [ reduce using rule 21 (expression -> expression LSHIFT expression .) ]
  ! EQ              [ reduce using rule 21 (expression -> expression LSHIFT expression .) ]
  ! NEQ             [ reduce using rule 21 (expression -> expression LSHIFT expression .) ]
  ! GT              [ reduce using rule 21 (expression -> expression LSHIFT expression .) ]
  ! GTE             [ reduce using rule 21 (expression -> expression LSHIFT expression .) ]
  ! LT              [ reduce using rule 21 (expression -> expression LSHIFT expression .) ]
  ! LTE             [ reduce using rule 21 (expression -> expression LSHIFT expression .) ]
  ! AND             [ reduce using rule 21 (expression -> expression LSHIFT expression .) ]
  ! OR              [ reduce using rule 21 (expression -> expression LSHIFT expression .) ]


state 100

    (22) expression -> expression RSHIFT expression .
    (12) expression -> expression . PLUS expression
    (13) expression -> expression . MINUS expression
    (14) expression -> expression . MUL expression
    (15) expression -> expression . DIV expression
    (16) expression -> expression . EXP expression
    (17) expression -> expression . MOD expression
    (18) expression -> expression . BIT_AND expression
    (19) expression -> expression . BIT_OR expression
    (20) expression -> expression . BIT_XOR expression
    (21) expression -> expression . LSHIFT expression
    (22) expression -> expression . RSHIFT expression
    (43) expression -> expression . QUESTION_MARK expression COLON expression
    (55) expression -> expression . IN expression
    (56) expression -> expression . NOT IN expression
    (23) boolean -> expression . EQ expression
    (24) boolean -> expression . NEQ expression
    (25) boolean -> expression . GT expression
    (26) boolean -> expression . GTE expression
    (27) boolean -> expression . LT expression
    (28) boolean -> expression . LTE expression
    (29) boolean -> expression . AND expression
    (30) boolean -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for BIT_AND resolved as shift
  ! shift/reduce conflict for BIT_OR resolved as shift
  ! shift/reduce conflict for BIT_XOR resolved as shift
  ! shift/reduce conflict for LSHIFT resolved as shift
  ! shift/reduce conflict for RSHIFT resolved as shift
  ! shift/reduce conflict for QUESTION_MARK resolved as shift
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    EXIT            reduce using rule 22 (expression -> expression RSHIFT expression .)
    PRINT           reduce using rule 22 (expression -> expression RSHIFT expression .)
    FOR             reduce using rule 22 (expression -> expression RSHIFT expression .)
    WHILE           reduce using rule 22 (expression -> expression RSHIFT expression .)
    FUNCTION        reduce using rule 22 (expression -> expression RSHIFT expression .)
    RETURN          reduce using rule 22 (expression -> expression RSHIFT expression .)
    IDENTIFIER      reduce using rule 22 (expression -> expression RSHIFT expression .)
    BIT_NEG         reduce using rule 22 (expression -> expression RSHIFT expression .)
    LPAREN          reduce using rule 22 (expression -> expression RSHIFT expression .)
    LSQBRACK        reduce using rule 22 (expression -> expression RSHIFT expression .)
    STRING          reduce using rule 22 (expression -> expression RSHIFT expression .)
    IF              reduce using rule 22 (expression -> expression RSHIFT expression .)
    NUM_INT         reduce using rule 22 (expression -> expression RSHIFT expression .)
    NUM_FLOAT       reduce using rule 22 (expression -> expression RSHIFT expression .)
    TRUE            reduce using rule 22 (expression -> expression RSHIFT expression .)
    FALSE           reduce using rule 22 (expression -> expression RSHIFT expression .)
    $end            reduce using rule 22 (expression -> expression RSHIFT expression .)
    RSQBRACK        reduce using rule 22 (expression -> expression RSHIFT expression .)
    COMMA           reduce using rule 22 (expression -> expression RSHIFT expression .)
    STMT_END        reduce using rule 22 (expression -> expression RSHIFT expression .)
    LBRACK          reduce using rule 22 (expression -> expression RSHIFT expression .)
    RPAREN          reduce using rule 22 (expression -> expression RSHIFT expression .)
    COLON           reduce using rule 22 (expression -> expression RSHIFT expression .)
    RBRACK          reduce using rule 22 (expression -> expression RSHIFT expression .)
    ARROW_LTR       reduce using rule 22 (expression -> expression RSHIFT expression .)
    ARROW_RTL       reduce using rule 22 (expression -> expression RSHIFT expression .)
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    MUL             shift and go to state 41
    DIV             shift and go to state 42
    EXP             shift and go to state 43
    MOD             shift and go to state 44
    BIT_AND         shift and go to state 45
    BIT_OR          shift and go to state 46
    BIT_XOR         shift and go to state 47
    LSHIFT          shift and go to state 48
    RSHIFT          shift and go to state 49
    QUESTION_MARK   shift and go to state 50
    IN              shift and go to state 51
    NOT             shift and go to state 52
    EQ              shift and go to state 53
    NEQ             shift and go to state 54
    GT              shift and go to state 55
    GTE             shift and go to state 56
    LT              shift and go to state 57
    LTE             shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60

  ! PLUS            [ reduce using rule 22 (expression -> expression RSHIFT expression .) ]
  ! MINUS           [ reduce using rule 22 (expression -> expression RSHIFT expression .) ]
  ! MUL             [ reduce using rule 22 (expression -> expression RSHIFT expression .) ]
  ! DIV             [ reduce using rule 22 (expression -> expression RSHIFT expression .) ]
  ! EXP             [ reduce using rule 22 (expression -> expression RSHIFT expression .) ]
  ! MOD             [ reduce using rule 22 (expression -> expression RSHIFT expression .) ]
  ! BIT_AND         [ reduce using rule 22 (expression -> expression RSHIFT expression .) ]
  ! BIT_OR          [ reduce using rule 22 (expression -> expression RSHIFT expression .) ]
  ! BIT_XOR         [ reduce using rule 22 (expression -> expression RSHIFT expression .) ]
  ! LSHIFT          [ reduce using rule 22 (expression -> expression RSHIFT expression .) ]
  ! RSHIFT          [ reduce using rule 22 (expression -> expression RSHIFT expression .) ]
  ! QUESTION_MARK   [ reduce using rule 22 (expression -> expression RSHIFT expression .) ]
  ! IN              [ reduce using rule 22 (expression -> expression RSHIFT expression .) ]
  ! NOT             [ reduce using rule 22 (expression -> expression RSHIFT expression .) ]
  ! EQ              [ reduce using rule 22 (expression -> expression RSHIFT expression .) ]
  ! NEQ             [ reduce using rule 22 (expression -> expression RSHIFT expression .) ]
  ! GT              [ reduce using rule 22 (expression -> expression RSHIFT expression .) ]
  ! GTE             [ reduce using rule 22 (expression -> expression RSHIFT expression .) ]
  ! LT              [ reduce using rule 22 (expression -> expression RSHIFT expression .) ]
  ! LTE             [ reduce using rule 22 (expression -> expression RSHIFT expression .) ]
  ! AND             [ reduce using rule 22 (expression -> expression RSHIFT expression .) ]
  ! OR              [ reduce using rule 22 (expression -> expression RSHIFT expression .) ]


state 101

    (43) expression -> expression QUESTION_MARK expression . COLON expression
    (12) expression -> expression . PLUS expression
    (13) expression -> expression . MINUS expression
    (14) expression -> expression . MUL expression
    (15) expression -> expression . DIV expression
    (16) expression -> expression . EXP expression
    (17) expression -> expression . MOD expression
    (18) expression -> expression . BIT_AND expression
    (19) expression -> expression . BIT_OR expression
    (20) expression -> expression . BIT_XOR expression
    (21) expression -> expression . LSHIFT expression
    (22) expression -> expression . RSHIFT expression
    (43) expression -> expression . QUESTION_MARK expression COLON expression
    (55) expression -> expression . IN expression
    (56) expression -> expression . NOT IN expression
    (23) boolean -> expression . EQ expression
    (24) boolean -> expression . NEQ expression
    (25) boolean -> expression . GT expression
    (26) boolean -> expression . GTE expression
    (27) boolean -> expression . LT expression
    (28) boolean -> expression . LTE expression
    (29) boolean -> expression . AND expression
    (30) boolean -> expression . OR expression

    COLON           shift and go to state 137
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    MUL             shift and go to state 41
    DIV             shift and go to state 42
    EXP             shift and go to state 43
    MOD             shift and go to state 44
    BIT_AND         shift and go to state 45
    BIT_OR          shift and go to state 46
    BIT_XOR         shift and go to state 47
    LSHIFT          shift and go to state 48
    RSHIFT          shift and go to state 49
    QUESTION_MARK   shift and go to state 50
    IN              shift and go to state 51
    NOT             shift and go to state 52
    EQ              shift and go to state 53
    NEQ             shift and go to state 54
    GT              shift and go to state 55
    GTE             shift and go to state 56
    LT              shift and go to state 57
    LTE             shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60


state 102

    (55) expression -> expression IN expression .
    (12) expression -> expression . PLUS expression
    (13) expression -> expression . MINUS expression
    (14) expression -> expression . MUL expression
    (15) expression -> expression . DIV expression
    (16) expression -> expression . EXP expression
    (17) expression -> expression . MOD expression
    (18) expression -> expression . BIT_AND expression
    (19) expression -> expression . BIT_OR expression
    (20) expression -> expression . BIT_XOR expression
    (21) expression -> expression . LSHIFT expression
    (22) expression -> expression . RSHIFT expression
    (43) expression -> expression . QUESTION_MARK expression COLON expression
    (55) expression -> expression . IN expression
    (56) expression -> expression . NOT IN expression
    (23) boolean -> expression . EQ expression
    (24) boolean -> expression . NEQ expression
    (25) boolean -> expression . GT expression
    (26) boolean -> expression . GTE expression
    (27) boolean -> expression . LT expression
    (28) boolean -> expression . LTE expression
    (29) boolean -> expression . AND expression
    (30) boolean -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for BIT_AND resolved as shift
  ! shift/reduce conflict for BIT_OR resolved as shift
  ! shift/reduce conflict for BIT_XOR resolved as shift
  ! shift/reduce conflict for LSHIFT resolved as shift
  ! shift/reduce conflict for RSHIFT resolved as shift
  ! shift/reduce conflict for QUESTION_MARK resolved as shift
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    EXIT            reduce using rule 55 (expression -> expression IN expression .)
    PRINT           reduce using rule 55 (expression -> expression IN expression .)
    FOR             reduce using rule 55 (expression -> expression IN expression .)
    WHILE           reduce using rule 55 (expression -> expression IN expression .)
    FUNCTION        reduce using rule 55 (expression -> expression IN expression .)
    RETURN          reduce using rule 55 (expression -> expression IN expression .)
    IDENTIFIER      reduce using rule 55 (expression -> expression IN expression .)
    BIT_NEG         reduce using rule 55 (expression -> expression IN expression .)
    LPAREN          reduce using rule 55 (expression -> expression IN expression .)
    LSQBRACK        reduce using rule 55 (expression -> expression IN expression .)
    STRING          reduce using rule 55 (expression -> expression IN expression .)
    IF              reduce using rule 55 (expression -> expression IN expression .)
    NUM_INT         reduce using rule 55 (expression -> expression IN expression .)
    NUM_FLOAT       reduce using rule 55 (expression -> expression IN expression .)
    TRUE            reduce using rule 55 (expression -> expression IN expression .)
    FALSE           reduce using rule 55 (expression -> expression IN expression .)
    $end            reduce using rule 55 (expression -> expression IN expression .)
    RSQBRACK        reduce using rule 55 (expression -> expression IN expression .)
    COMMA           reduce using rule 55 (expression -> expression IN expression .)
    STMT_END        reduce using rule 55 (expression -> expression IN expression .)
    LBRACK          reduce using rule 55 (expression -> expression IN expression .)
    RPAREN          reduce using rule 55 (expression -> expression IN expression .)
    COLON           reduce using rule 55 (expression -> expression IN expression .)
    RBRACK          reduce using rule 55 (expression -> expression IN expression .)
    ARROW_LTR       reduce using rule 55 (expression -> expression IN expression .)
    ARROW_RTL       reduce using rule 55 (expression -> expression IN expression .)
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    MUL             shift and go to state 41
    DIV             shift and go to state 42
    EXP             shift and go to state 43
    MOD             shift and go to state 44
    BIT_AND         shift and go to state 45
    BIT_OR          shift and go to state 46
    BIT_XOR         shift and go to state 47
    LSHIFT          shift and go to state 48
    RSHIFT          shift and go to state 49
    QUESTION_MARK   shift and go to state 50
    IN              shift and go to state 51
    NOT             shift and go to state 52
    EQ              shift and go to state 53
    NEQ             shift and go to state 54
    GT              shift and go to state 55
    GTE             shift and go to state 56
    LT              shift and go to state 57
    LTE             shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60

  ! PLUS            [ reduce using rule 55 (expression -> expression IN expression .) ]
  ! MINUS           [ reduce using rule 55 (expression -> expression IN expression .) ]
  ! MUL             [ reduce using rule 55 (expression -> expression IN expression .) ]
  ! DIV             [ reduce using rule 55 (expression -> expression IN expression .) ]
  ! EXP             [ reduce using rule 55 (expression -> expression IN expression .) ]
  ! MOD             [ reduce using rule 55 (expression -> expression IN expression .) ]
  ! BIT_AND         [ reduce using rule 55 (expression -> expression IN expression .) ]
  ! BIT_OR          [ reduce using rule 55 (expression -> expression IN expression .) ]
  ! BIT_XOR         [ reduce using rule 55 (expression -> expression IN expression .) ]
  ! LSHIFT          [ reduce using rule 55 (expression -> expression IN expression .) ]
  ! RSHIFT          [ reduce using rule 55 (expression -> expression IN expression .) ]
  ! QUESTION_MARK   [ reduce using rule 55 (expression -> expression IN expression .) ]
  ! IN              [ reduce using rule 55 (expression -> expression IN expression .) ]
  ! NOT             [ reduce using rule 55 (expression -> expression IN expression .) ]
  ! EQ              [ reduce using rule 55 (expression -> expression IN expression .) ]
  ! NEQ             [ reduce using rule 55 (expression -> expression IN expression .) ]
  ! GT              [ reduce using rule 55 (expression -> expression IN expression .) ]
  ! GTE             [ reduce using rule 55 (expression -> expression IN expression .) ]
  ! LT              [ reduce using rule 55 (expression -> expression IN expression .) ]
  ! LTE             [ reduce using rule 55 (expression -> expression IN expression .) ]
  ! AND             [ reduce using rule 55 (expression -> expression IN expression .) ]
  ! OR              [ reduce using rule 55 (expression -> expression IN expression .) ]


state 103

    (56) expression -> expression NOT IN . expression
    (12) expression -> . expression PLUS expression
    (13) expression -> . expression MINUS expression
    (14) expression -> . expression MUL expression
    (15) expression -> . expression DIV expression
    (16) expression -> . expression EXP expression
    (17) expression -> . expression MOD expression
    (18) expression -> . expression BIT_AND expression
    (19) expression -> . expression BIT_OR expression
    (20) expression -> . expression BIT_XOR expression
    (21) expression -> . expression LSHIFT expression
    (22) expression -> . expression RSHIFT expression
    (31) expression -> . MINUS expression
    (32) expression -> . PLUS expression
    (33) expression -> . BIT_NEG expression
    (34) expression -> . NOT expression
    (35) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression QUESTION_MARK expression COLON expression
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable STMT_END
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier DOUBLE_PLUS
    (65) expression -> . identifier DOUBLE_MINUS
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (77) expression -> . identifier LPAREN arguments RPAREN
    (6) identifier -> . IDENTIFIER
    (8) primitive -> . NUM_INT
    (9) primitive -> . NUM_FLOAT
    (10) primitive -> . STRING
    (11) primitive -> . boolean
    (23) boolean -> . expression EQ expression
    (24) boolean -> . expression NEQ expression
    (25) boolean -> . expression GT expression
    (26) boolean -> . expression GTE expression
    (27) boolean -> . expression LT expression
    (28) boolean -> . expression LTE expression
    (29) boolean -> . expression AND expression
    (30) boolean -> . expression OR expression
    (36) boolean -> . TRUE
    (37) boolean -> . FALSE

    MINUS           shift and go to state 16
    PLUS            shift and go to state 15
    BIT_NEG         shift and go to state 17
    NOT             shift and go to state 18
    LPAREN          shift and go to state 12
    LSQBRACK        shift and go to state 7
    STRING          shift and go to state 20
    IDENTIFIER      shift and go to state 14
    NUM_INT         shift and go to state 22
    NUM_FLOAT       shift and go to state 23
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26

    expression                     shift and go to state 138
    identifier                     shift and go to state 64
    primitive                      shift and go to state 19
    boolean                        shift and go to state 24

state 104

    (23) boolean -> expression EQ expression .
    (12) expression -> expression . PLUS expression
    (13) expression -> expression . MINUS expression
    (14) expression -> expression . MUL expression
    (15) expression -> expression . DIV expression
    (16) expression -> expression . EXP expression
    (17) expression -> expression . MOD expression
    (18) expression -> expression . BIT_AND expression
    (19) expression -> expression . BIT_OR expression
    (20) expression -> expression . BIT_XOR expression
    (21) expression -> expression . LSHIFT expression
    (22) expression -> expression . RSHIFT expression
    (43) expression -> expression . QUESTION_MARK expression COLON expression
    (55) expression -> expression . IN expression
    (56) expression -> expression . NOT IN expression
    (23) boolean -> expression . EQ expression
    (24) boolean -> expression . NEQ expression
    (25) boolean -> expression . GT expression
    (26) boolean -> expression . GTE expression
    (27) boolean -> expression . LT expression
    (28) boolean -> expression . LTE expression
    (29) boolean -> expression . AND expression
    (30) boolean -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for BIT_AND resolved as shift
  ! shift/reduce conflict for BIT_OR resolved as shift
  ! shift/reduce conflict for BIT_XOR resolved as shift
  ! shift/reduce conflict for LSHIFT resolved as shift
  ! shift/reduce conflict for RSHIFT resolved as shift
  ! shift/reduce conflict for QUESTION_MARK resolved as shift
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    EXIT            reduce using rule 23 (boolean -> expression EQ expression .)
    PRINT           reduce using rule 23 (boolean -> expression EQ expression .)
    FOR             reduce using rule 23 (boolean -> expression EQ expression .)
    WHILE           reduce using rule 23 (boolean -> expression EQ expression .)
    FUNCTION        reduce using rule 23 (boolean -> expression EQ expression .)
    RETURN          reduce using rule 23 (boolean -> expression EQ expression .)
    IDENTIFIER      reduce using rule 23 (boolean -> expression EQ expression .)
    BIT_NEG         reduce using rule 23 (boolean -> expression EQ expression .)
    LPAREN          reduce using rule 23 (boolean -> expression EQ expression .)
    LSQBRACK        reduce using rule 23 (boolean -> expression EQ expression .)
    STRING          reduce using rule 23 (boolean -> expression EQ expression .)
    IF              reduce using rule 23 (boolean -> expression EQ expression .)
    NUM_INT         reduce using rule 23 (boolean -> expression EQ expression .)
    NUM_FLOAT       reduce using rule 23 (boolean -> expression EQ expression .)
    TRUE            reduce using rule 23 (boolean -> expression EQ expression .)
    FALSE           reduce using rule 23 (boolean -> expression EQ expression .)
    $end            reduce using rule 23 (boolean -> expression EQ expression .)
    RSQBRACK        reduce using rule 23 (boolean -> expression EQ expression .)
    COMMA           reduce using rule 23 (boolean -> expression EQ expression .)
    STMT_END        reduce using rule 23 (boolean -> expression EQ expression .)
    LBRACK          reduce using rule 23 (boolean -> expression EQ expression .)
    RPAREN          reduce using rule 23 (boolean -> expression EQ expression .)
    COLON           reduce using rule 23 (boolean -> expression EQ expression .)
    RBRACK          reduce using rule 23 (boolean -> expression EQ expression .)
    ARROW_LTR       reduce using rule 23 (boolean -> expression EQ expression .)
    ARROW_RTL       reduce using rule 23 (boolean -> expression EQ expression .)
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    MUL             shift and go to state 41
    DIV             shift and go to state 42
    EXP             shift and go to state 43
    MOD             shift and go to state 44
    BIT_AND         shift and go to state 45
    BIT_OR          shift and go to state 46
    BIT_XOR         shift and go to state 47
    LSHIFT          shift and go to state 48
    RSHIFT          shift and go to state 49
    QUESTION_MARK   shift and go to state 50
    IN              shift and go to state 51
    NOT             shift and go to state 52
    EQ              shift and go to state 53
    NEQ             shift and go to state 54
    GT              shift and go to state 55
    GTE             shift and go to state 56
    LT              shift and go to state 57
    LTE             shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60

  ! PLUS            [ reduce using rule 23 (boolean -> expression EQ expression .) ]
  ! MINUS           [ reduce using rule 23 (boolean -> expression EQ expression .) ]
  ! MUL             [ reduce using rule 23 (boolean -> expression EQ expression .) ]
  ! DIV             [ reduce using rule 23 (boolean -> expression EQ expression .) ]
  ! EXP             [ reduce using rule 23 (boolean -> expression EQ expression .) ]
  ! MOD             [ reduce using rule 23 (boolean -> expression EQ expression .) ]
  ! BIT_AND         [ reduce using rule 23 (boolean -> expression EQ expression .) ]
  ! BIT_OR          [ reduce using rule 23 (boolean -> expression EQ expression .) ]
  ! BIT_XOR         [ reduce using rule 23 (boolean -> expression EQ expression .) ]
  ! LSHIFT          [ reduce using rule 23 (boolean -> expression EQ expression .) ]
  ! RSHIFT          [ reduce using rule 23 (boolean -> expression EQ expression .) ]
  ! QUESTION_MARK   [ reduce using rule 23 (boolean -> expression EQ expression .) ]
  ! IN              [ reduce using rule 23 (boolean -> expression EQ expression .) ]
  ! NOT             [ reduce using rule 23 (boolean -> expression EQ expression .) ]
  ! EQ              [ reduce using rule 23 (boolean -> expression EQ expression .) ]
  ! NEQ             [ reduce using rule 23 (boolean -> expression EQ expression .) ]
  ! GT              [ reduce using rule 23 (boolean -> expression EQ expression .) ]
  ! GTE             [ reduce using rule 23 (boolean -> expression EQ expression .) ]
  ! LT              [ reduce using rule 23 (boolean -> expression EQ expression .) ]
  ! LTE             [ reduce using rule 23 (boolean -> expression EQ expression .) ]
  ! AND             [ reduce using rule 23 (boolean -> expression EQ expression .) ]
  ! OR              [ reduce using rule 23 (boolean -> expression EQ expression .) ]


state 105

    (24) boolean -> expression NEQ expression .
    (12) expression -> expression . PLUS expression
    (13) expression -> expression . MINUS expression
    (14) expression -> expression . MUL expression
    (15) expression -> expression . DIV expression
    (16) expression -> expression . EXP expression
    (17) expression -> expression . MOD expression
    (18) expression -> expression . BIT_AND expression
    (19) expression -> expression . BIT_OR expression
    (20) expression -> expression . BIT_XOR expression
    (21) expression -> expression . LSHIFT expression
    (22) expression -> expression . RSHIFT expression
    (43) expression -> expression . QUESTION_MARK expression COLON expression
    (55) expression -> expression . IN expression
    (56) expression -> expression . NOT IN expression
    (23) boolean -> expression . EQ expression
    (24) boolean -> expression . NEQ expression
    (25) boolean -> expression . GT expression
    (26) boolean -> expression . GTE expression
    (27) boolean -> expression . LT expression
    (28) boolean -> expression . LTE expression
    (29) boolean -> expression . AND expression
    (30) boolean -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for BIT_AND resolved as shift
  ! shift/reduce conflict for BIT_OR resolved as shift
  ! shift/reduce conflict for BIT_XOR resolved as shift
  ! shift/reduce conflict for LSHIFT resolved as shift
  ! shift/reduce conflict for RSHIFT resolved as shift
  ! shift/reduce conflict for QUESTION_MARK resolved as shift
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    EXIT            reduce using rule 24 (boolean -> expression NEQ expression .)
    PRINT           reduce using rule 24 (boolean -> expression NEQ expression .)
    FOR             reduce using rule 24 (boolean -> expression NEQ expression .)
    WHILE           reduce using rule 24 (boolean -> expression NEQ expression .)
    FUNCTION        reduce using rule 24 (boolean -> expression NEQ expression .)
    RETURN          reduce using rule 24 (boolean -> expression NEQ expression .)
    IDENTIFIER      reduce using rule 24 (boolean -> expression NEQ expression .)
    BIT_NEG         reduce using rule 24 (boolean -> expression NEQ expression .)
    LPAREN          reduce using rule 24 (boolean -> expression NEQ expression .)
    LSQBRACK        reduce using rule 24 (boolean -> expression NEQ expression .)
    STRING          reduce using rule 24 (boolean -> expression NEQ expression .)
    IF              reduce using rule 24 (boolean -> expression NEQ expression .)
    NUM_INT         reduce using rule 24 (boolean -> expression NEQ expression .)
    NUM_FLOAT       reduce using rule 24 (boolean -> expression NEQ expression .)
    TRUE            reduce using rule 24 (boolean -> expression NEQ expression .)
    FALSE           reduce using rule 24 (boolean -> expression NEQ expression .)
    $end            reduce using rule 24 (boolean -> expression NEQ expression .)
    RSQBRACK        reduce using rule 24 (boolean -> expression NEQ expression .)
    COMMA           reduce using rule 24 (boolean -> expression NEQ expression .)
    STMT_END        reduce using rule 24 (boolean -> expression NEQ expression .)
    LBRACK          reduce using rule 24 (boolean -> expression NEQ expression .)
    RPAREN          reduce using rule 24 (boolean -> expression NEQ expression .)
    COLON           reduce using rule 24 (boolean -> expression NEQ expression .)
    RBRACK          reduce using rule 24 (boolean -> expression NEQ expression .)
    ARROW_LTR       reduce using rule 24 (boolean -> expression NEQ expression .)
    ARROW_RTL       reduce using rule 24 (boolean -> expression NEQ expression .)
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    MUL             shift and go to state 41
    DIV             shift and go to state 42
    EXP             shift and go to state 43
    MOD             shift and go to state 44
    BIT_AND         shift and go to state 45
    BIT_OR          shift and go to state 46
    BIT_XOR         shift and go to state 47
    LSHIFT          shift and go to state 48
    RSHIFT          shift and go to state 49
    QUESTION_MARK   shift and go to state 50
    IN              shift and go to state 51
    NOT             shift and go to state 52
    EQ              shift and go to state 53
    NEQ             shift and go to state 54
    GT              shift and go to state 55
    GTE             shift and go to state 56
    LT              shift and go to state 57
    LTE             shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60

  ! PLUS            [ reduce using rule 24 (boolean -> expression NEQ expression .) ]
  ! MINUS           [ reduce using rule 24 (boolean -> expression NEQ expression .) ]
  ! MUL             [ reduce using rule 24 (boolean -> expression NEQ expression .) ]
  ! DIV             [ reduce using rule 24 (boolean -> expression NEQ expression .) ]
  ! EXP             [ reduce using rule 24 (boolean -> expression NEQ expression .) ]
  ! MOD             [ reduce using rule 24 (boolean -> expression NEQ expression .) ]
  ! BIT_AND         [ reduce using rule 24 (boolean -> expression NEQ expression .) ]
  ! BIT_OR          [ reduce using rule 24 (boolean -> expression NEQ expression .) ]
  ! BIT_XOR         [ reduce using rule 24 (boolean -> expression NEQ expression .) ]
  ! LSHIFT          [ reduce using rule 24 (boolean -> expression NEQ expression .) ]
  ! RSHIFT          [ reduce using rule 24 (boolean -> expression NEQ expression .) ]
  ! QUESTION_MARK   [ reduce using rule 24 (boolean -> expression NEQ expression .) ]
  ! IN              [ reduce using rule 24 (boolean -> expression NEQ expression .) ]
  ! NOT             [ reduce using rule 24 (boolean -> expression NEQ expression .) ]
  ! EQ              [ reduce using rule 24 (boolean -> expression NEQ expression .) ]
  ! NEQ             [ reduce using rule 24 (boolean -> expression NEQ expression .) ]
  ! GT              [ reduce using rule 24 (boolean -> expression NEQ expression .) ]
  ! GTE             [ reduce using rule 24 (boolean -> expression NEQ expression .) ]
  ! LT              [ reduce using rule 24 (boolean -> expression NEQ expression .) ]
  ! LTE             [ reduce using rule 24 (boolean -> expression NEQ expression .) ]
  ! AND             [ reduce using rule 24 (boolean -> expression NEQ expression .) ]
  ! OR              [ reduce using rule 24 (boolean -> expression NEQ expression .) ]


state 106

    (25) boolean -> expression GT expression .
    (12) expression -> expression . PLUS expression
    (13) expression -> expression . MINUS expression
    (14) expression -> expression . MUL expression
    (15) expression -> expression . DIV expression
    (16) expression -> expression . EXP expression
    (17) expression -> expression . MOD expression
    (18) expression -> expression . BIT_AND expression
    (19) expression -> expression . BIT_OR expression
    (20) expression -> expression . BIT_XOR expression
    (21) expression -> expression . LSHIFT expression
    (22) expression -> expression . RSHIFT expression
    (43) expression -> expression . QUESTION_MARK expression COLON expression
    (55) expression -> expression . IN expression
    (56) expression -> expression . NOT IN expression
    (23) boolean -> expression . EQ expression
    (24) boolean -> expression . NEQ expression
    (25) boolean -> expression . GT expression
    (26) boolean -> expression . GTE expression
    (27) boolean -> expression . LT expression
    (28) boolean -> expression . LTE expression
    (29) boolean -> expression . AND expression
    (30) boolean -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for BIT_AND resolved as shift
  ! shift/reduce conflict for BIT_OR resolved as shift
  ! shift/reduce conflict for BIT_XOR resolved as shift
  ! shift/reduce conflict for LSHIFT resolved as shift
  ! shift/reduce conflict for RSHIFT resolved as shift
  ! shift/reduce conflict for QUESTION_MARK resolved as shift
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    EXIT            reduce using rule 25 (boolean -> expression GT expression .)
    PRINT           reduce using rule 25 (boolean -> expression GT expression .)
    FOR             reduce using rule 25 (boolean -> expression GT expression .)
    WHILE           reduce using rule 25 (boolean -> expression GT expression .)
    FUNCTION        reduce using rule 25 (boolean -> expression GT expression .)
    RETURN          reduce using rule 25 (boolean -> expression GT expression .)
    IDENTIFIER      reduce using rule 25 (boolean -> expression GT expression .)
    BIT_NEG         reduce using rule 25 (boolean -> expression GT expression .)
    LPAREN          reduce using rule 25 (boolean -> expression GT expression .)
    LSQBRACK        reduce using rule 25 (boolean -> expression GT expression .)
    STRING          reduce using rule 25 (boolean -> expression GT expression .)
    IF              reduce using rule 25 (boolean -> expression GT expression .)
    NUM_INT         reduce using rule 25 (boolean -> expression GT expression .)
    NUM_FLOAT       reduce using rule 25 (boolean -> expression GT expression .)
    TRUE            reduce using rule 25 (boolean -> expression GT expression .)
    FALSE           reduce using rule 25 (boolean -> expression GT expression .)
    $end            reduce using rule 25 (boolean -> expression GT expression .)
    RSQBRACK        reduce using rule 25 (boolean -> expression GT expression .)
    COMMA           reduce using rule 25 (boolean -> expression GT expression .)
    STMT_END        reduce using rule 25 (boolean -> expression GT expression .)
    LBRACK          reduce using rule 25 (boolean -> expression GT expression .)
    RPAREN          reduce using rule 25 (boolean -> expression GT expression .)
    COLON           reduce using rule 25 (boolean -> expression GT expression .)
    RBRACK          reduce using rule 25 (boolean -> expression GT expression .)
    ARROW_LTR       reduce using rule 25 (boolean -> expression GT expression .)
    ARROW_RTL       reduce using rule 25 (boolean -> expression GT expression .)
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    MUL             shift and go to state 41
    DIV             shift and go to state 42
    EXP             shift and go to state 43
    MOD             shift and go to state 44
    BIT_AND         shift and go to state 45
    BIT_OR          shift and go to state 46
    BIT_XOR         shift and go to state 47
    LSHIFT          shift and go to state 48
    RSHIFT          shift and go to state 49
    QUESTION_MARK   shift and go to state 50
    IN              shift and go to state 51
    NOT             shift and go to state 52
    EQ              shift and go to state 53
    NEQ             shift and go to state 54
    GT              shift and go to state 55
    GTE             shift and go to state 56
    LT              shift and go to state 57
    LTE             shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60

  ! PLUS            [ reduce using rule 25 (boolean -> expression GT expression .) ]
  ! MINUS           [ reduce using rule 25 (boolean -> expression GT expression .) ]
  ! MUL             [ reduce using rule 25 (boolean -> expression GT expression .) ]
  ! DIV             [ reduce using rule 25 (boolean -> expression GT expression .) ]
  ! EXP             [ reduce using rule 25 (boolean -> expression GT expression .) ]
  ! MOD             [ reduce using rule 25 (boolean -> expression GT expression .) ]
  ! BIT_AND         [ reduce using rule 25 (boolean -> expression GT expression .) ]
  ! BIT_OR          [ reduce using rule 25 (boolean -> expression GT expression .) ]
  ! BIT_XOR         [ reduce using rule 25 (boolean -> expression GT expression .) ]
  ! LSHIFT          [ reduce using rule 25 (boolean -> expression GT expression .) ]
  ! RSHIFT          [ reduce using rule 25 (boolean -> expression GT expression .) ]
  ! QUESTION_MARK   [ reduce using rule 25 (boolean -> expression GT expression .) ]
  ! IN              [ reduce using rule 25 (boolean -> expression GT expression .) ]
  ! NOT             [ reduce using rule 25 (boolean -> expression GT expression .) ]
  ! EQ              [ reduce using rule 25 (boolean -> expression GT expression .) ]
  ! NEQ             [ reduce using rule 25 (boolean -> expression GT expression .) ]
  ! GT              [ reduce using rule 25 (boolean -> expression GT expression .) ]
  ! GTE             [ reduce using rule 25 (boolean -> expression GT expression .) ]
  ! LT              [ reduce using rule 25 (boolean -> expression GT expression .) ]
  ! LTE             [ reduce using rule 25 (boolean -> expression GT expression .) ]
  ! AND             [ reduce using rule 25 (boolean -> expression GT expression .) ]
  ! OR              [ reduce using rule 25 (boolean -> expression GT expression .) ]


state 107

    (26) boolean -> expression GTE expression .
    (12) expression -> expression . PLUS expression
    (13) expression -> expression . MINUS expression
    (14) expression -> expression . MUL expression
    (15) expression -> expression . DIV expression
    (16) expression -> expression . EXP expression
    (17) expression -> expression . MOD expression
    (18) expression -> expression . BIT_AND expression
    (19) expression -> expression . BIT_OR expression
    (20) expression -> expression . BIT_XOR expression
    (21) expression -> expression . LSHIFT expression
    (22) expression -> expression . RSHIFT expression
    (43) expression -> expression . QUESTION_MARK expression COLON expression
    (55) expression -> expression . IN expression
    (56) expression -> expression . NOT IN expression
    (23) boolean -> expression . EQ expression
    (24) boolean -> expression . NEQ expression
    (25) boolean -> expression . GT expression
    (26) boolean -> expression . GTE expression
    (27) boolean -> expression . LT expression
    (28) boolean -> expression . LTE expression
    (29) boolean -> expression . AND expression
    (30) boolean -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for BIT_AND resolved as shift
  ! shift/reduce conflict for BIT_OR resolved as shift
  ! shift/reduce conflict for BIT_XOR resolved as shift
  ! shift/reduce conflict for LSHIFT resolved as shift
  ! shift/reduce conflict for RSHIFT resolved as shift
  ! shift/reduce conflict for QUESTION_MARK resolved as shift
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    EXIT            reduce using rule 26 (boolean -> expression GTE expression .)
    PRINT           reduce using rule 26 (boolean -> expression GTE expression .)
    FOR             reduce using rule 26 (boolean -> expression GTE expression .)
    WHILE           reduce using rule 26 (boolean -> expression GTE expression .)
    FUNCTION        reduce using rule 26 (boolean -> expression GTE expression .)
    RETURN          reduce using rule 26 (boolean -> expression GTE expression .)
    IDENTIFIER      reduce using rule 26 (boolean -> expression GTE expression .)
    BIT_NEG         reduce using rule 26 (boolean -> expression GTE expression .)
    LPAREN          reduce using rule 26 (boolean -> expression GTE expression .)
    LSQBRACK        reduce using rule 26 (boolean -> expression GTE expression .)
    STRING          reduce using rule 26 (boolean -> expression GTE expression .)
    IF              reduce using rule 26 (boolean -> expression GTE expression .)
    NUM_INT         reduce using rule 26 (boolean -> expression GTE expression .)
    NUM_FLOAT       reduce using rule 26 (boolean -> expression GTE expression .)
    TRUE            reduce using rule 26 (boolean -> expression GTE expression .)
    FALSE           reduce using rule 26 (boolean -> expression GTE expression .)
    $end            reduce using rule 26 (boolean -> expression GTE expression .)
    RSQBRACK        reduce using rule 26 (boolean -> expression GTE expression .)
    COMMA           reduce using rule 26 (boolean -> expression GTE expression .)
    STMT_END        reduce using rule 26 (boolean -> expression GTE expression .)
    LBRACK          reduce using rule 26 (boolean -> expression GTE expression .)
    RPAREN          reduce using rule 26 (boolean -> expression GTE expression .)
    COLON           reduce using rule 26 (boolean -> expression GTE expression .)
    RBRACK          reduce using rule 26 (boolean -> expression GTE expression .)
    ARROW_LTR       reduce using rule 26 (boolean -> expression GTE expression .)
    ARROW_RTL       reduce using rule 26 (boolean -> expression GTE expression .)
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    MUL             shift and go to state 41
    DIV             shift and go to state 42
    EXP             shift and go to state 43
    MOD             shift and go to state 44
    BIT_AND         shift and go to state 45
    BIT_OR          shift and go to state 46
    BIT_XOR         shift and go to state 47
    LSHIFT          shift and go to state 48
    RSHIFT          shift and go to state 49
    QUESTION_MARK   shift and go to state 50
    IN              shift and go to state 51
    NOT             shift and go to state 52
    EQ              shift and go to state 53
    NEQ             shift and go to state 54
    GT              shift and go to state 55
    GTE             shift and go to state 56
    LT              shift and go to state 57
    LTE             shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60

  ! PLUS            [ reduce using rule 26 (boolean -> expression GTE expression .) ]
  ! MINUS           [ reduce using rule 26 (boolean -> expression GTE expression .) ]
  ! MUL             [ reduce using rule 26 (boolean -> expression GTE expression .) ]
  ! DIV             [ reduce using rule 26 (boolean -> expression GTE expression .) ]
  ! EXP             [ reduce using rule 26 (boolean -> expression GTE expression .) ]
  ! MOD             [ reduce using rule 26 (boolean -> expression GTE expression .) ]
  ! BIT_AND         [ reduce using rule 26 (boolean -> expression GTE expression .) ]
  ! BIT_OR          [ reduce using rule 26 (boolean -> expression GTE expression .) ]
  ! BIT_XOR         [ reduce using rule 26 (boolean -> expression GTE expression .) ]
  ! LSHIFT          [ reduce using rule 26 (boolean -> expression GTE expression .) ]
  ! RSHIFT          [ reduce using rule 26 (boolean -> expression GTE expression .) ]
  ! QUESTION_MARK   [ reduce using rule 26 (boolean -> expression GTE expression .) ]
  ! IN              [ reduce using rule 26 (boolean -> expression GTE expression .) ]
  ! NOT             [ reduce using rule 26 (boolean -> expression GTE expression .) ]
  ! EQ              [ reduce using rule 26 (boolean -> expression GTE expression .) ]
  ! NEQ             [ reduce using rule 26 (boolean -> expression GTE expression .) ]
  ! GT              [ reduce using rule 26 (boolean -> expression GTE expression .) ]
  ! GTE             [ reduce using rule 26 (boolean -> expression GTE expression .) ]
  ! LT              [ reduce using rule 26 (boolean -> expression GTE expression .) ]
  ! LTE             [ reduce using rule 26 (boolean -> expression GTE expression .) ]
  ! AND             [ reduce using rule 26 (boolean -> expression GTE expression .) ]
  ! OR              [ reduce using rule 26 (boolean -> expression GTE expression .) ]


state 108

    (27) boolean -> expression LT expression .
    (12) expression -> expression . PLUS expression
    (13) expression -> expression . MINUS expression
    (14) expression -> expression . MUL expression
    (15) expression -> expression . DIV expression
    (16) expression -> expression . EXP expression
    (17) expression -> expression . MOD expression
    (18) expression -> expression . BIT_AND expression
    (19) expression -> expression . BIT_OR expression
    (20) expression -> expression . BIT_XOR expression
    (21) expression -> expression . LSHIFT expression
    (22) expression -> expression . RSHIFT expression
    (43) expression -> expression . QUESTION_MARK expression COLON expression
    (55) expression -> expression . IN expression
    (56) expression -> expression . NOT IN expression
    (23) boolean -> expression . EQ expression
    (24) boolean -> expression . NEQ expression
    (25) boolean -> expression . GT expression
    (26) boolean -> expression . GTE expression
    (27) boolean -> expression . LT expression
    (28) boolean -> expression . LTE expression
    (29) boolean -> expression . AND expression
    (30) boolean -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for BIT_AND resolved as shift
  ! shift/reduce conflict for BIT_OR resolved as shift
  ! shift/reduce conflict for BIT_XOR resolved as shift
  ! shift/reduce conflict for LSHIFT resolved as shift
  ! shift/reduce conflict for RSHIFT resolved as shift
  ! shift/reduce conflict for QUESTION_MARK resolved as shift
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    EXIT            reduce using rule 27 (boolean -> expression LT expression .)
    PRINT           reduce using rule 27 (boolean -> expression LT expression .)
    FOR             reduce using rule 27 (boolean -> expression LT expression .)
    WHILE           reduce using rule 27 (boolean -> expression LT expression .)
    FUNCTION        reduce using rule 27 (boolean -> expression LT expression .)
    RETURN          reduce using rule 27 (boolean -> expression LT expression .)
    IDENTIFIER      reduce using rule 27 (boolean -> expression LT expression .)
    BIT_NEG         reduce using rule 27 (boolean -> expression LT expression .)
    LPAREN          reduce using rule 27 (boolean -> expression LT expression .)
    LSQBRACK        reduce using rule 27 (boolean -> expression LT expression .)
    STRING          reduce using rule 27 (boolean -> expression LT expression .)
    IF              reduce using rule 27 (boolean -> expression LT expression .)
    NUM_INT         reduce using rule 27 (boolean -> expression LT expression .)
    NUM_FLOAT       reduce using rule 27 (boolean -> expression LT expression .)
    TRUE            reduce using rule 27 (boolean -> expression LT expression .)
    FALSE           reduce using rule 27 (boolean -> expression LT expression .)
    $end            reduce using rule 27 (boolean -> expression LT expression .)
    RSQBRACK        reduce using rule 27 (boolean -> expression LT expression .)
    COMMA           reduce using rule 27 (boolean -> expression LT expression .)
    STMT_END        reduce using rule 27 (boolean -> expression LT expression .)
    LBRACK          reduce using rule 27 (boolean -> expression LT expression .)
    RPAREN          reduce using rule 27 (boolean -> expression LT expression .)
    COLON           reduce using rule 27 (boolean -> expression LT expression .)
    RBRACK          reduce using rule 27 (boolean -> expression LT expression .)
    ARROW_LTR       reduce using rule 27 (boolean -> expression LT expression .)
    ARROW_RTL       reduce using rule 27 (boolean -> expression LT expression .)
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    MUL             shift and go to state 41
    DIV             shift and go to state 42
    EXP             shift and go to state 43
    MOD             shift and go to state 44
    BIT_AND         shift and go to state 45
    BIT_OR          shift and go to state 46
    BIT_XOR         shift and go to state 47
    LSHIFT          shift and go to state 48
    RSHIFT          shift and go to state 49
    QUESTION_MARK   shift and go to state 50
    IN              shift and go to state 51
    NOT             shift and go to state 52
    EQ              shift and go to state 53
    NEQ             shift and go to state 54
    GT              shift and go to state 55
    GTE             shift and go to state 56
    LT              shift and go to state 57
    LTE             shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60

  ! PLUS            [ reduce using rule 27 (boolean -> expression LT expression .) ]
  ! MINUS           [ reduce using rule 27 (boolean -> expression LT expression .) ]
  ! MUL             [ reduce using rule 27 (boolean -> expression LT expression .) ]
  ! DIV             [ reduce using rule 27 (boolean -> expression LT expression .) ]
  ! EXP             [ reduce using rule 27 (boolean -> expression LT expression .) ]
  ! MOD             [ reduce using rule 27 (boolean -> expression LT expression .) ]
  ! BIT_AND         [ reduce using rule 27 (boolean -> expression LT expression .) ]
  ! BIT_OR          [ reduce using rule 27 (boolean -> expression LT expression .) ]
  ! BIT_XOR         [ reduce using rule 27 (boolean -> expression LT expression .) ]
  ! LSHIFT          [ reduce using rule 27 (boolean -> expression LT expression .) ]
  ! RSHIFT          [ reduce using rule 27 (boolean -> expression LT expression .) ]
  ! QUESTION_MARK   [ reduce using rule 27 (boolean -> expression LT expression .) ]
  ! IN              [ reduce using rule 27 (boolean -> expression LT expression .) ]
  ! NOT             [ reduce using rule 27 (boolean -> expression LT expression .) ]
  ! EQ              [ reduce using rule 27 (boolean -> expression LT expression .) ]
  ! NEQ             [ reduce using rule 27 (boolean -> expression LT expression .) ]
  ! GT              [ reduce using rule 27 (boolean -> expression LT expression .) ]
  ! GTE             [ reduce using rule 27 (boolean -> expression LT expression .) ]
  ! LT              [ reduce using rule 27 (boolean -> expression LT expression .) ]
  ! LTE             [ reduce using rule 27 (boolean -> expression LT expression .) ]
  ! AND             [ reduce using rule 27 (boolean -> expression LT expression .) ]
  ! OR              [ reduce using rule 27 (boolean -> expression LT expression .) ]


state 109

    (28) boolean -> expression LTE expression .
    (12) expression -> expression . PLUS expression
    (13) expression -> expression . MINUS expression
    (14) expression -> expression . MUL expression
    (15) expression -> expression . DIV expression
    (16) expression -> expression . EXP expression
    (17) expression -> expression . MOD expression
    (18) expression -> expression . BIT_AND expression
    (19) expression -> expression . BIT_OR expression
    (20) expression -> expression . BIT_XOR expression
    (21) expression -> expression . LSHIFT expression
    (22) expression -> expression . RSHIFT expression
    (43) expression -> expression . QUESTION_MARK expression COLON expression
    (55) expression -> expression . IN expression
    (56) expression -> expression . NOT IN expression
    (23) boolean -> expression . EQ expression
    (24) boolean -> expression . NEQ expression
    (25) boolean -> expression . GT expression
    (26) boolean -> expression . GTE expression
    (27) boolean -> expression . LT expression
    (28) boolean -> expression . LTE expression
    (29) boolean -> expression . AND expression
    (30) boolean -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for BIT_AND resolved as shift
  ! shift/reduce conflict for BIT_OR resolved as shift
  ! shift/reduce conflict for BIT_XOR resolved as shift
  ! shift/reduce conflict for LSHIFT resolved as shift
  ! shift/reduce conflict for RSHIFT resolved as shift
  ! shift/reduce conflict for QUESTION_MARK resolved as shift
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    EXIT            reduce using rule 28 (boolean -> expression LTE expression .)
    PRINT           reduce using rule 28 (boolean -> expression LTE expression .)
    FOR             reduce using rule 28 (boolean -> expression LTE expression .)
    WHILE           reduce using rule 28 (boolean -> expression LTE expression .)
    FUNCTION        reduce using rule 28 (boolean -> expression LTE expression .)
    RETURN          reduce using rule 28 (boolean -> expression LTE expression .)
    IDENTIFIER      reduce using rule 28 (boolean -> expression LTE expression .)
    BIT_NEG         reduce using rule 28 (boolean -> expression LTE expression .)
    LPAREN          reduce using rule 28 (boolean -> expression LTE expression .)
    LSQBRACK        reduce using rule 28 (boolean -> expression LTE expression .)
    STRING          reduce using rule 28 (boolean -> expression LTE expression .)
    IF              reduce using rule 28 (boolean -> expression LTE expression .)
    NUM_INT         reduce using rule 28 (boolean -> expression LTE expression .)
    NUM_FLOAT       reduce using rule 28 (boolean -> expression LTE expression .)
    TRUE            reduce using rule 28 (boolean -> expression LTE expression .)
    FALSE           reduce using rule 28 (boolean -> expression LTE expression .)
    $end            reduce using rule 28 (boolean -> expression LTE expression .)
    RSQBRACK        reduce using rule 28 (boolean -> expression LTE expression .)
    COMMA           reduce using rule 28 (boolean -> expression LTE expression .)
    STMT_END        reduce using rule 28 (boolean -> expression LTE expression .)
    LBRACK          reduce using rule 28 (boolean -> expression LTE expression .)
    RPAREN          reduce using rule 28 (boolean -> expression LTE expression .)
    COLON           reduce using rule 28 (boolean -> expression LTE expression .)
    RBRACK          reduce using rule 28 (boolean -> expression LTE expression .)
    ARROW_LTR       reduce using rule 28 (boolean -> expression LTE expression .)
    ARROW_RTL       reduce using rule 28 (boolean -> expression LTE expression .)
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    MUL             shift and go to state 41
    DIV             shift and go to state 42
    EXP             shift and go to state 43
    MOD             shift and go to state 44
    BIT_AND         shift and go to state 45
    BIT_OR          shift and go to state 46
    BIT_XOR         shift and go to state 47
    LSHIFT          shift and go to state 48
    RSHIFT          shift and go to state 49
    QUESTION_MARK   shift and go to state 50
    IN              shift and go to state 51
    NOT             shift and go to state 52
    EQ              shift and go to state 53
    NEQ             shift and go to state 54
    GT              shift and go to state 55
    GTE             shift and go to state 56
    LT              shift and go to state 57
    LTE             shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60

  ! PLUS            [ reduce using rule 28 (boolean -> expression LTE expression .) ]
  ! MINUS           [ reduce using rule 28 (boolean -> expression LTE expression .) ]
  ! MUL             [ reduce using rule 28 (boolean -> expression LTE expression .) ]
  ! DIV             [ reduce using rule 28 (boolean -> expression LTE expression .) ]
  ! EXP             [ reduce using rule 28 (boolean -> expression LTE expression .) ]
  ! MOD             [ reduce using rule 28 (boolean -> expression LTE expression .) ]
  ! BIT_AND         [ reduce using rule 28 (boolean -> expression LTE expression .) ]
  ! BIT_OR          [ reduce using rule 28 (boolean -> expression LTE expression .) ]
  ! BIT_XOR         [ reduce using rule 28 (boolean -> expression LTE expression .) ]
  ! LSHIFT          [ reduce using rule 28 (boolean -> expression LTE expression .) ]
  ! RSHIFT          [ reduce using rule 28 (boolean -> expression LTE expression .) ]
  ! QUESTION_MARK   [ reduce using rule 28 (boolean -> expression LTE expression .) ]
  ! IN              [ reduce using rule 28 (boolean -> expression LTE expression .) ]
  ! NOT             [ reduce using rule 28 (boolean -> expression LTE expression .) ]
  ! EQ              [ reduce using rule 28 (boolean -> expression LTE expression .) ]
  ! NEQ             [ reduce using rule 28 (boolean -> expression LTE expression .) ]
  ! GT              [ reduce using rule 28 (boolean -> expression LTE expression .) ]
  ! GTE             [ reduce using rule 28 (boolean -> expression LTE expression .) ]
  ! LT              [ reduce using rule 28 (boolean -> expression LTE expression .) ]
  ! LTE             [ reduce using rule 28 (boolean -> expression LTE expression .) ]
  ! AND             [ reduce using rule 28 (boolean -> expression LTE expression .) ]
  ! OR              [ reduce using rule 28 (boolean -> expression LTE expression .) ]


state 110

    (29) boolean -> expression AND expression .
    (12) expression -> expression . PLUS expression
    (13) expression -> expression . MINUS expression
    (14) expression -> expression . MUL expression
    (15) expression -> expression . DIV expression
    (16) expression -> expression . EXP expression
    (17) expression -> expression . MOD expression
    (18) expression -> expression . BIT_AND expression
    (19) expression -> expression . BIT_OR expression
    (20) expression -> expression . BIT_XOR expression
    (21) expression -> expression . LSHIFT expression
    (22) expression -> expression . RSHIFT expression
    (43) expression -> expression . QUESTION_MARK expression COLON expression
    (55) expression -> expression . IN expression
    (56) expression -> expression . NOT IN expression
    (23) boolean -> expression . EQ expression
    (24) boolean -> expression . NEQ expression
    (25) boolean -> expression . GT expression
    (26) boolean -> expression . GTE expression
    (27) boolean -> expression . LT expression
    (28) boolean -> expression . LTE expression
    (29) boolean -> expression . AND expression
    (30) boolean -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for BIT_AND resolved as shift
  ! shift/reduce conflict for BIT_OR resolved as shift
  ! shift/reduce conflict for BIT_XOR resolved as shift
  ! shift/reduce conflict for LSHIFT resolved as shift
  ! shift/reduce conflict for RSHIFT resolved as shift
  ! shift/reduce conflict for QUESTION_MARK resolved as shift
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    EXIT            reduce using rule 29 (boolean -> expression AND expression .)
    PRINT           reduce using rule 29 (boolean -> expression AND expression .)
    FOR             reduce using rule 29 (boolean -> expression AND expression .)
    WHILE           reduce using rule 29 (boolean -> expression AND expression .)
    FUNCTION        reduce using rule 29 (boolean -> expression AND expression .)
    RETURN          reduce using rule 29 (boolean -> expression AND expression .)
    IDENTIFIER      reduce using rule 29 (boolean -> expression AND expression .)
    BIT_NEG         reduce using rule 29 (boolean -> expression AND expression .)
    LPAREN          reduce using rule 29 (boolean -> expression AND expression .)
    LSQBRACK        reduce using rule 29 (boolean -> expression AND expression .)
    STRING          reduce using rule 29 (boolean -> expression AND expression .)
    IF              reduce using rule 29 (boolean -> expression AND expression .)
    NUM_INT         reduce using rule 29 (boolean -> expression AND expression .)
    NUM_FLOAT       reduce using rule 29 (boolean -> expression AND expression .)
    TRUE            reduce using rule 29 (boolean -> expression AND expression .)
    FALSE           reduce using rule 29 (boolean -> expression AND expression .)
    $end            reduce using rule 29 (boolean -> expression AND expression .)
    RSQBRACK        reduce using rule 29 (boolean -> expression AND expression .)
    COMMA           reduce using rule 29 (boolean -> expression AND expression .)
    STMT_END        reduce using rule 29 (boolean -> expression AND expression .)
    LBRACK          reduce using rule 29 (boolean -> expression AND expression .)
    RPAREN          reduce using rule 29 (boolean -> expression AND expression .)
    COLON           reduce using rule 29 (boolean -> expression AND expression .)
    RBRACK          reduce using rule 29 (boolean -> expression AND expression .)
    ARROW_LTR       reduce using rule 29 (boolean -> expression AND expression .)
    ARROW_RTL       reduce using rule 29 (boolean -> expression AND expression .)
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    MUL             shift and go to state 41
    DIV             shift and go to state 42
    EXP             shift and go to state 43
    MOD             shift and go to state 44
    BIT_AND         shift and go to state 45
    BIT_OR          shift and go to state 46
    BIT_XOR         shift and go to state 47
    LSHIFT          shift and go to state 48
    RSHIFT          shift and go to state 49
    QUESTION_MARK   shift and go to state 50
    IN              shift and go to state 51
    NOT             shift and go to state 52
    EQ              shift and go to state 53
    NEQ             shift and go to state 54
    GT              shift and go to state 55
    GTE             shift and go to state 56
    LT              shift and go to state 57
    LTE             shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60

  ! PLUS            [ reduce using rule 29 (boolean -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 29 (boolean -> expression AND expression .) ]
  ! MUL             [ reduce using rule 29 (boolean -> expression AND expression .) ]
  ! DIV             [ reduce using rule 29 (boolean -> expression AND expression .) ]
  ! EXP             [ reduce using rule 29 (boolean -> expression AND expression .) ]
  ! MOD             [ reduce using rule 29 (boolean -> expression AND expression .) ]
  ! BIT_AND         [ reduce using rule 29 (boolean -> expression AND expression .) ]
  ! BIT_OR          [ reduce using rule 29 (boolean -> expression AND expression .) ]
  ! BIT_XOR         [ reduce using rule 29 (boolean -> expression AND expression .) ]
  ! LSHIFT          [ reduce using rule 29 (boolean -> expression AND expression .) ]
  ! RSHIFT          [ reduce using rule 29 (boolean -> expression AND expression .) ]
  ! QUESTION_MARK   [ reduce using rule 29 (boolean -> expression AND expression .) ]
  ! IN              [ reduce using rule 29 (boolean -> expression AND expression .) ]
  ! NOT             [ reduce using rule 29 (boolean -> expression AND expression .) ]
  ! EQ              [ reduce using rule 29 (boolean -> expression AND expression .) ]
  ! NEQ             [ reduce using rule 29 (boolean -> expression AND expression .) ]
  ! GT              [ reduce using rule 29 (boolean -> expression AND expression .) ]
  ! GTE             [ reduce using rule 29 (boolean -> expression AND expression .) ]
  ! LT              [ reduce using rule 29 (boolean -> expression AND expression .) ]
  ! LTE             [ reduce using rule 29 (boolean -> expression AND expression .) ]
  ! AND             [ reduce using rule 29 (boolean -> expression AND expression .) ]
  ! OR              [ reduce using rule 29 (boolean -> expression AND expression .) ]


state 111

    (30) boolean -> expression OR expression .
    (12) expression -> expression . PLUS expression
    (13) expression -> expression . MINUS expression
    (14) expression -> expression . MUL expression
    (15) expression -> expression . DIV expression
    (16) expression -> expression . EXP expression
    (17) expression -> expression . MOD expression
    (18) expression -> expression . BIT_AND expression
    (19) expression -> expression . BIT_OR expression
    (20) expression -> expression . BIT_XOR expression
    (21) expression -> expression . LSHIFT expression
    (22) expression -> expression . RSHIFT expression
    (43) expression -> expression . QUESTION_MARK expression COLON expression
    (55) expression -> expression . IN expression
    (56) expression -> expression . NOT IN expression
    (23) boolean -> expression . EQ expression
    (24) boolean -> expression . NEQ expression
    (25) boolean -> expression . GT expression
    (26) boolean -> expression . GTE expression
    (27) boolean -> expression . LT expression
    (28) boolean -> expression . LTE expression
    (29) boolean -> expression . AND expression
    (30) boolean -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for BIT_AND resolved as shift
  ! shift/reduce conflict for BIT_OR resolved as shift
  ! shift/reduce conflict for BIT_XOR resolved as shift
  ! shift/reduce conflict for LSHIFT resolved as shift
  ! shift/reduce conflict for RSHIFT resolved as shift
  ! shift/reduce conflict for QUESTION_MARK resolved as shift
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    EXIT            reduce using rule 30 (boolean -> expression OR expression .)
    PRINT           reduce using rule 30 (boolean -> expression OR expression .)
    FOR             reduce using rule 30 (boolean -> expression OR expression .)
    WHILE           reduce using rule 30 (boolean -> expression OR expression .)
    FUNCTION        reduce using rule 30 (boolean -> expression OR expression .)
    RETURN          reduce using rule 30 (boolean -> expression OR expression .)
    IDENTIFIER      reduce using rule 30 (boolean -> expression OR expression .)
    BIT_NEG         reduce using rule 30 (boolean -> expression OR expression .)
    LPAREN          reduce using rule 30 (boolean -> expression OR expression .)
    LSQBRACK        reduce using rule 30 (boolean -> expression OR expression .)
    STRING          reduce using rule 30 (boolean -> expression OR expression .)
    IF              reduce using rule 30 (boolean -> expression OR expression .)
    NUM_INT         reduce using rule 30 (boolean -> expression OR expression .)
    NUM_FLOAT       reduce using rule 30 (boolean -> expression OR expression .)
    TRUE            reduce using rule 30 (boolean -> expression OR expression .)
    FALSE           reduce using rule 30 (boolean -> expression OR expression .)
    $end            reduce using rule 30 (boolean -> expression OR expression .)
    RSQBRACK        reduce using rule 30 (boolean -> expression OR expression .)
    COMMA           reduce using rule 30 (boolean -> expression OR expression .)
    STMT_END        reduce using rule 30 (boolean -> expression OR expression .)
    LBRACK          reduce using rule 30 (boolean -> expression OR expression .)
    RPAREN          reduce using rule 30 (boolean -> expression OR expression .)
    COLON           reduce using rule 30 (boolean -> expression OR expression .)
    RBRACK          reduce using rule 30 (boolean -> expression OR expression .)
    ARROW_LTR       reduce using rule 30 (boolean -> expression OR expression .)
    ARROW_RTL       reduce using rule 30 (boolean -> expression OR expression .)
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    MUL             shift and go to state 41
    DIV             shift and go to state 42
    EXP             shift and go to state 43
    MOD             shift and go to state 44
    BIT_AND         shift and go to state 45
    BIT_OR          shift and go to state 46
    BIT_XOR         shift and go to state 47
    LSHIFT          shift and go to state 48
    RSHIFT          shift and go to state 49
    QUESTION_MARK   shift and go to state 50
    IN              shift and go to state 51
    NOT             shift and go to state 52
    EQ              shift and go to state 53
    NEQ             shift and go to state 54
    GT              shift and go to state 55
    GTE             shift and go to state 56
    LT              shift and go to state 57
    LTE             shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60

  ! PLUS            [ reduce using rule 30 (boolean -> expression OR expression .) ]
  ! MINUS           [ reduce using rule 30 (boolean -> expression OR expression .) ]
  ! MUL             [ reduce using rule 30 (boolean -> expression OR expression .) ]
  ! DIV             [ reduce using rule 30 (boolean -> expression OR expression .) ]
  ! EXP             [ reduce using rule 30 (boolean -> expression OR expression .) ]
  ! MOD             [ reduce using rule 30 (boolean -> expression OR expression .) ]
  ! BIT_AND         [ reduce using rule 30 (boolean -> expression OR expression .) ]
  ! BIT_OR          [ reduce using rule 30 (boolean -> expression OR expression .) ]
  ! BIT_XOR         [ reduce using rule 30 (boolean -> expression OR expression .) ]
  ! LSHIFT          [ reduce using rule 30 (boolean -> expression OR expression .) ]
  ! RSHIFT          [ reduce using rule 30 (boolean -> expression OR expression .) ]
  ! QUESTION_MARK   [ reduce using rule 30 (boolean -> expression OR expression .) ]
  ! IN              [ reduce using rule 30 (boolean -> expression OR expression .) ]
  ! NOT             [ reduce using rule 30 (boolean -> expression OR expression .) ]
  ! EQ              [ reduce using rule 30 (boolean -> expression OR expression .) ]
  ! NEQ             [ reduce using rule 30 (boolean -> expression OR expression .) ]
  ! GT              [ reduce using rule 30 (boolean -> expression OR expression .) ]
  ! GTE             [ reduce using rule 30 (boolean -> expression OR expression .) ]
  ! LT              [ reduce using rule 30 (boolean -> expression OR expression .) ]
  ! LTE             [ reduce using rule 30 (boolean -> expression OR expression .) ]
  ! AND             [ reduce using rule 30 (boolean -> expression OR expression .) ]
  ! OR              [ reduce using rule 30 (boolean -> expression OR expression .) ]


state 112

    (44) expression -> LSQBRACK arguments RSQBRACK .

    PLUS            reduce using rule 44 (expression -> LSQBRACK arguments RSQBRACK .)
    MINUS           reduce using rule 44 (expression -> LSQBRACK arguments RSQBRACK .)
    MUL             reduce using rule 44 (expression -> LSQBRACK arguments RSQBRACK .)
    DIV             reduce using rule 44 (expression -> LSQBRACK arguments RSQBRACK .)
    EXP             reduce using rule 44 (expression -> LSQBRACK arguments RSQBRACK .)
    MOD             reduce using rule 44 (expression -> LSQBRACK arguments RSQBRACK .)
    BIT_AND         reduce using rule 44 (expression -> LSQBRACK arguments RSQBRACK .)
    BIT_OR          reduce using rule 44 (expression -> LSQBRACK arguments RSQBRACK .)
    BIT_XOR         reduce using rule 44 (expression -> LSQBRACK arguments RSQBRACK .)
    LSHIFT          reduce using rule 44 (expression -> LSQBRACK arguments RSQBRACK .)
    RSHIFT          reduce using rule 44 (expression -> LSQBRACK arguments RSQBRACK .)
    QUESTION_MARK   reduce using rule 44 (expression -> LSQBRACK arguments RSQBRACK .)
    IN              reduce using rule 44 (expression -> LSQBRACK arguments RSQBRACK .)
    NOT             reduce using rule 44 (expression -> LSQBRACK arguments RSQBRACK .)
    EQ              reduce using rule 44 (expression -> LSQBRACK arguments RSQBRACK .)
    NEQ             reduce using rule 44 (expression -> LSQBRACK arguments RSQBRACK .)
    GT              reduce using rule 44 (expression -> LSQBRACK arguments RSQBRACK .)
    GTE             reduce using rule 44 (expression -> LSQBRACK arguments RSQBRACK .)
    LT              reduce using rule 44 (expression -> LSQBRACK arguments RSQBRACK .)
    LTE             reduce using rule 44 (expression -> LSQBRACK arguments RSQBRACK .)
    AND             reduce using rule 44 (expression -> LSQBRACK arguments RSQBRACK .)
    OR              reduce using rule 44 (expression -> LSQBRACK arguments RSQBRACK .)
    EXIT            reduce using rule 44 (expression -> LSQBRACK arguments RSQBRACK .)
    PRINT           reduce using rule 44 (expression -> LSQBRACK arguments RSQBRACK .)
    FOR             reduce using rule 44 (expression -> LSQBRACK arguments RSQBRACK .)
    WHILE           reduce using rule 44 (expression -> LSQBRACK arguments RSQBRACK .)
    FUNCTION        reduce using rule 44 (expression -> LSQBRACK arguments RSQBRACK .)
    RETURN          reduce using rule 44 (expression -> LSQBRACK arguments RSQBRACK .)
    IDENTIFIER      reduce using rule 44 (expression -> LSQBRACK arguments RSQBRACK .)
    BIT_NEG         reduce using rule 44 (expression -> LSQBRACK arguments RSQBRACK .)
    LPAREN          reduce using rule 44 (expression -> LSQBRACK arguments RSQBRACK .)
    LSQBRACK        reduce using rule 44 (expression -> LSQBRACK arguments RSQBRACK .)
    STRING          reduce using rule 44 (expression -> LSQBRACK arguments RSQBRACK .)
    IF              reduce using rule 44 (expression -> LSQBRACK arguments RSQBRACK .)
    NUM_INT         reduce using rule 44 (expression -> LSQBRACK arguments RSQBRACK .)
    NUM_FLOAT       reduce using rule 44 (expression -> LSQBRACK arguments RSQBRACK .)
    TRUE            reduce using rule 44 (expression -> LSQBRACK arguments RSQBRACK .)
    FALSE           reduce using rule 44 (expression -> LSQBRACK arguments RSQBRACK .)
    $end            reduce using rule 44 (expression -> LSQBRACK arguments RSQBRACK .)
    RSQBRACK        reduce using rule 44 (expression -> LSQBRACK arguments RSQBRACK .)
    COMMA           reduce using rule 44 (expression -> LSQBRACK arguments RSQBRACK .)
    STMT_END        reduce using rule 44 (expression -> LSQBRACK arguments RSQBRACK .)
    LBRACK          reduce using rule 44 (expression -> LSQBRACK arguments RSQBRACK .)
    RPAREN          reduce using rule 44 (expression -> LSQBRACK arguments RSQBRACK .)
    COLON           reduce using rule 44 (expression -> LSQBRACK arguments RSQBRACK .)
    RBRACK          reduce using rule 44 (expression -> LSQBRACK arguments RSQBRACK .)
    ARROW_LTR       reduce using rule 44 (expression -> LSQBRACK arguments RSQBRACK .)
    ARROW_RTL       reduce using rule 44 (expression -> LSQBRACK arguments RSQBRACK .)


state 113

    (40) arguments -> arguments COMMA . expression
    (12) expression -> . expression PLUS expression
    (13) expression -> . expression MINUS expression
    (14) expression -> . expression MUL expression
    (15) expression -> . expression DIV expression
    (16) expression -> . expression EXP expression
    (17) expression -> . expression MOD expression
    (18) expression -> . expression BIT_AND expression
    (19) expression -> . expression BIT_OR expression
    (20) expression -> . expression BIT_XOR expression
    (21) expression -> . expression LSHIFT expression
    (22) expression -> . expression RSHIFT expression
    (31) expression -> . MINUS expression
    (32) expression -> . PLUS expression
    (33) expression -> . BIT_NEG expression
    (34) expression -> . NOT expression
    (35) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression QUESTION_MARK expression COLON expression
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable STMT_END
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier DOUBLE_PLUS
    (65) expression -> . identifier DOUBLE_MINUS
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (77) expression -> . identifier LPAREN arguments RPAREN
    (6) identifier -> . IDENTIFIER
    (8) primitive -> . NUM_INT
    (9) primitive -> . NUM_FLOAT
    (10) primitive -> . STRING
    (11) primitive -> . boolean
    (23) boolean -> . expression EQ expression
    (24) boolean -> . expression NEQ expression
    (25) boolean -> . expression GT expression
    (26) boolean -> . expression GTE expression
    (27) boolean -> . expression LT expression
    (28) boolean -> . expression LTE expression
    (29) boolean -> . expression AND expression
    (30) boolean -> . expression OR expression
    (36) boolean -> . TRUE
    (37) boolean -> . FALSE

    MINUS           shift and go to state 16
    PLUS            shift and go to state 15
    BIT_NEG         shift and go to state 17
    NOT             shift and go to state 18
    LPAREN          shift and go to state 12
    LSQBRACK        shift and go to state 7
    STRING          shift and go to state 20
    IDENTIFIER      shift and go to state 14
    NUM_INT         shift and go to state 22
    NUM_FLOAT       shift and go to state 23
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26

    expression                     shift and go to state 139
    identifier                     shift and go to state 64
    primitive                      shift and go to state 19
    boolean                        shift and go to state 24

state 114

    (45) expression -> identifier LSQBRACK . expression RSQBRACK
    (46) expression -> identifier LSQBRACK . expression COLON expression RSQBRACK
    (47) expression -> identifier LSQBRACK . COLON expression RSQBRACK
    (48) expression -> identifier LSQBRACK . expression COLON RSQBRACK
    (49) expression -> identifier LSQBRACK . COLON RSQBRACK
    (12) expression -> . expression PLUS expression
    (13) expression -> . expression MINUS expression
    (14) expression -> . expression MUL expression
    (15) expression -> . expression DIV expression
    (16) expression -> . expression EXP expression
    (17) expression -> . expression MOD expression
    (18) expression -> . expression BIT_AND expression
    (19) expression -> . expression BIT_OR expression
    (20) expression -> . expression BIT_XOR expression
    (21) expression -> . expression LSHIFT expression
    (22) expression -> . expression RSHIFT expression
    (31) expression -> . MINUS expression
    (32) expression -> . PLUS expression
    (33) expression -> . BIT_NEG expression
    (34) expression -> . NOT expression
    (35) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression QUESTION_MARK expression COLON expression
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable STMT_END
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier DOUBLE_PLUS
    (65) expression -> . identifier DOUBLE_MINUS
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (77) expression -> . identifier LPAREN arguments RPAREN
    (6) identifier -> . IDENTIFIER
    (8) primitive -> . NUM_INT
    (9) primitive -> . NUM_FLOAT
    (10) primitive -> . STRING
    (11) primitive -> . boolean
    (23) boolean -> . expression EQ expression
    (24) boolean -> . expression NEQ expression
    (25) boolean -> . expression GT expression
    (26) boolean -> . expression GTE expression
    (27) boolean -> . expression LT expression
    (28) boolean -> . expression LTE expression
    (29) boolean -> . expression AND expression
    (30) boolean -> . expression OR expression
    (36) boolean -> . TRUE
    (37) boolean -> . FALSE

    COLON           shift and go to state 78
    MINUS           shift and go to state 16
    PLUS            shift and go to state 15
    BIT_NEG         shift and go to state 17
    NOT             shift and go to state 18
    LPAREN          shift and go to state 12
    LSQBRACK        shift and go to state 7
    STRING          shift and go to state 20
    IDENTIFIER      shift and go to state 14
    NUM_INT         shift and go to state 22
    NUM_FLOAT       shift and go to state 23
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26

    identifier                     shift and go to state 64
    expression                     shift and go to state 140
    primitive                      shift and go to state 19
    boolean                        shift and go to state 24

state 115

    (77) expression -> identifier LPAREN . arguments RPAREN
    (40) arguments -> . arguments COMMA expression
    (41) arguments -> . expression
    (42) arguments -> .
    (12) expression -> . expression PLUS expression
    (13) expression -> . expression MINUS expression
    (14) expression -> . expression MUL expression
    (15) expression -> . expression DIV expression
    (16) expression -> . expression EXP expression
    (17) expression -> . expression MOD expression
    (18) expression -> . expression BIT_AND expression
    (19) expression -> . expression BIT_OR expression
    (20) expression -> . expression BIT_XOR expression
    (21) expression -> . expression LSHIFT expression
    (22) expression -> . expression RSHIFT expression
    (31) expression -> . MINUS expression
    (32) expression -> . PLUS expression
    (33) expression -> . BIT_NEG expression
    (34) expression -> . NOT expression
    (35) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression QUESTION_MARK expression COLON expression
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable STMT_END
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier DOUBLE_PLUS
    (65) expression -> . identifier DOUBLE_MINUS
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (77) expression -> . identifier LPAREN arguments RPAREN
    (6) identifier -> . IDENTIFIER
    (8) primitive -> . NUM_INT
    (9) primitive -> . NUM_FLOAT
    (10) primitive -> . STRING
    (11) primitive -> . boolean
    (23) boolean -> . expression EQ expression
    (24) boolean -> . expression NEQ expression
    (25) boolean -> . expression GT expression
    (26) boolean -> . expression GTE expression
    (27) boolean -> . expression LT expression
    (28) boolean -> . expression LTE expression
    (29) boolean -> . expression AND expression
    (30) boolean -> . expression OR expression
    (36) boolean -> . TRUE
    (37) boolean -> . FALSE

    RPAREN          reduce using rule 42 (arguments -> .)
    COMMA           reduce using rule 42 (arguments -> .)
    MINUS           shift and go to state 16
    PLUS            shift and go to state 15
    BIT_NEG         shift and go to state 17
    NOT             shift and go to state 18
    LPAREN          shift and go to state 12
    LSQBRACK        shift and go to state 7
    STRING          shift and go to state 20
    IDENTIFIER      shift and go to state 14
    NUM_INT         shift and go to state 22
    NUM_FLOAT       shift and go to state 23
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26

    identifier                     shift and go to state 64
    arguments                      shift and go to state 141
    expression                     shift and go to state 63
    primitive                      shift and go to state 19
    boolean                        shift and go to state 24

state 116

    (57) statement -> PRINT arguments STMT_END .

    EXIT            reduce using rule 57 (statement -> PRINT arguments STMT_END .)
    PRINT           reduce using rule 57 (statement -> PRINT arguments STMT_END .)
    FOR             reduce using rule 57 (statement -> PRINT arguments STMT_END .)
    WHILE           reduce using rule 57 (statement -> PRINT arguments STMT_END .)
    FUNCTION        reduce using rule 57 (statement -> PRINT arguments STMT_END .)
    RETURN          reduce using rule 57 (statement -> PRINT arguments STMT_END .)
    IDENTIFIER      reduce using rule 57 (statement -> PRINT arguments STMT_END .)
    MINUS           reduce using rule 57 (statement -> PRINT arguments STMT_END .)
    PLUS            reduce using rule 57 (statement -> PRINT arguments STMT_END .)
    BIT_NEG         reduce using rule 57 (statement -> PRINT arguments STMT_END .)
    NOT             reduce using rule 57 (statement -> PRINT arguments STMT_END .)
    LPAREN          reduce using rule 57 (statement -> PRINT arguments STMT_END .)
    LSQBRACK        reduce using rule 57 (statement -> PRINT arguments STMT_END .)
    STRING          reduce using rule 57 (statement -> PRINT arguments STMT_END .)
    IF              reduce using rule 57 (statement -> PRINT arguments STMT_END .)
    NUM_INT         reduce using rule 57 (statement -> PRINT arguments STMT_END .)
    NUM_FLOAT       reduce using rule 57 (statement -> PRINT arguments STMT_END .)
    TRUE            reduce using rule 57 (statement -> PRINT arguments STMT_END .)
    FALSE           reduce using rule 57 (statement -> PRINT arguments STMT_END .)
    $end            reduce using rule 57 (statement -> PRINT arguments STMT_END .)
    RBRACK          reduce using rule 57 (statement -> PRINT arguments STMT_END .)


state 117

    (69) statement -> FOR identifier IN . expression ARROW_LTR expression LBRACK statement_list RBRACK
    (70) statement -> FOR identifier IN . expression ARROW_RTL expression LBRACK statement_list RBRACK
    (71) statement -> FOR identifier IN . expression LBRACK statement_list RBRACK
    (12) expression -> . expression PLUS expression
    (13) expression -> . expression MINUS expression
    (14) expression -> . expression MUL expression
    (15) expression -> . expression DIV expression
    (16) expression -> . expression EXP expression
    (17) expression -> . expression MOD expression
    (18) expression -> . expression BIT_AND expression
    (19) expression -> . expression BIT_OR expression
    (20) expression -> . expression BIT_XOR expression
    (21) expression -> . expression LSHIFT expression
    (22) expression -> . expression RSHIFT expression
    (31) expression -> . MINUS expression
    (32) expression -> . PLUS expression
    (33) expression -> . BIT_NEG expression
    (34) expression -> . NOT expression
    (35) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression QUESTION_MARK expression COLON expression
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable STMT_END
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier DOUBLE_PLUS
    (65) expression -> . identifier DOUBLE_MINUS
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (77) expression -> . identifier LPAREN arguments RPAREN
    (6) identifier -> . IDENTIFIER
    (8) primitive -> . NUM_INT
    (9) primitive -> . NUM_FLOAT
    (10) primitive -> . STRING
    (11) primitive -> . boolean
    (23) boolean -> . expression EQ expression
    (24) boolean -> . expression NEQ expression
    (25) boolean -> . expression GT expression
    (26) boolean -> . expression GTE expression
    (27) boolean -> . expression LT expression
    (28) boolean -> . expression LTE expression
    (29) boolean -> . expression AND expression
    (30) boolean -> . expression OR expression
    (36) boolean -> . TRUE
    (37) boolean -> . FALSE

    MINUS           shift and go to state 16
    PLUS            shift and go to state 15
    BIT_NEG         shift and go to state 17
    NOT             shift and go to state 18
    LPAREN          shift and go to state 12
    LSQBRACK        shift and go to state 7
    STRING          shift and go to state 20
    IDENTIFIER      shift and go to state 14
    NUM_INT         shift and go to state 22
    NUM_FLOAT       shift and go to state 23
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26

    identifier                     shift and go to state 64
    expression                     shift and go to state 142
    primitive                      shift and go to state 19
    boolean                        shift and go to state 24

state 118

    (73) statement -> FOR LBRACK statement_list . RBRACK
    (2) statement_list -> statement_list . statement
    (3) statement -> . identifier
    (4) statement -> . expression
    (5) statement -> . if_statement
    (7) statement -> . EXIT STMT_END
    (50) statement -> . identifier LSQBRACK expression RSQBRACK EQUALS expression STMT_END
    (57) statement -> . PRINT arguments STMT_END
    (58) statement -> . identifier PLUS_EQ expression STMT_END
    (59) statement -> . identifier MINUS_EQ expression STMT_END
    (60) statement -> . identifier MUL_EQ expression STMT_END
    (61) statement -> . identifier DIV_EQ expression STMT_END
    (62) statement -> . identifier EXP_EQ expression STMT_END
    (63) statement -> . identifier MOD_EQ expression STMT_END
    (69) statement -> . FOR identifier IN expression ARROW_LTR expression LBRACK statement_list RBRACK
    (70) statement -> . FOR identifier IN expression ARROW_RTL expression LBRACK statement_list RBRACK
    (71) statement -> . FOR identifier IN expression LBRACK statement_list RBRACK
    (72) statement -> . WHILE expression LBRACK statement_list RBRACK
    (73) statement -> . FOR LBRACK statement_list RBRACK
    (74) statement -> . FUNCTION identifier LPAREN arguments RPAREN LBRACK statement_list RBRACK
    (75) statement -> . FUNCTION identifier LBRACK statement_list RBRACK
    (76) statement -> . RETURN expression STMT_END
    (78) statement -> . identifier LPAREN arguments RPAREN STMT_END
    (6) identifier -> . IDENTIFIER
    (12) expression -> . expression PLUS expression
    (13) expression -> . expression MINUS expression
    (14) expression -> . expression MUL expression
    (15) expression -> . expression DIV expression
    (16) expression -> . expression EXP expression
    (17) expression -> . expression MOD expression
    (18) expression -> . expression BIT_AND expression
    (19) expression -> . expression BIT_OR expression
    (20) expression -> . expression BIT_XOR expression
    (21) expression -> . expression LSHIFT expression
    (22) expression -> . expression RSHIFT expression
    (31) expression -> . MINUS expression
    (32) expression -> . PLUS expression
    (33) expression -> . BIT_NEG expression
    (34) expression -> . NOT expression
    (35) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression QUESTION_MARK expression COLON expression
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable STMT_END
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier DOUBLE_PLUS
    (65) expression -> . identifier DOUBLE_MINUS
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (77) expression -> . identifier LPAREN arguments RPAREN
    (52) if_statement -> . IF expression LBRACK statement_list RBRACK
    (53) if_statement -> . IF expression LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK
    (54) if_statement -> . IF expression LBRACK statement_list RBRACK ELSE if_statement
    (8) primitive -> . NUM_INT
    (9) primitive -> . NUM_FLOAT
    (10) primitive -> . STRING
    (11) primitive -> . boolean
    (23) boolean -> . expression EQ expression
    (24) boolean -> . expression NEQ expression
    (25) boolean -> . expression GT expression
    (26) boolean -> . expression GTE expression
    (27) boolean -> . expression LT expression
    (28) boolean -> . expression LTE expression
    (29) boolean -> . expression AND expression
    (30) boolean -> . expression OR expression
    (36) boolean -> . TRUE
    (37) boolean -> . FALSE

    RBRACK          shift and go to state 143
    EXIT            shift and go to state 6
    PRINT           shift and go to state 8
    FOR             shift and go to state 9
    WHILE           shift and go to state 10
    FUNCTION        shift and go to state 11
    RETURN          shift and go to state 13
    IDENTIFIER      shift and go to state 14
    MINUS           shift and go to state 16
    PLUS            shift and go to state 15
    BIT_NEG         shift and go to state 17
    NOT             shift and go to state 18
    LPAREN          shift and go to state 12
    LSQBRACK        shift and go to state 7
    STRING          shift and go to state 20
    IF              shift and go to state 21
    NUM_INT         shift and go to state 22
    NUM_FLOAT       shift and go to state 23
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26

    statement                      shift and go to state 27
    identifier                     shift and go to state 3
    expression                     shift and go to state 4
    if_statement                   shift and go to state 5
    primitive                      shift and go to state 19
    boolean                        shift and go to state 24

state 119

    (72) statement -> WHILE expression LBRACK . statement_list RBRACK
    (1) statement_list -> . statement
    (2) statement_list -> . statement_list statement
    (3) statement -> . identifier
    (4) statement -> . expression
    (5) statement -> . if_statement
    (7) statement -> . EXIT STMT_END
    (50) statement -> . identifier LSQBRACK expression RSQBRACK EQUALS expression STMT_END
    (57) statement -> . PRINT arguments STMT_END
    (58) statement -> . identifier PLUS_EQ expression STMT_END
    (59) statement -> . identifier MINUS_EQ expression STMT_END
    (60) statement -> . identifier MUL_EQ expression STMT_END
    (61) statement -> . identifier DIV_EQ expression STMT_END
    (62) statement -> . identifier EXP_EQ expression STMT_END
    (63) statement -> . identifier MOD_EQ expression STMT_END
    (69) statement -> . FOR identifier IN expression ARROW_LTR expression LBRACK statement_list RBRACK
    (70) statement -> . FOR identifier IN expression ARROW_RTL expression LBRACK statement_list RBRACK
    (71) statement -> . FOR identifier IN expression LBRACK statement_list RBRACK
    (72) statement -> . WHILE expression LBRACK statement_list RBRACK
    (73) statement -> . FOR LBRACK statement_list RBRACK
    (74) statement -> . FUNCTION identifier LPAREN arguments RPAREN LBRACK statement_list RBRACK
    (75) statement -> . FUNCTION identifier LBRACK statement_list RBRACK
    (76) statement -> . RETURN expression STMT_END
    (78) statement -> . identifier LPAREN arguments RPAREN STMT_END
    (6) identifier -> . IDENTIFIER
    (12) expression -> . expression PLUS expression
    (13) expression -> . expression MINUS expression
    (14) expression -> . expression MUL expression
    (15) expression -> . expression DIV expression
    (16) expression -> . expression EXP expression
    (17) expression -> . expression MOD expression
    (18) expression -> . expression BIT_AND expression
    (19) expression -> . expression BIT_OR expression
    (20) expression -> . expression BIT_XOR expression
    (21) expression -> . expression LSHIFT expression
    (22) expression -> . expression RSHIFT expression
    (31) expression -> . MINUS expression
    (32) expression -> . PLUS expression
    (33) expression -> . BIT_NEG expression
    (34) expression -> . NOT expression
    (35) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression QUESTION_MARK expression COLON expression
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable STMT_END
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier DOUBLE_PLUS
    (65) expression -> . identifier DOUBLE_MINUS
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (77) expression -> . identifier LPAREN arguments RPAREN
    (52) if_statement -> . IF expression LBRACK statement_list RBRACK
    (53) if_statement -> . IF expression LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK
    (54) if_statement -> . IF expression LBRACK statement_list RBRACK ELSE if_statement
    (8) primitive -> . NUM_INT
    (9) primitive -> . NUM_FLOAT
    (10) primitive -> . STRING
    (11) primitive -> . boolean
    (23) boolean -> . expression EQ expression
    (24) boolean -> . expression NEQ expression
    (25) boolean -> . expression GT expression
    (26) boolean -> . expression GTE expression
    (27) boolean -> . expression LT expression
    (28) boolean -> . expression LTE expression
    (29) boolean -> . expression AND expression
    (30) boolean -> . expression OR expression
    (36) boolean -> . TRUE
    (37) boolean -> . FALSE

    EXIT            shift and go to state 6
    PRINT           shift and go to state 8
    FOR             shift and go to state 9
    WHILE           shift and go to state 10
    FUNCTION        shift and go to state 11
    RETURN          shift and go to state 13
    IDENTIFIER      shift and go to state 14
    MINUS           shift and go to state 16
    PLUS            shift and go to state 15
    BIT_NEG         shift and go to state 17
    NOT             shift and go to state 18
    LPAREN          shift and go to state 12
    LSQBRACK        shift and go to state 7
    STRING          shift and go to state 20
    IF              shift and go to state 21
    NUM_INT         shift and go to state 22
    NUM_FLOAT       shift and go to state 23
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26

    expression                     shift and go to state 4
    statement_list                 shift and go to state 144
    statement                      shift and go to state 2
    identifier                     shift and go to state 3
    if_statement                   shift and go to state 5
    primitive                      shift and go to state 19
    boolean                        shift and go to state 24

state 120

    (74) statement -> FUNCTION identifier LPAREN . arguments RPAREN LBRACK statement_list RBRACK
    (40) arguments -> . arguments COMMA expression
    (41) arguments -> . expression
    (42) arguments -> .
    (12) expression -> . expression PLUS expression
    (13) expression -> . expression MINUS expression
    (14) expression -> . expression MUL expression
    (15) expression -> . expression DIV expression
    (16) expression -> . expression EXP expression
    (17) expression -> . expression MOD expression
    (18) expression -> . expression BIT_AND expression
    (19) expression -> . expression BIT_OR expression
    (20) expression -> . expression BIT_XOR expression
    (21) expression -> . expression LSHIFT expression
    (22) expression -> . expression RSHIFT expression
    (31) expression -> . MINUS expression
    (32) expression -> . PLUS expression
    (33) expression -> . BIT_NEG expression
    (34) expression -> . NOT expression
    (35) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression QUESTION_MARK expression COLON expression
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable STMT_END
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier DOUBLE_PLUS
    (65) expression -> . identifier DOUBLE_MINUS
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (77) expression -> . identifier LPAREN arguments RPAREN
    (6) identifier -> . IDENTIFIER
    (8) primitive -> . NUM_INT
    (9) primitive -> . NUM_FLOAT
    (10) primitive -> . STRING
    (11) primitive -> . boolean
    (23) boolean -> . expression EQ expression
    (24) boolean -> . expression NEQ expression
    (25) boolean -> . expression GT expression
    (26) boolean -> . expression GTE expression
    (27) boolean -> . expression LT expression
    (28) boolean -> . expression LTE expression
    (29) boolean -> . expression AND expression
    (30) boolean -> . expression OR expression
    (36) boolean -> . TRUE
    (37) boolean -> . FALSE

    RPAREN          reduce using rule 42 (arguments -> .)
    COMMA           reduce using rule 42 (arguments -> .)
    MINUS           shift and go to state 16
    PLUS            shift and go to state 15
    BIT_NEG         shift and go to state 17
    NOT             shift and go to state 18
    LPAREN          shift and go to state 12
    LSQBRACK        shift and go to state 7
    STRING          shift and go to state 20
    IDENTIFIER      shift and go to state 14
    NUM_INT         shift and go to state 22
    NUM_FLOAT       shift and go to state 23
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26

    identifier                     shift and go to state 64
    arguments                      shift and go to state 145
    expression                     shift and go to state 63
    primitive                      shift and go to state 19
    boolean                        shift and go to state 24

state 121

    (75) statement -> FUNCTION identifier LBRACK . statement_list RBRACK
    (1) statement_list -> . statement
    (2) statement_list -> . statement_list statement
    (3) statement -> . identifier
    (4) statement -> . expression
    (5) statement -> . if_statement
    (7) statement -> . EXIT STMT_END
    (50) statement -> . identifier LSQBRACK expression RSQBRACK EQUALS expression STMT_END
    (57) statement -> . PRINT arguments STMT_END
    (58) statement -> . identifier PLUS_EQ expression STMT_END
    (59) statement -> . identifier MINUS_EQ expression STMT_END
    (60) statement -> . identifier MUL_EQ expression STMT_END
    (61) statement -> . identifier DIV_EQ expression STMT_END
    (62) statement -> . identifier EXP_EQ expression STMT_END
    (63) statement -> . identifier MOD_EQ expression STMT_END
    (69) statement -> . FOR identifier IN expression ARROW_LTR expression LBRACK statement_list RBRACK
    (70) statement -> . FOR identifier IN expression ARROW_RTL expression LBRACK statement_list RBRACK
    (71) statement -> . FOR identifier IN expression LBRACK statement_list RBRACK
    (72) statement -> . WHILE expression LBRACK statement_list RBRACK
    (73) statement -> . FOR LBRACK statement_list RBRACK
    (74) statement -> . FUNCTION identifier LPAREN arguments RPAREN LBRACK statement_list RBRACK
    (75) statement -> . FUNCTION identifier LBRACK statement_list RBRACK
    (76) statement -> . RETURN expression STMT_END
    (78) statement -> . identifier LPAREN arguments RPAREN STMT_END
    (6) identifier -> . IDENTIFIER
    (12) expression -> . expression PLUS expression
    (13) expression -> . expression MINUS expression
    (14) expression -> . expression MUL expression
    (15) expression -> . expression DIV expression
    (16) expression -> . expression EXP expression
    (17) expression -> . expression MOD expression
    (18) expression -> . expression BIT_AND expression
    (19) expression -> . expression BIT_OR expression
    (20) expression -> . expression BIT_XOR expression
    (21) expression -> . expression LSHIFT expression
    (22) expression -> . expression RSHIFT expression
    (31) expression -> . MINUS expression
    (32) expression -> . PLUS expression
    (33) expression -> . BIT_NEG expression
    (34) expression -> . NOT expression
    (35) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression QUESTION_MARK expression COLON expression
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable STMT_END
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier DOUBLE_PLUS
    (65) expression -> . identifier DOUBLE_MINUS
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (77) expression -> . identifier LPAREN arguments RPAREN
    (52) if_statement -> . IF expression LBRACK statement_list RBRACK
    (53) if_statement -> . IF expression LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK
    (54) if_statement -> . IF expression LBRACK statement_list RBRACK ELSE if_statement
    (8) primitive -> . NUM_INT
    (9) primitive -> . NUM_FLOAT
    (10) primitive -> . STRING
    (11) primitive -> . boolean
    (23) boolean -> . expression EQ expression
    (24) boolean -> . expression NEQ expression
    (25) boolean -> . expression GT expression
    (26) boolean -> . expression GTE expression
    (27) boolean -> . expression LT expression
    (28) boolean -> . expression LTE expression
    (29) boolean -> . expression AND expression
    (30) boolean -> . expression OR expression
    (36) boolean -> . TRUE
    (37) boolean -> . FALSE

    EXIT            shift and go to state 6
    PRINT           shift and go to state 8
    FOR             shift and go to state 9
    WHILE           shift and go to state 10
    FUNCTION        shift and go to state 11
    RETURN          shift and go to state 13
    IDENTIFIER      shift and go to state 14
    MINUS           shift and go to state 16
    PLUS            shift and go to state 15
    BIT_NEG         shift and go to state 17
    NOT             shift and go to state 18
    LPAREN          shift and go to state 12
    LSQBRACK        shift and go to state 7
    STRING          shift and go to state 20
    IF              shift and go to state 21
    NUM_INT         shift and go to state 22
    NUM_FLOAT       shift and go to state 23
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26

    identifier                     shift and go to state 3
    statement_list                 shift and go to state 146
    statement                      shift and go to state 2
    expression                     shift and go to state 4
    if_statement                   shift and go to state 5
    primitive                      shift and go to state 19
    boolean                        shift and go to state 24

state 122

    (35) expression -> LPAREN expression RPAREN .

    PLUS            reduce using rule 35 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 35 (expression -> LPAREN expression RPAREN .)
    MUL             reduce using rule 35 (expression -> LPAREN expression RPAREN .)
    DIV             reduce using rule 35 (expression -> LPAREN expression RPAREN .)
    EXP             reduce using rule 35 (expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 35 (expression -> LPAREN expression RPAREN .)
    BIT_AND         reduce using rule 35 (expression -> LPAREN expression RPAREN .)
    BIT_OR          reduce using rule 35 (expression -> LPAREN expression RPAREN .)
    BIT_XOR         reduce using rule 35 (expression -> LPAREN expression RPAREN .)
    LSHIFT          reduce using rule 35 (expression -> LPAREN expression RPAREN .)
    RSHIFT          reduce using rule 35 (expression -> LPAREN expression RPAREN .)
    QUESTION_MARK   reduce using rule 35 (expression -> LPAREN expression RPAREN .)
    IN              reduce using rule 35 (expression -> LPAREN expression RPAREN .)
    NOT             reduce using rule 35 (expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 35 (expression -> LPAREN expression RPAREN .)
    NEQ             reduce using rule 35 (expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 35 (expression -> LPAREN expression RPAREN .)
    GTE             reduce using rule 35 (expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 35 (expression -> LPAREN expression RPAREN .)
    LTE             reduce using rule 35 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 35 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 35 (expression -> LPAREN expression RPAREN .)
    EXIT            reduce using rule 35 (expression -> LPAREN expression RPAREN .)
    PRINT           reduce using rule 35 (expression -> LPAREN expression RPAREN .)
    FOR             reduce using rule 35 (expression -> LPAREN expression RPAREN .)
    WHILE           reduce using rule 35 (expression -> LPAREN expression RPAREN .)
    FUNCTION        reduce using rule 35 (expression -> LPAREN expression RPAREN .)
    RETURN          reduce using rule 35 (expression -> LPAREN expression RPAREN .)
    IDENTIFIER      reduce using rule 35 (expression -> LPAREN expression RPAREN .)
    BIT_NEG         reduce using rule 35 (expression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 35 (expression -> LPAREN expression RPAREN .)
    LSQBRACK        reduce using rule 35 (expression -> LPAREN expression RPAREN .)
    STRING          reduce using rule 35 (expression -> LPAREN expression RPAREN .)
    IF              reduce using rule 35 (expression -> LPAREN expression RPAREN .)
    NUM_INT         reduce using rule 35 (expression -> LPAREN expression RPAREN .)
    NUM_FLOAT       reduce using rule 35 (expression -> LPAREN expression RPAREN .)
    TRUE            reduce using rule 35 (expression -> LPAREN expression RPAREN .)
    FALSE           reduce using rule 35 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 35 (expression -> LPAREN expression RPAREN .)
    RSQBRACK        reduce using rule 35 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 35 (expression -> LPAREN expression RPAREN .)
    STMT_END        reduce using rule 35 (expression -> LPAREN expression RPAREN .)
    LBRACK          reduce using rule 35 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 35 (expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 35 (expression -> LPAREN expression RPAREN .)
    RBRACK          reduce using rule 35 (expression -> LPAREN expression RPAREN .)
    ARROW_LTR       reduce using rule 35 (expression -> LPAREN expression RPAREN .)
    ARROW_RTL       reduce using rule 35 (expression -> LPAREN expression RPAREN .)


state 123

    (76) statement -> RETURN expression STMT_END .

    EXIT            reduce using rule 76 (statement -> RETURN expression STMT_END .)
    PRINT           reduce using rule 76 (statement -> RETURN expression STMT_END .)
    FOR             reduce using rule 76 (statement -> RETURN expression STMT_END .)
    WHILE           reduce using rule 76 (statement -> RETURN expression STMT_END .)
    FUNCTION        reduce using rule 76 (statement -> RETURN expression STMT_END .)
    RETURN          reduce using rule 76 (statement -> RETURN expression STMT_END .)
    IDENTIFIER      reduce using rule 76 (statement -> RETURN expression STMT_END .)
    MINUS           reduce using rule 76 (statement -> RETURN expression STMT_END .)
    PLUS            reduce using rule 76 (statement -> RETURN expression STMT_END .)
    BIT_NEG         reduce using rule 76 (statement -> RETURN expression STMT_END .)
    NOT             reduce using rule 76 (statement -> RETURN expression STMT_END .)
    LPAREN          reduce using rule 76 (statement -> RETURN expression STMT_END .)
    LSQBRACK        reduce using rule 76 (statement -> RETURN expression STMT_END .)
    STRING          reduce using rule 76 (statement -> RETURN expression STMT_END .)
    IF              reduce using rule 76 (statement -> RETURN expression STMT_END .)
    NUM_INT         reduce using rule 76 (statement -> RETURN expression STMT_END .)
    NUM_FLOAT       reduce using rule 76 (statement -> RETURN expression STMT_END .)
    TRUE            reduce using rule 76 (statement -> RETURN expression STMT_END .)
    FALSE           reduce using rule 76 (statement -> RETURN expression STMT_END .)
    $end            reduce using rule 76 (statement -> RETURN expression STMT_END .)
    RBRACK          reduce using rule 76 (statement -> RETURN expression STMT_END .)


state 124

    (52) if_statement -> IF expression LBRACK . statement_list RBRACK
    (53) if_statement -> IF expression LBRACK . statement_list RBRACK ELSE LBRACK statement_list RBRACK
    (54) if_statement -> IF expression LBRACK . statement_list RBRACK ELSE if_statement
    (1) statement_list -> . statement
    (2) statement_list -> . statement_list statement
    (3) statement -> . identifier
    (4) statement -> . expression
    (5) statement -> . if_statement
    (7) statement -> . EXIT STMT_END
    (50) statement -> . identifier LSQBRACK expression RSQBRACK EQUALS expression STMT_END
    (57) statement -> . PRINT arguments STMT_END
    (58) statement -> . identifier PLUS_EQ expression STMT_END
    (59) statement -> . identifier MINUS_EQ expression STMT_END
    (60) statement -> . identifier MUL_EQ expression STMT_END
    (61) statement -> . identifier DIV_EQ expression STMT_END
    (62) statement -> . identifier EXP_EQ expression STMT_END
    (63) statement -> . identifier MOD_EQ expression STMT_END
    (69) statement -> . FOR identifier IN expression ARROW_LTR expression LBRACK statement_list RBRACK
    (70) statement -> . FOR identifier IN expression ARROW_RTL expression LBRACK statement_list RBRACK
    (71) statement -> . FOR identifier IN expression LBRACK statement_list RBRACK
    (72) statement -> . WHILE expression LBRACK statement_list RBRACK
    (73) statement -> . FOR LBRACK statement_list RBRACK
    (74) statement -> . FUNCTION identifier LPAREN arguments RPAREN LBRACK statement_list RBRACK
    (75) statement -> . FUNCTION identifier LBRACK statement_list RBRACK
    (76) statement -> . RETURN expression STMT_END
    (78) statement -> . identifier LPAREN arguments RPAREN STMT_END
    (6) identifier -> . IDENTIFIER
    (12) expression -> . expression PLUS expression
    (13) expression -> . expression MINUS expression
    (14) expression -> . expression MUL expression
    (15) expression -> . expression DIV expression
    (16) expression -> . expression EXP expression
    (17) expression -> . expression MOD expression
    (18) expression -> . expression BIT_AND expression
    (19) expression -> . expression BIT_OR expression
    (20) expression -> . expression BIT_XOR expression
    (21) expression -> . expression LSHIFT expression
    (22) expression -> . expression RSHIFT expression
    (31) expression -> . MINUS expression
    (32) expression -> . PLUS expression
    (33) expression -> . BIT_NEG expression
    (34) expression -> . NOT expression
    (35) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression QUESTION_MARK expression COLON expression
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable STMT_END
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier DOUBLE_PLUS
    (65) expression -> . identifier DOUBLE_MINUS
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (77) expression -> . identifier LPAREN arguments RPAREN
    (52) if_statement -> . IF expression LBRACK statement_list RBRACK
    (53) if_statement -> . IF expression LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK
    (54) if_statement -> . IF expression LBRACK statement_list RBRACK ELSE if_statement
    (8) primitive -> . NUM_INT
    (9) primitive -> . NUM_FLOAT
    (10) primitive -> . STRING
    (11) primitive -> . boolean
    (23) boolean -> . expression EQ expression
    (24) boolean -> . expression NEQ expression
    (25) boolean -> . expression GT expression
    (26) boolean -> . expression GTE expression
    (27) boolean -> . expression LT expression
    (28) boolean -> . expression LTE expression
    (29) boolean -> . expression AND expression
    (30) boolean -> . expression OR expression
    (36) boolean -> . TRUE
    (37) boolean -> . FALSE

    EXIT            shift and go to state 6
    PRINT           shift and go to state 8
    FOR             shift and go to state 9
    WHILE           shift and go to state 10
    FUNCTION        shift and go to state 11
    RETURN          shift and go to state 13
    IDENTIFIER      shift and go to state 14
    MINUS           shift and go to state 16
    PLUS            shift and go to state 15
    BIT_NEG         shift and go to state 17
    NOT             shift and go to state 18
    LPAREN          shift and go to state 12
    LSQBRACK        shift and go to state 7
    STRING          shift and go to state 20
    IF              shift and go to state 21
    NUM_INT         shift and go to state 22
    NUM_FLOAT       shift and go to state 23
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26

    expression                     shift and go to state 4
    statement_list                 shift and go to state 147
    if_statement                   shift and go to state 5
    statement                      shift and go to state 2
    identifier                     shift and go to state 3
    primitive                      shift and go to state 19
    boolean                        shift and go to state 24

state 125

    (50) statement -> identifier LSQBRACK expression RSQBRACK . EQUALS expression STMT_END
    (45) expression -> identifier LSQBRACK expression RSQBRACK .

    EQUALS          shift and go to state 148
    PLUS            reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    MINUS           reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    MUL             reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    DIV             reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    EXP             reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    MOD             reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    BIT_AND         reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    BIT_OR          reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    BIT_XOR         reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    LSHIFT          reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    RSHIFT          reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    QUESTION_MARK   reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    IN              reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    NOT             reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    EQ              reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    NEQ             reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    GT              reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    GTE             reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    LT              reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    LTE             reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    AND             reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    OR              reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    EXIT            reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    PRINT           reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    FOR             reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    WHILE           reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    FUNCTION        reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    RETURN          reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    IDENTIFIER      reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    BIT_NEG         reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    LPAREN          reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    LSQBRACK        reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    STRING          reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    IF              reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    NUM_INT         reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    NUM_FLOAT       reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    TRUE            reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    FALSE           reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    $end            reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    RBRACK          reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)


state 126

    (46) expression -> identifier LSQBRACK expression COLON . expression RSQBRACK
    (48) expression -> identifier LSQBRACK expression COLON . RSQBRACK
    (12) expression -> . expression PLUS expression
    (13) expression -> . expression MINUS expression
    (14) expression -> . expression MUL expression
    (15) expression -> . expression DIV expression
    (16) expression -> . expression EXP expression
    (17) expression -> . expression MOD expression
    (18) expression -> . expression BIT_AND expression
    (19) expression -> . expression BIT_OR expression
    (20) expression -> . expression BIT_XOR expression
    (21) expression -> . expression LSHIFT expression
    (22) expression -> . expression RSHIFT expression
    (31) expression -> . MINUS expression
    (32) expression -> . PLUS expression
    (33) expression -> . BIT_NEG expression
    (34) expression -> . NOT expression
    (35) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression QUESTION_MARK expression COLON expression
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable STMT_END
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier DOUBLE_PLUS
    (65) expression -> . identifier DOUBLE_MINUS
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (77) expression -> . identifier LPAREN arguments RPAREN
    (6) identifier -> . IDENTIFIER
    (8) primitive -> . NUM_INT
    (9) primitive -> . NUM_FLOAT
    (10) primitive -> . STRING
    (11) primitive -> . boolean
    (23) boolean -> . expression EQ expression
    (24) boolean -> . expression NEQ expression
    (25) boolean -> . expression GT expression
    (26) boolean -> . expression GTE expression
    (27) boolean -> . expression LT expression
    (28) boolean -> . expression LTE expression
    (29) boolean -> . expression AND expression
    (30) boolean -> . expression OR expression
    (36) boolean -> . TRUE
    (37) boolean -> . FALSE

    RSQBRACK        shift and go to state 150
    MINUS           shift and go to state 16
    PLUS            shift and go to state 15
    BIT_NEG         shift and go to state 17
    NOT             shift and go to state 18
    LPAREN          shift and go to state 12
    LSQBRACK        shift and go to state 7
    STRING          shift and go to state 20
    IDENTIFIER      shift and go to state 14
    NUM_INT         shift and go to state 22
    NUM_FLOAT       shift and go to state 23
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26

    identifier                     shift and go to state 64
    expression                     shift and go to state 149
    primitive                      shift and go to state 19
    boolean                        shift and go to state 24

state 127

    (47) expression -> identifier LSQBRACK COLON expression . RSQBRACK
    (12) expression -> expression . PLUS expression
    (13) expression -> expression . MINUS expression
    (14) expression -> expression . MUL expression
    (15) expression -> expression . DIV expression
    (16) expression -> expression . EXP expression
    (17) expression -> expression . MOD expression
    (18) expression -> expression . BIT_AND expression
    (19) expression -> expression . BIT_OR expression
    (20) expression -> expression . BIT_XOR expression
    (21) expression -> expression . LSHIFT expression
    (22) expression -> expression . RSHIFT expression
    (43) expression -> expression . QUESTION_MARK expression COLON expression
    (55) expression -> expression . IN expression
    (56) expression -> expression . NOT IN expression
    (23) boolean -> expression . EQ expression
    (24) boolean -> expression . NEQ expression
    (25) boolean -> expression . GT expression
    (26) boolean -> expression . GTE expression
    (27) boolean -> expression . LT expression
    (28) boolean -> expression . LTE expression
    (29) boolean -> expression . AND expression
    (30) boolean -> expression . OR expression

    RSQBRACK        shift and go to state 151
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    MUL             shift and go to state 41
    DIV             shift and go to state 42
    EXP             shift and go to state 43
    MOD             shift and go to state 44
    BIT_AND         shift and go to state 45
    BIT_OR          shift and go to state 46
    BIT_XOR         shift and go to state 47
    LSHIFT          shift and go to state 48
    RSHIFT          shift and go to state 49
    QUESTION_MARK   shift and go to state 50
    IN              shift and go to state 51
    NOT             shift and go to state 52
    EQ              shift and go to state 53
    NEQ             shift and go to state 54
    GT              shift and go to state 55
    GTE             shift and go to state 56
    LT              shift and go to state 57
    LTE             shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60


state 128

    (49) expression -> identifier LSQBRACK COLON RSQBRACK .

    PLUS            reduce using rule 49 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    MINUS           reduce using rule 49 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    MUL             reduce using rule 49 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    DIV             reduce using rule 49 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    EXP             reduce using rule 49 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    MOD             reduce using rule 49 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    BIT_AND         reduce using rule 49 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    BIT_OR          reduce using rule 49 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    BIT_XOR         reduce using rule 49 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    LSHIFT          reduce using rule 49 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    RSHIFT          reduce using rule 49 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    QUESTION_MARK   reduce using rule 49 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    IN              reduce using rule 49 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    NOT             reduce using rule 49 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    EQ              reduce using rule 49 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    NEQ             reduce using rule 49 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    GT              reduce using rule 49 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    GTE             reduce using rule 49 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    LT              reduce using rule 49 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    LTE             reduce using rule 49 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    AND             reduce using rule 49 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    OR              reduce using rule 49 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    EXIT            reduce using rule 49 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    PRINT           reduce using rule 49 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    FOR             reduce using rule 49 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    WHILE           reduce using rule 49 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    FUNCTION        reduce using rule 49 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    RETURN          reduce using rule 49 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    IDENTIFIER      reduce using rule 49 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    BIT_NEG         reduce using rule 49 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    LPAREN          reduce using rule 49 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    LSQBRACK        reduce using rule 49 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    STRING          reduce using rule 49 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    IF              reduce using rule 49 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    NUM_INT         reduce using rule 49 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    NUM_FLOAT       reduce using rule 49 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    TRUE            reduce using rule 49 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    FALSE           reduce using rule 49 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    $end            reduce using rule 49 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    RSQBRACK        reduce using rule 49 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    COMMA           reduce using rule 49 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    STMT_END        reduce using rule 49 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    LBRACK          reduce using rule 49 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    RPAREN          reduce using rule 49 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    COLON           reduce using rule 49 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    RBRACK          reduce using rule 49 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    ARROW_LTR       reduce using rule 49 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    ARROW_RTL       reduce using rule 49 (expression -> identifier LSQBRACK COLON RSQBRACK .)


state 129

    (51) expression -> identifier EQUALS assignable STMT_END .

    PLUS            reduce using rule 51 (expression -> identifier EQUALS assignable STMT_END .)
    MINUS           reduce using rule 51 (expression -> identifier EQUALS assignable STMT_END .)
    MUL             reduce using rule 51 (expression -> identifier EQUALS assignable STMT_END .)
    DIV             reduce using rule 51 (expression -> identifier EQUALS assignable STMT_END .)
    EXP             reduce using rule 51 (expression -> identifier EQUALS assignable STMT_END .)
    MOD             reduce using rule 51 (expression -> identifier EQUALS assignable STMT_END .)
    BIT_AND         reduce using rule 51 (expression -> identifier EQUALS assignable STMT_END .)
    BIT_OR          reduce using rule 51 (expression -> identifier EQUALS assignable STMT_END .)
    BIT_XOR         reduce using rule 51 (expression -> identifier EQUALS assignable STMT_END .)
    LSHIFT          reduce using rule 51 (expression -> identifier EQUALS assignable STMT_END .)
    RSHIFT          reduce using rule 51 (expression -> identifier EQUALS assignable STMT_END .)
    QUESTION_MARK   reduce using rule 51 (expression -> identifier EQUALS assignable STMT_END .)
    IN              reduce using rule 51 (expression -> identifier EQUALS assignable STMT_END .)
    NOT             reduce using rule 51 (expression -> identifier EQUALS assignable STMT_END .)
    EQ              reduce using rule 51 (expression -> identifier EQUALS assignable STMT_END .)
    NEQ             reduce using rule 51 (expression -> identifier EQUALS assignable STMT_END .)
    GT              reduce using rule 51 (expression -> identifier EQUALS assignable STMT_END .)
    GTE             reduce using rule 51 (expression -> identifier EQUALS assignable STMT_END .)
    LT              reduce using rule 51 (expression -> identifier EQUALS assignable STMT_END .)
    LTE             reduce using rule 51 (expression -> identifier EQUALS assignable STMT_END .)
    AND             reduce using rule 51 (expression -> identifier EQUALS assignable STMT_END .)
    OR              reduce using rule 51 (expression -> identifier EQUALS assignable STMT_END .)
    EXIT            reduce using rule 51 (expression -> identifier EQUALS assignable STMT_END .)
    PRINT           reduce using rule 51 (expression -> identifier EQUALS assignable STMT_END .)
    FOR             reduce using rule 51 (expression -> identifier EQUALS assignable STMT_END .)
    WHILE           reduce using rule 51 (expression -> identifier EQUALS assignable STMT_END .)
    FUNCTION        reduce using rule 51 (expression -> identifier EQUALS assignable STMT_END .)
    RETURN          reduce using rule 51 (expression -> identifier EQUALS assignable STMT_END .)
    IDENTIFIER      reduce using rule 51 (expression -> identifier EQUALS assignable STMT_END .)
    BIT_NEG         reduce using rule 51 (expression -> identifier EQUALS assignable STMT_END .)
    LPAREN          reduce using rule 51 (expression -> identifier EQUALS assignable STMT_END .)
    LSQBRACK        reduce using rule 51 (expression -> identifier EQUALS assignable STMT_END .)
    STRING          reduce using rule 51 (expression -> identifier EQUALS assignable STMT_END .)
    IF              reduce using rule 51 (expression -> identifier EQUALS assignable STMT_END .)
    NUM_INT         reduce using rule 51 (expression -> identifier EQUALS assignable STMT_END .)
    NUM_FLOAT       reduce using rule 51 (expression -> identifier EQUALS assignable STMT_END .)
    TRUE            reduce using rule 51 (expression -> identifier EQUALS assignable STMT_END .)
    FALSE           reduce using rule 51 (expression -> identifier EQUALS assignable STMT_END .)
    $end            reduce using rule 51 (expression -> identifier EQUALS assignable STMT_END .)
    RSQBRACK        reduce using rule 51 (expression -> identifier EQUALS assignable STMT_END .)
    COMMA           reduce using rule 51 (expression -> identifier EQUALS assignable STMT_END .)
    STMT_END        reduce using rule 51 (expression -> identifier EQUALS assignable STMT_END .)
    LBRACK          reduce using rule 51 (expression -> identifier EQUALS assignable STMT_END .)
    RPAREN          reduce using rule 51 (expression -> identifier EQUALS assignable STMT_END .)
    COLON           reduce using rule 51 (expression -> identifier EQUALS assignable STMT_END .)
    RBRACK          reduce using rule 51 (expression -> identifier EQUALS assignable STMT_END .)
    ARROW_LTR       reduce using rule 51 (expression -> identifier EQUALS assignable STMT_END .)
    ARROW_RTL       reduce using rule 51 (expression -> identifier EQUALS assignable STMT_END .)


state 130

    (58) statement -> identifier PLUS_EQ expression STMT_END .

    EXIT            reduce using rule 58 (statement -> identifier PLUS_EQ expression STMT_END .)
    PRINT           reduce using rule 58 (statement -> identifier PLUS_EQ expression STMT_END .)
    FOR             reduce using rule 58 (statement -> identifier PLUS_EQ expression STMT_END .)
    WHILE           reduce using rule 58 (statement -> identifier PLUS_EQ expression STMT_END .)
    FUNCTION        reduce using rule 58 (statement -> identifier PLUS_EQ expression STMT_END .)
    RETURN          reduce using rule 58 (statement -> identifier PLUS_EQ expression STMT_END .)
    IDENTIFIER      reduce using rule 58 (statement -> identifier PLUS_EQ expression STMT_END .)
    MINUS           reduce using rule 58 (statement -> identifier PLUS_EQ expression STMT_END .)
    PLUS            reduce using rule 58 (statement -> identifier PLUS_EQ expression STMT_END .)
    BIT_NEG         reduce using rule 58 (statement -> identifier PLUS_EQ expression STMT_END .)
    NOT             reduce using rule 58 (statement -> identifier PLUS_EQ expression STMT_END .)
    LPAREN          reduce using rule 58 (statement -> identifier PLUS_EQ expression STMT_END .)
    LSQBRACK        reduce using rule 58 (statement -> identifier PLUS_EQ expression STMT_END .)
    STRING          reduce using rule 58 (statement -> identifier PLUS_EQ expression STMT_END .)
    IF              reduce using rule 58 (statement -> identifier PLUS_EQ expression STMT_END .)
    NUM_INT         reduce using rule 58 (statement -> identifier PLUS_EQ expression STMT_END .)
    NUM_FLOAT       reduce using rule 58 (statement -> identifier PLUS_EQ expression STMT_END .)
    TRUE            reduce using rule 58 (statement -> identifier PLUS_EQ expression STMT_END .)
    FALSE           reduce using rule 58 (statement -> identifier PLUS_EQ expression STMT_END .)
    $end            reduce using rule 58 (statement -> identifier PLUS_EQ expression STMT_END .)
    RBRACK          reduce using rule 58 (statement -> identifier PLUS_EQ expression STMT_END .)


state 131

    (59) statement -> identifier MINUS_EQ expression STMT_END .

    EXIT            reduce using rule 59 (statement -> identifier MINUS_EQ expression STMT_END .)
    PRINT           reduce using rule 59 (statement -> identifier MINUS_EQ expression STMT_END .)
    FOR             reduce using rule 59 (statement -> identifier MINUS_EQ expression STMT_END .)
    WHILE           reduce using rule 59 (statement -> identifier MINUS_EQ expression STMT_END .)
    FUNCTION        reduce using rule 59 (statement -> identifier MINUS_EQ expression STMT_END .)
    RETURN          reduce using rule 59 (statement -> identifier MINUS_EQ expression STMT_END .)
    IDENTIFIER      reduce using rule 59 (statement -> identifier MINUS_EQ expression STMT_END .)
    MINUS           reduce using rule 59 (statement -> identifier MINUS_EQ expression STMT_END .)
    PLUS            reduce using rule 59 (statement -> identifier MINUS_EQ expression STMT_END .)
    BIT_NEG         reduce using rule 59 (statement -> identifier MINUS_EQ expression STMT_END .)
    NOT             reduce using rule 59 (statement -> identifier MINUS_EQ expression STMT_END .)
    LPAREN          reduce using rule 59 (statement -> identifier MINUS_EQ expression STMT_END .)
    LSQBRACK        reduce using rule 59 (statement -> identifier MINUS_EQ expression STMT_END .)
    STRING          reduce using rule 59 (statement -> identifier MINUS_EQ expression STMT_END .)
    IF              reduce using rule 59 (statement -> identifier MINUS_EQ expression STMT_END .)
    NUM_INT         reduce using rule 59 (statement -> identifier MINUS_EQ expression STMT_END .)
    NUM_FLOAT       reduce using rule 59 (statement -> identifier MINUS_EQ expression STMT_END .)
    TRUE            reduce using rule 59 (statement -> identifier MINUS_EQ expression STMT_END .)
    FALSE           reduce using rule 59 (statement -> identifier MINUS_EQ expression STMT_END .)
    $end            reduce using rule 59 (statement -> identifier MINUS_EQ expression STMT_END .)
    RBRACK          reduce using rule 59 (statement -> identifier MINUS_EQ expression STMT_END .)


state 132

    (60) statement -> identifier MUL_EQ expression STMT_END .

    EXIT            reduce using rule 60 (statement -> identifier MUL_EQ expression STMT_END .)
    PRINT           reduce using rule 60 (statement -> identifier MUL_EQ expression STMT_END .)
    FOR             reduce using rule 60 (statement -> identifier MUL_EQ expression STMT_END .)
    WHILE           reduce using rule 60 (statement -> identifier MUL_EQ expression STMT_END .)
    FUNCTION        reduce using rule 60 (statement -> identifier MUL_EQ expression STMT_END .)
    RETURN          reduce using rule 60 (statement -> identifier MUL_EQ expression STMT_END .)
    IDENTIFIER      reduce using rule 60 (statement -> identifier MUL_EQ expression STMT_END .)
    MINUS           reduce using rule 60 (statement -> identifier MUL_EQ expression STMT_END .)
    PLUS            reduce using rule 60 (statement -> identifier MUL_EQ expression STMT_END .)
    BIT_NEG         reduce using rule 60 (statement -> identifier MUL_EQ expression STMT_END .)
    NOT             reduce using rule 60 (statement -> identifier MUL_EQ expression STMT_END .)
    LPAREN          reduce using rule 60 (statement -> identifier MUL_EQ expression STMT_END .)
    LSQBRACK        reduce using rule 60 (statement -> identifier MUL_EQ expression STMT_END .)
    STRING          reduce using rule 60 (statement -> identifier MUL_EQ expression STMT_END .)
    IF              reduce using rule 60 (statement -> identifier MUL_EQ expression STMT_END .)
    NUM_INT         reduce using rule 60 (statement -> identifier MUL_EQ expression STMT_END .)
    NUM_FLOAT       reduce using rule 60 (statement -> identifier MUL_EQ expression STMT_END .)
    TRUE            reduce using rule 60 (statement -> identifier MUL_EQ expression STMT_END .)
    FALSE           reduce using rule 60 (statement -> identifier MUL_EQ expression STMT_END .)
    $end            reduce using rule 60 (statement -> identifier MUL_EQ expression STMT_END .)
    RBRACK          reduce using rule 60 (statement -> identifier MUL_EQ expression STMT_END .)


state 133

    (61) statement -> identifier DIV_EQ expression STMT_END .

    EXIT            reduce using rule 61 (statement -> identifier DIV_EQ expression STMT_END .)
    PRINT           reduce using rule 61 (statement -> identifier DIV_EQ expression STMT_END .)
    FOR             reduce using rule 61 (statement -> identifier DIV_EQ expression STMT_END .)
    WHILE           reduce using rule 61 (statement -> identifier DIV_EQ expression STMT_END .)
    FUNCTION        reduce using rule 61 (statement -> identifier DIV_EQ expression STMT_END .)
    RETURN          reduce using rule 61 (statement -> identifier DIV_EQ expression STMT_END .)
    IDENTIFIER      reduce using rule 61 (statement -> identifier DIV_EQ expression STMT_END .)
    MINUS           reduce using rule 61 (statement -> identifier DIV_EQ expression STMT_END .)
    PLUS            reduce using rule 61 (statement -> identifier DIV_EQ expression STMT_END .)
    BIT_NEG         reduce using rule 61 (statement -> identifier DIV_EQ expression STMT_END .)
    NOT             reduce using rule 61 (statement -> identifier DIV_EQ expression STMT_END .)
    LPAREN          reduce using rule 61 (statement -> identifier DIV_EQ expression STMT_END .)
    LSQBRACK        reduce using rule 61 (statement -> identifier DIV_EQ expression STMT_END .)
    STRING          reduce using rule 61 (statement -> identifier DIV_EQ expression STMT_END .)
    IF              reduce using rule 61 (statement -> identifier DIV_EQ expression STMT_END .)
    NUM_INT         reduce using rule 61 (statement -> identifier DIV_EQ expression STMT_END .)
    NUM_FLOAT       reduce using rule 61 (statement -> identifier DIV_EQ expression STMT_END .)
    TRUE            reduce using rule 61 (statement -> identifier DIV_EQ expression STMT_END .)
    FALSE           reduce using rule 61 (statement -> identifier DIV_EQ expression STMT_END .)
    $end            reduce using rule 61 (statement -> identifier DIV_EQ expression STMT_END .)
    RBRACK          reduce using rule 61 (statement -> identifier DIV_EQ expression STMT_END .)


state 134

    (62) statement -> identifier EXP_EQ expression STMT_END .

    EXIT            reduce using rule 62 (statement -> identifier EXP_EQ expression STMT_END .)
    PRINT           reduce using rule 62 (statement -> identifier EXP_EQ expression STMT_END .)
    FOR             reduce using rule 62 (statement -> identifier EXP_EQ expression STMT_END .)
    WHILE           reduce using rule 62 (statement -> identifier EXP_EQ expression STMT_END .)
    FUNCTION        reduce using rule 62 (statement -> identifier EXP_EQ expression STMT_END .)
    RETURN          reduce using rule 62 (statement -> identifier EXP_EQ expression STMT_END .)
    IDENTIFIER      reduce using rule 62 (statement -> identifier EXP_EQ expression STMT_END .)
    MINUS           reduce using rule 62 (statement -> identifier EXP_EQ expression STMT_END .)
    PLUS            reduce using rule 62 (statement -> identifier EXP_EQ expression STMT_END .)
    BIT_NEG         reduce using rule 62 (statement -> identifier EXP_EQ expression STMT_END .)
    NOT             reduce using rule 62 (statement -> identifier EXP_EQ expression STMT_END .)
    LPAREN          reduce using rule 62 (statement -> identifier EXP_EQ expression STMT_END .)
    LSQBRACK        reduce using rule 62 (statement -> identifier EXP_EQ expression STMT_END .)
    STRING          reduce using rule 62 (statement -> identifier EXP_EQ expression STMT_END .)
    IF              reduce using rule 62 (statement -> identifier EXP_EQ expression STMT_END .)
    NUM_INT         reduce using rule 62 (statement -> identifier EXP_EQ expression STMT_END .)
    NUM_FLOAT       reduce using rule 62 (statement -> identifier EXP_EQ expression STMT_END .)
    TRUE            reduce using rule 62 (statement -> identifier EXP_EQ expression STMT_END .)
    FALSE           reduce using rule 62 (statement -> identifier EXP_EQ expression STMT_END .)
    $end            reduce using rule 62 (statement -> identifier EXP_EQ expression STMT_END .)
    RBRACK          reduce using rule 62 (statement -> identifier EXP_EQ expression STMT_END .)


state 135

    (63) statement -> identifier MOD_EQ expression STMT_END .

    EXIT            reduce using rule 63 (statement -> identifier MOD_EQ expression STMT_END .)
    PRINT           reduce using rule 63 (statement -> identifier MOD_EQ expression STMT_END .)
    FOR             reduce using rule 63 (statement -> identifier MOD_EQ expression STMT_END .)
    WHILE           reduce using rule 63 (statement -> identifier MOD_EQ expression STMT_END .)
    FUNCTION        reduce using rule 63 (statement -> identifier MOD_EQ expression STMT_END .)
    RETURN          reduce using rule 63 (statement -> identifier MOD_EQ expression STMT_END .)
    IDENTIFIER      reduce using rule 63 (statement -> identifier MOD_EQ expression STMT_END .)
    MINUS           reduce using rule 63 (statement -> identifier MOD_EQ expression STMT_END .)
    PLUS            reduce using rule 63 (statement -> identifier MOD_EQ expression STMT_END .)
    BIT_NEG         reduce using rule 63 (statement -> identifier MOD_EQ expression STMT_END .)
    NOT             reduce using rule 63 (statement -> identifier MOD_EQ expression STMT_END .)
    LPAREN          reduce using rule 63 (statement -> identifier MOD_EQ expression STMT_END .)
    LSQBRACK        reduce using rule 63 (statement -> identifier MOD_EQ expression STMT_END .)
    STRING          reduce using rule 63 (statement -> identifier MOD_EQ expression STMT_END .)
    IF              reduce using rule 63 (statement -> identifier MOD_EQ expression STMT_END .)
    NUM_INT         reduce using rule 63 (statement -> identifier MOD_EQ expression STMT_END .)
    NUM_FLOAT       reduce using rule 63 (statement -> identifier MOD_EQ expression STMT_END .)
    TRUE            reduce using rule 63 (statement -> identifier MOD_EQ expression STMT_END .)
    FALSE           reduce using rule 63 (statement -> identifier MOD_EQ expression STMT_END .)
    $end            reduce using rule 63 (statement -> identifier MOD_EQ expression STMT_END .)
    RBRACK          reduce using rule 63 (statement -> identifier MOD_EQ expression STMT_END .)


state 136

    (78) statement -> identifier LPAREN arguments RPAREN . STMT_END
    (77) expression -> identifier LPAREN arguments RPAREN .

    STMT_END        shift and go to state 152
    PLUS            reduce using rule 77 (expression -> identifier LPAREN arguments RPAREN .)
    MINUS           reduce using rule 77 (expression -> identifier LPAREN arguments RPAREN .)
    MUL             reduce using rule 77 (expression -> identifier LPAREN arguments RPAREN .)
    DIV             reduce using rule 77 (expression -> identifier LPAREN arguments RPAREN .)
    EXP             reduce using rule 77 (expression -> identifier LPAREN arguments RPAREN .)
    MOD             reduce using rule 77 (expression -> identifier LPAREN arguments RPAREN .)
    BIT_AND         reduce using rule 77 (expression -> identifier LPAREN arguments RPAREN .)
    BIT_OR          reduce using rule 77 (expression -> identifier LPAREN arguments RPAREN .)
    BIT_XOR         reduce using rule 77 (expression -> identifier LPAREN arguments RPAREN .)
    LSHIFT          reduce using rule 77 (expression -> identifier LPAREN arguments RPAREN .)
    RSHIFT          reduce using rule 77 (expression -> identifier LPAREN arguments RPAREN .)
    QUESTION_MARK   reduce using rule 77 (expression -> identifier LPAREN arguments RPAREN .)
    IN              reduce using rule 77 (expression -> identifier LPAREN arguments RPAREN .)
    NOT             reduce using rule 77 (expression -> identifier LPAREN arguments RPAREN .)
    EQ              reduce using rule 77 (expression -> identifier LPAREN arguments RPAREN .)
    NEQ             reduce using rule 77 (expression -> identifier LPAREN arguments RPAREN .)
    GT              reduce using rule 77 (expression -> identifier LPAREN arguments RPAREN .)
    GTE             reduce using rule 77 (expression -> identifier LPAREN arguments RPAREN .)
    LT              reduce using rule 77 (expression -> identifier LPAREN arguments RPAREN .)
    LTE             reduce using rule 77 (expression -> identifier LPAREN arguments RPAREN .)
    AND             reduce using rule 77 (expression -> identifier LPAREN arguments RPAREN .)
    OR              reduce using rule 77 (expression -> identifier LPAREN arguments RPAREN .)
    EXIT            reduce using rule 77 (expression -> identifier LPAREN arguments RPAREN .)
    PRINT           reduce using rule 77 (expression -> identifier LPAREN arguments RPAREN .)
    FOR             reduce using rule 77 (expression -> identifier LPAREN arguments RPAREN .)
    WHILE           reduce using rule 77 (expression -> identifier LPAREN arguments RPAREN .)
    FUNCTION        reduce using rule 77 (expression -> identifier LPAREN arguments RPAREN .)
    RETURN          reduce using rule 77 (expression -> identifier LPAREN arguments RPAREN .)
    IDENTIFIER      reduce using rule 77 (expression -> identifier LPAREN arguments RPAREN .)
    BIT_NEG         reduce using rule 77 (expression -> identifier LPAREN arguments RPAREN .)
    LPAREN          reduce using rule 77 (expression -> identifier LPAREN arguments RPAREN .)
    LSQBRACK        reduce using rule 77 (expression -> identifier LPAREN arguments RPAREN .)
    STRING          reduce using rule 77 (expression -> identifier LPAREN arguments RPAREN .)
    IF              reduce using rule 77 (expression -> identifier LPAREN arguments RPAREN .)
    NUM_INT         reduce using rule 77 (expression -> identifier LPAREN arguments RPAREN .)
    NUM_FLOAT       reduce using rule 77 (expression -> identifier LPAREN arguments RPAREN .)
    TRUE            reduce using rule 77 (expression -> identifier LPAREN arguments RPAREN .)
    FALSE           reduce using rule 77 (expression -> identifier LPAREN arguments RPAREN .)
    $end            reduce using rule 77 (expression -> identifier LPAREN arguments RPAREN .)
    RBRACK          reduce using rule 77 (expression -> identifier LPAREN arguments RPAREN .)


state 137

    (43) expression -> expression QUESTION_MARK expression COLON . expression
    (12) expression -> . expression PLUS expression
    (13) expression -> . expression MINUS expression
    (14) expression -> . expression MUL expression
    (15) expression -> . expression DIV expression
    (16) expression -> . expression EXP expression
    (17) expression -> . expression MOD expression
    (18) expression -> . expression BIT_AND expression
    (19) expression -> . expression BIT_OR expression
    (20) expression -> . expression BIT_XOR expression
    (21) expression -> . expression LSHIFT expression
    (22) expression -> . expression RSHIFT expression
    (31) expression -> . MINUS expression
    (32) expression -> . PLUS expression
    (33) expression -> . BIT_NEG expression
    (34) expression -> . NOT expression
    (35) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression QUESTION_MARK expression COLON expression
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable STMT_END
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier DOUBLE_PLUS
    (65) expression -> . identifier DOUBLE_MINUS
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (77) expression -> . identifier LPAREN arguments RPAREN
    (6) identifier -> . IDENTIFIER
    (8) primitive -> . NUM_INT
    (9) primitive -> . NUM_FLOAT
    (10) primitive -> . STRING
    (11) primitive -> . boolean
    (23) boolean -> . expression EQ expression
    (24) boolean -> . expression NEQ expression
    (25) boolean -> . expression GT expression
    (26) boolean -> . expression GTE expression
    (27) boolean -> . expression LT expression
    (28) boolean -> . expression LTE expression
    (29) boolean -> . expression AND expression
    (30) boolean -> . expression OR expression
    (36) boolean -> . TRUE
    (37) boolean -> . FALSE

    MINUS           shift and go to state 16
    PLUS            shift and go to state 15
    BIT_NEG         shift and go to state 17
    NOT             shift and go to state 18
    LPAREN          shift and go to state 12
    LSQBRACK        shift and go to state 7
    STRING          shift and go to state 20
    IDENTIFIER      shift and go to state 14
    NUM_INT         shift and go to state 22
    NUM_FLOAT       shift and go to state 23
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26

    expression                     shift and go to state 153
    identifier                     shift and go to state 64
    primitive                      shift and go to state 19
    boolean                        shift and go to state 24

state 138

    (56) expression -> expression NOT IN expression .
    (12) expression -> expression . PLUS expression
    (13) expression -> expression . MINUS expression
    (14) expression -> expression . MUL expression
    (15) expression -> expression . DIV expression
    (16) expression -> expression . EXP expression
    (17) expression -> expression . MOD expression
    (18) expression -> expression . BIT_AND expression
    (19) expression -> expression . BIT_OR expression
    (20) expression -> expression . BIT_XOR expression
    (21) expression -> expression . LSHIFT expression
    (22) expression -> expression . RSHIFT expression
    (43) expression -> expression . QUESTION_MARK expression COLON expression
    (55) expression -> expression . IN expression
    (56) expression -> expression . NOT IN expression
    (23) boolean -> expression . EQ expression
    (24) boolean -> expression . NEQ expression
    (25) boolean -> expression . GT expression
    (26) boolean -> expression . GTE expression
    (27) boolean -> expression . LT expression
    (28) boolean -> expression . LTE expression
    (29) boolean -> expression . AND expression
    (30) boolean -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for BIT_AND resolved as shift
  ! shift/reduce conflict for BIT_OR resolved as shift
  ! shift/reduce conflict for BIT_XOR resolved as shift
  ! shift/reduce conflict for LSHIFT resolved as shift
  ! shift/reduce conflict for RSHIFT resolved as shift
  ! shift/reduce conflict for QUESTION_MARK resolved as shift
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    EXIT            reduce using rule 56 (expression -> expression NOT IN expression .)
    PRINT           reduce using rule 56 (expression -> expression NOT IN expression .)
    FOR             reduce using rule 56 (expression -> expression NOT IN expression .)
    WHILE           reduce using rule 56 (expression -> expression NOT IN expression .)
    FUNCTION        reduce using rule 56 (expression -> expression NOT IN expression .)
    RETURN          reduce using rule 56 (expression -> expression NOT IN expression .)
    IDENTIFIER      reduce using rule 56 (expression -> expression NOT IN expression .)
    BIT_NEG         reduce using rule 56 (expression -> expression NOT IN expression .)
    LPAREN          reduce using rule 56 (expression -> expression NOT IN expression .)
    LSQBRACK        reduce using rule 56 (expression -> expression NOT IN expression .)
    STRING          reduce using rule 56 (expression -> expression NOT IN expression .)
    IF              reduce using rule 56 (expression -> expression NOT IN expression .)
    NUM_INT         reduce using rule 56 (expression -> expression NOT IN expression .)
    NUM_FLOAT       reduce using rule 56 (expression -> expression NOT IN expression .)
    TRUE            reduce using rule 56 (expression -> expression NOT IN expression .)
    FALSE           reduce using rule 56 (expression -> expression NOT IN expression .)
    $end            reduce using rule 56 (expression -> expression NOT IN expression .)
    RSQBRACK        reduce using rule 56 (expression -> expression NOT IN expression .)
    COMMA           reduce using rule 56 (expression -> expression NOT IN expression .)
    STMT_END        reduce using rule 56 (expression -> expression NOT IN expression .)
    LBRACK          reduce using rule 56 (expression -> expression NOT IN expression .)
    RPAREN          reduce using rule 56 (expression -> expression NOT IN expression .)
    COLON           reduce using rule 56 (expression -> expression NOT IN expression .)
    RBRACK          reduce using rule 56 (expression -> expression NOT IN expression .)
    ARROW_LTR       reduce using rule 56 (expression -> expression NOT IN expression .)
    ARROW_RTL       reduce using rule 56 (expression -> expression NOT IN expression .)
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    MUL             shift and go to state 41
    DIV             shift and go to state 42
    EXP             shift and go to state 43
    MOD             shift and go to state 44
    BIT_AND         shift and go to state 45
    BIT_OR          shift and go to state 46
    BIT_XOR         shift and go to state 47
    LSHIFT          shift and go to state 48
    RSHIFT          shift and go to state 49
    QUESTION_MARK   shift and go to state 50
    IN              shift and go to state 51
    NOT             shift and go to state 52
    EQ              shift and go to state 53
    NEQ             shift and go to state 54
    GT              shift and go to state 55
    GTE             shift and go to state 56
    LT              shift and go to state 57
    LTE             shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60

  ! PLUS            [ reduce using rule 56 (expression -> expression NOT IN expression .) ]
  ! MINUS           [ reduce using rule 56 (expression -> expression NOT IN expression .) ]
  ! MUL             [ reduce using rule 56 (expression -> expression NOT IN expression .) ]
  ! DIV             [ reduce using rule 56 (expression -> expression NOT IN expression .) ]
  ! EXP             [ reduce using rule 56 (expression -> expression NOT IN expression .) ]
  ! MOD             [ reduce using rule 56 (expression -> expression NOT IN expression .) ]
  ! BIT_AND         [ reduce using rule 56 (expression -> expression NOT IN expression .) ]
  ! BIT_OR          [ reduce using rule 56 (expression -> expression NOT IN expression .) ]
  ! BIT_XOR         [ reduce using rule 56 (expression -> expression NOT IN expression .) ]
  ! LSHIFT          [ reduce using rule 56 (expression -> expression NOT IN expression .) ]
  ! RSHIFT          [ reduce using rule 56 (expression -> expression NOT IN expression .) ]
  ! QUESTION_MARK   [ reduce using rule 56 (expression -> expression NOT IN expression .) ]
  ! IN              [ reduce using rule 56 (expression -> expression NOT IN expression .) ]
  ! NOT             [ reduce using rule 56 (expression -> expression NOT IN expression .) ]
  ! EQ              [ reduce using rule 56 (expression -> expression NOT IN expression .) ]
  ! NEQ             [ reduce using rule 56 (expression -> expression NOT IN expression .) ]
  ! GT              [ reduce using rule 56 (expression -> expression NOT IN expression .) ]
  ! GTE             [ reduce using rule 56 (expression -> expression NOT IN expression .) ]
  ! LT              [ reduce using rule 56 (expression -> expression NOT IN expression .) ]
  ! LTE             [ reduce using rule 56 (expression -> expression NOT IN expression .) ]
  ! AND             [ reduce using rule 56 (expression -> expression NOT IN expression .) ]
  ! OR              [ reduce using rule 56 (expression -> expression NOT IN expression .) ]


state 139

    (40) arguments -> arguments COMMA expression .
    (12) expression -> expression . PLUS expression
    (13) expression -> expression . MINUS expression
    (14) expression -> expression . MUL expression
    (15) expression -> expression . DIV expression
    (16) expression -> expression . EXP expression
    (17) expression -> expression . MOD expression
    (18) expression -> expression . BIT_AND expression
    (19) expression -> expression . BIT_OR expression
    (20) expression -> expression . BIT_XOR expression
    (21) expression -> expression . LSHIFT expression
    (22) expression -> expression . RSHIFT expression
    (43) expression -> expression . QUESTION_MARK expression COLON expression
    (55) expression -> expression . IN expression
    (56) expression -> expression . NOT IN expression
    (23) boolean -> expression . EQ expression
    (24) boolean -> expression . NEQ expression
    (25) boolean -> expression . GT expression
    (26) boolean -> expression . GTE expression
    (27) boolean -> expression . LT expression
    (28) boolean -> expression . LTE expression
    (29) boolean -> expression . AND expression
    (30) boolean -> expression . OR expression

    RSQBRACK        reduce using rule 40 (arguments -> arguments COMMA expression .)
    COMMA           reduce using rule 40 (arguments -> arguments COMMA expression .)
    STMT_END        reduce using rule 40 (arguments -> arguments COMMA expression .)
    RPAREN          reduce using rule 40 (arguments -> arguments COMMA expression .)
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    MUL             shift and go to state 41
    DIV             shift and go to state 42
    EXP             shift and go to state 43
    MOD             shift and go to state 44
    BIT_AND         shift and go to state 45
    BIT_OR          shift and go to state 46
    BIT_XOR         shift and go to state 47
    LSHIFT          shift and go to state 48
    RSHIFT          shift and go to state 49
    QUESTION_MARK   shift and go to state 50
    IN              shift and go to state 51
    NOT             shift and go to state 52
    EQ              shift and go to state 53
    NEQ             shift and go to state 54
    GT              shift and go to state 55
    GTE             shift and go to state 56
    LT              shift and go to state 57
    LTE             shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60


state 140

    (45) expression -> identifier LSQBRACK expression . RSQBRACK
    (46) expression -> identifier LSQBRACK expression . COLON expression RSQBRACK
    (48) expression -> identifier LSQBRACK expression . COLON RSQBRACK
    (12) expression -> expression . PLUS expression
    (13) expression -> expression . MINUS expression
    (14) expression -> expression . MUL expression
    (15) expression -> expression . DIV expression
    (16) expression -> expression . EXP expression
    (17) expression -> expression . MOD expression
    (18) expression -> expression . BIT_AND expression
    (19) expression -> expression . BIT_OR expression
    (20) expression -> expression . BIT_XOR expression
    (21) expression -> expression . LSHIFT expression
    (22) expression -> expression . RSHIFT expression
    (43) expression -> expression . QUESTION_MARK expression COLON expression
    (55) expression -> expression . IN expression
    (56) expression -> expression . NOT IN expression
    (23) boolean -> expression . EQ expression
    (24) boolean -> expression . NEQ expression
    (25) boolean -> expression . GT expression
    (26) boolean -> expression . GTE expression
    (27) boolean -> expression . LT expression
    (28) boolean -> expression . LTE expression
    (29) boolean -> expression . AND expression
    (30) boolean -> expression . OR expression

    RSQBRACK        shift and go to state 154
    COLON           shift and go to state 126
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    MUL             shift and go to state 41
    DIV             shift and go to state 42
    EXP             shift and go to state 43
    MOD             shift and go to state 44
    BIT_AND         shift and go to state 45
    BIT_OR          shift and go to state 46
    BIT_XOR         shift and go to state 47
    LSHIFT          shift and go to state 48
    RSHIFT          shift and go to state 49
    QUESTION_MARK   shift and go to state 50
    IN              shift and go to state 51
    NOT             shift and go to state 52
    EQ              shift and go to state 53
    NEQ             shift and go to state 54
    GT              shift and go to state 55
    GTE             shift and go to state 56
    LT              shift and go to state 57
    LTE             shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60


state 141

    (77) expression -> identifier LPAREN arguments . RPAREN
    (40) arguments -> arguments . COMMA expression

    RPAREN          shift and go to state 155
    COMMA           shift and go to state 113


state 142

    (69) statement -> FOR identifier IN expression . ARROW_LTR expression LBRACK statement_list RBRACK
    (70) statement -> FOR identifier IN expression . ARROW_RTL expression LBRACK statement_list RBRACK
    (71) statement -> FOR identifier IN expression . LBRACK statement_list RBRACK
    (12) expression -> expression . PLUS expression
    (13) expression -> expression . MINUS expression
    (14) expression -> expression . MUL expression
    (15) expression -> expression . DIV expression
    (16) expression -> expression . EXP expression
    (17) expression -> expression . MOD expression
    (18) expression -> expression . BIT_AND expression
    (19) expression -> expression . BIT_OR expression
    (20) expression -> expression . BIT_XOR expression
    (21) expression -> expression . LSHIFT expression
    (22) expression -> expression . RSHIFT expression
    (43) expression -> expression . QUESTION_MARK expression COLON expression
    (55) expression -> expression . IN expression
    (56) expression -> expression . NOT IN expression
    (23) boolean -> expression . EQ expression
    (24) boolean -> expression . NEQ expression
    (25) boolean -> expression . GT expression
    (26) boolean -> expression . GTE expression
    (27) boolean -> expression . LT expression
    (28) boolean -> expression . LTE expression
    (29) boolean -> expression . AND expression
    (30) boolean -> expression . OR expression

    ARROW_LTR       shift and go to state 156
    ARROW_RTL       shift and go to state 158
    LBRACK          shift and go to state 157
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    MUL             shift and go to state 41
    DIV             shift and go to state 42
    EXP             shift and go to state 43
    MOD             shift and go to state 44
    BIT_AND         shift and go to state 45
    BIT_OR          shift and go to state 46
    BIT_XOR         shift and go to state 47
    LSHIFT          shift and go to state 48
    RSHIFT          shift and go to state 49
    QUESTION_MARK   shift and go to state 50
    IN              shift and go to state 51
    NOT             shift and go to state 52
    EQ              shift and go to state 53
    NEQ             shift and go to state 54
    GT              shift and go to state 55
    GTE             shift and go to state 56
    LT              shift and go to state 57
    LTE             shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60


state 143

    (73) statement -> FOR LBRACK statement_list RBRACK .

    EXIT            reduce using rule 73 (statement -> FOR LBRACK statement_list RBRACK .)
    PRINT           reduce using rule 73 (statement -> FOR LBRACK statement_list RBRACK .)
    FOR             reduce using rule 73 (statement -> FOR LBRACK statement_list RBRACK .)
    WHILE           reduce using rule 73 (statement -> FOR LBRACK statement_list RBRACK .)
    FUNCTION        reduce using rule 73 (statement -> FOR LBRACK statement_list RBRACK .)
    RETURN          reduce using rule 73 (statement -> FOR LBRACK statement_list RBRACK .)
    IDENTIFIER      reduce using rule 73 (statement -> FOR LBRACK statement_list RBRACK .)
    MINUS           reduce using rule 73 (statement -> FOR LBRACK statement_list RBRACK .)
    PLUS            reduce using rule 73 (statement -> FOR LBRACK statement_list RBRACK .)
    BIT_NEG         reduce using rule 73 (statement -> FOR LBRACK statement_list RBRACK .)
    NOT             reduce using rule 73 (statement -> FOR LBRACK statement_list RBRACK .)
    LPAREN          reduce using rule 73 (statement -> FOR LBRACK statement_list RBRACK .)
    LSQBRACK        reduce using rule 73 (statement -> FOR LBRACK statement_list RBRACK .)
    STRING          reduce using rule 73 (statement -> FOR LBRACK statement_list RBRACK .)
    IF              reduce using rule 73 (statement -> FOR LBRACK statement_list RBRACK .)
    NUM_INT         reduce using rule 73 (statement -> FOR LBRACK statement_list RBRACK .)
    NUM_FLOAT       reduce using rule 73 (statement -> FOR LBRACK statement_list RBRACK .)
    TRUE            reduce using rule 73 (statement -> FOR LBRACK statement_list RBRACK .)
    FALSE           reduce using rule 73 (statement -> FOR LBRACK statement_list RBRACK .)
    $end            reduce using rule 73 (statement -> FOR LBRACK statement_list RBRACK .)
    RBRACK          reduce using rule 73 (statement -> FOR LBRACK statement_list RBRACK .)


state 144

    (72) statement -> WHILE expression LBRACK statement_list . RBRACK
    (2) statement_list -> statement_list . statement
    (3) statement -> . identifier
    (4) statement -> . expression
    (5) statement -> . if_statement
    (7) statement -> . EXIT STMT_END
    (50) statement -> . identifier LSQBRACK expression RSQBRACK EQUALS expression STMT_END
    (57) statement -> . PRINT arguments STMT_END
    (58) statement -> . identifier PLUS_EQ expression STMT_END
    (59) statement -> . identifier MINUS_EQ expression STMT_END
    (60) statement -> . identifier MUL_EQ expression STMT_END
    (61) statement -> . identifier DIV_EQ expression STMT_END
    (62) statement -> . identifier EXP_EQ expression STMT_END
    (63) statement -> . identifier MOD_EQ expression STMT_END
    (69) statement -> . FOR identifier IN expression ARROW_LTR expression LBRACK statement_list RBRACK
    (70) statement -> . FOR identifier IN expression ARROW_RTL expression LBRACK statement_list RBRACK
    (71) statement -> . FOR identifier IN expression LBRACK statement_list RBRACK
    (72) statement -> . WHILE expression LBRACK statement_list RBRACK
    (73) statement -> . FOR LBRACK statement_list RBRACK
    (74) statement -> . FUNCTION identifier LPAREN arguments RPAREN LBRACK statement_list RBRACK
    (75) statement -> . FUNCTION identifier LBRACK statement_list RBRACK
    (76) statement -> . RETURN expression STMT_END
    (78) statement -> . identifier LPAREN arguments RPAREN STMT_END
    (6) identifier -> . IDENTIFIER
    (12) expression -> . expression PLUS expression
    (13) expression -> . expression MINUS expression
    (14) expression -> . expression MUL expression
    (15) expression -> . expression DIV expression
    (16) expression -> . expression EXP expression
    (17) expression -> . expression MOD expression
    (18) expression -> . expression BIT_AND expression
    (19) expression -> . expression BIT_OR expression
    (20) expression -> . expression BIT_XOR expression
    (21) expression -> . expression LSHIFT expression
    (22) expression -> . expression RSHIFT expression
    (31) expression -> . MINUS expression
    (32) expression -> . PLUS expression
    (33) expression -> . BIT_NEG expression
    (34) expression -> . NOT expression
    (35) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression QUESTION_MARK expression COLON expression
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable STMT_END
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier DOUBLE_PLUS
    (65) expression -> . identifier DOUBLE_MINUS
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (77) expression -> . identifier LPAREN arguments RPAREN
    (52) if_statement -> . IF expression LBRACK statement_list RBRACK
    (53) if_statement -> . IF expression LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK
    (54) if_statement -> . IF expression LBRACK statement_list RBRACK ELSE if_statement
    (8) primitive -> . NUM_INT
    (9) primitive -> . NUM_FLOAT
    (10) primitive -> . STRING
    (11) primitive -> . boolean
    (23) boolean -> . expression EQ expression
    (24) boolean -> . expression NEQ expression
    (25) boolean -> . expression GT expression
    (26) boolean -> . expression GTE expression
    (27) boolean -> . expression LT expression
    (28) boolean -> . expression LTE expression
    (29) boolean -> . expression AND expression
    (30) boolean -> . expression OR expression
    (36) boolean -> . TRUE
    (37) boolean -> . FALSE

    RBRACK          shift and go to state 159
    EXIT            shift and go to state 6
    PRINT           shift and go to state 8
    FOR             shift and go to state 9
    WHILE           shift and go to state 10
    FUNCTION        shift and go to state 11
    RETURN          shift and go to state 13
    IDENTIFIER      shift and go to state 14
    MINUS           shift and go to state 16
    PLUS            shift and go to state 15
    BIT_NEG         shift and go to state 17
    NOT             shift and go to state 18
    LPAREN          shift and go to state 12
    LSQBRACK        shift and go to state 7
    STRING          shift and go to state 20
    IF              shift and go to state 21
    NUM_INT         shift and go to state 22
    NUM_FLOAT       shift and go to state 23
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26

    expression                     shift and go to state 4
    statement                      shift and go to state 27
    identifier                     shift and go to state 3
    if_statement                   shift and go to state 5
    primitive                      shift and go to state 19
    boolean                        shift and go to state 24

state 145

    (74) statement -> FUNCTION identifier LPAREN arguments . RPAREN LBRACK statement_list RBRACK
    (40) arguments -> arguments . COMMA expression

    RPAREN          shift and go to state 160
    COMMA           shift and go to state 113


state 146

    (75) statement -> FUNCTION identifier LBRACK statement_list . RBRACK
    (2) statement_list -> statement_list . statement
    (3) statement -> . identifier
    (4) statement -> . expression
    (5) statement -> . if_statement
    (7) statement -> . EXIT STMT_END
    (50) statement -> . identifier LSQBRACK expression RSQBRACK EQUALS expression STMT_END
    (57) statement -> . PRINT arguments STMT_END
    (58) statement -> . identifier PLUS_EQ expression STMT_END
    (59) statement -> . identifier MINUS_EQ expression STMT_END
    (60) statement -> . identifier MUL_EQ expression STMT_END
    (61) statement -> . identifier DIV_EQ expression STMT_END
    (62) statement -> . identifier EXP_EQ expression STMT_END
    (63) statement -> . identifier MOD_EQ expression STMT_END
    (69) statement -> . FOR identifier IN expression ARROW_LTR expression LBRACK statement_list RBRACK
    (70) statement -> . FOR identifier IN expression ARROW_RTL expression LBRACK statement_list RBRACK
    (71) statement -> . FOR identifier IN expression LBRACK statement_list RBRACK
    (72) statement -> . WHILE expression LBRACK statement_list RBRACK
    (73) statement -> . FOR LBRACK statement_list RBRACK
    (74) statement -> . FUNCTION identifier LPAREN arguments RPAREN LBRACK statement_list RBRACK
    (75) statement -> . FUNCTION identifier LBRACK statement_list RBRACK
    (76) statement -> . RETURN expression STMT_END
    (78) statement -> . identifier LPAREN arguments RPAREN STMT_END
    (6) identifier -> . IDENTIFIER
    (12) expression -> . expression PLUS expression
    (13) expression -> . expression MINUS expression
    (14) expression -> . expression MUL expression
    (15) expression -> . expression DIV expression
    (16) expression -> . expression EXP expression
    (17) expression -> . expression MOD expression
    (18) expression -> . expression BIT_AND expression
    (19) expression -> . expression BIT_OR expression
    (20) expression -> . expression BIT_XOR expression
    (21) expression -> . expression LSHIFT expression
    (22) expression -> . expression RSHIFT expression
    (31) expression -> . MINUS expression
    (32) expression -> . PLUS expression
    (33) expression -> . BIT_NEG expression
    (34) expression -> . NOT expression
    (35) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression QUESTION_MARK expression COLON expression
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable STMT_END
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier DOUBLE_PLUS
    (65) expression -> . identifier DOUBLE_MINUS
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (77) expression -> . identifier LPAREN arguments RPAREN
    (52) if_statement -> . IF expression LBRACK statement_list RBRACK
    (53) if_statement -> . IF expression LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK
    (54) if_statement -> . IF expression LBRACK statement_list RBRACK ELSE if_statement
    (8) primitive -> . NUM_INT
    (9) primitive -> . NUM_FLOAT
    (10) primitive -> . STRING
    (11) primitive -> . boolean
    (23) boolean -> . expression EQ expression
    (24) boolean -> . expression NEQ expression
    (25) boolean -> . expression GT expression
    (26) boolean -> . expression GTE expression
    (27) boolean -> . expression LT expression
    (28) boolean -> . expression LTE expression
    (29) boolean -> . expression AND expression
    (30) boolean -> . expression OR expression
    (36) boolean -> . TRUE
    (37) boolean -> . FALSE

    RBRACK          shift and go to state 161
    EXIT            shift and go to state 6
    PRINT           shift and go to state 8
    FOR             shift and go to state 9
    WHILE           shift and go to state 10
    FUNCTION        shift and go to state 11
    RETURN          shift and go to state 13
    IDENTIFIER      shift and go to state 14
    MINUS           shift and go to state 16
    PLUS            shift and go to state 15
    BIT_NEG         shift and go to state 17
    NOT             shift and go to state 18
    LPAREN          shift and go to state 12
    LSQBRACK        shift and go to state 7
    STRING          shift and go to state 20
    IF              shift and go to state 21
    NUM_INT         shift and go to state 22
    NUM_FLOAT       shift and go to state 23
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26

    identifier                     shift and go to state 3
    statement                      shift and go to state 27
    expression                     shift and go to state 4
    if_statement                   shift and go to state 5
    primitive                      shift and go to state 19
    boolean                        shift and go to state 24

state 147

    (52) if_statement -> IF expression LBRACK statement_list . RBRACK
    (53) if_statement -> IF expression LBRACK statement_list . RBRACK ELSE LBRACK statement_list RBRACK
    (54) if_statement -> IF expression LBRACK statement_list . RBRACK ELSE if_statement
    (2) statement_list -> statement_list . statement
    (3) statement -> . identifier
    (4) statement -> . expression
    (5) statement -> . if_statement
    (7) statement -> . EXIT STMT_END
    (50) statement -> . identifier LSQBRACK expression RSQBRACK EQUALS expression STMT_END
    (57) statement -> . PRINT arguments STMT_END
    (58) statement -> . identifier PLUS_EQ expression STMT_END
    (59) statement -> . identifier MINUS_EQ expression STMT_END
    (60) statement -> . identifier MUL_EQ expression STMT_END
    (61) statement -> . identifier DIV_EQ expression STMT_END
    (62) statement -> . identifier EXP_EQ expression STMT_END
    (63) statement -> . identifier MOD_EQ expression STMT_END
    (69) statement -> . FOR identifier IN expression ARROW_LTR expression LBRACK statement_list RBRACK
    (70) statement -> . FOR identifier IN expression ARROW_RTL expression LBRACK statement_list RBRACK
    (71) statement -> . FOR identifier IN expression LBRACK statement_list RBRACK
    (72) statement -> . WHILE expression LBRACK statement_list RBRACK
    (73) statement -> . FOR LBRACK statement_list RBRACK
    (74) statement -> . FUNCTION identifier LPAREN arguments RPAREN LBRACK statement_list RBRACK
    (75) statement -> . FUNCTION identifier LBRACK statement_list RBRACK
    (76) statement -> . RETURN expression STMT_END
    (78) statement -> . identifier LPAREN arguments RPAREN STMT_END
    (6) identifier -> . IDENTIFIER
    (12) expression -> . expression PLUS expression
    (13) expression -> . expression MINUS expression
    (14) expression -> . expression MUL expression
    (15) expression -> . expression DIV expression
    (16) expression -> . expression EXP expression
    (17) expression -> . expression MOD expression
    (18) expression -> . expression BIT_AND expression
    (19) expression -> . expression BIT_OR expression
    (20) expression -> . expression BIT_XOR expression
    (21) expression -> . expression LSHIFT expression
    (22) expression -> . expression RSHIFT expression
    (31) expression -> . MINUS expression
    (32) expression -> . PLUS expression
    (33) expression -> . BIT_NEG expression
    (34) expression -> . NOT expression
    (35) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression QUESTION_MARK expression COLON expression
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable STMT_END
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier DOUBLE_PLUS
    (65) expression -> . identifier DOUBLE_MINUS
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (77) expression -> . identifier LPAREN arguments RPAREN
    (52) if_statement -> . IF expression LBRACK statement_list RBRACK
    (53) if_statement -> . IF expression LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK
    (54) if_statement -> . IF expression LBRACK statement_list RBRACK ELSE if_statement
    (8) primitive -> . NUM_INT
    (9) primitive -> . NUM_FLOAT
    (10) primitive -> . STRING
    (11) primitive -> . boolean
    (23) boolean -> . expression EQ expression
    (24) boolean -> . expression NEQ expression
    (25) boolean -> . expression GT expression
    (26) boolean -> . expression GTE expression
    (27) boolean -> . expression LT expression
    (28) boolean -> . expression LTE expression
    (29) boolean -> . expression AND expression
    (30) boolean -> . expression OR expression
    (36) boolean -> . TRUE
    (37) boolean -> . FALSE

    RBRACK          shift and go to state 162
    EXIT            shift and go to state 6
    PRINT           shift and go to state 8
    FOR             shift and go to state 9
    WHILE           shift and go to state 10
    FUNCTION        shift and go to state 11
    RETURN          shift and go to state 13
    IDENTIFIER      shift and go to state 14
    MINUS           shift and go to state 16
    PLUS            shift and go to state 15
    BIT_NEG         shift and go to state 17
    NOT             shift and go to state 18
    LPAREN          shift and go to state 12
    LSQBRACK        shift and go to state 7
    STRING          shift and go to state 20
    IF              shift and go to state 21
    NUM_INT         shift and go to state 22
    NUM_FLOAT       shift and go to state 23
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26

    expression                     shift and go to state 4
    if_statement                   shift and go to state 5
    statement                      shift and go to state 27
    identifier                     shift and go to state 3
    primitive                      shift and go to state 19
    boolean                        shift and go to state 24

state 148

    (50) statement -> identifier LSQBRACK expression RSQBRACK EQUALS . expression STMT_END
    (12) expression -> . expression PLUS expression
    (13) expression -> . expression MINUS expression
    (14) expression -> . expression MUL expression
    (15) expression -> . expression DIV expression
    (16) expression -> . expression EXP expression
    (17) expression -> . expression MOD expression
    (18) expression -> . expression BIT_AND expression
    (19) expression -> . expression BIT_OR expression
    (20) expression -> . expression BIT_XOR expression
    (21) expression -> . expression LSHIFT expression
    (22) expression -> . expression RSHIFT expression
    (31) expression -> . MINUS expression
    (32) expression -> . PLUS expression
    (33) expression -> . BIT_NEG expression
    (34) expression -> . NOT expression
    (35) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression QUESTION_MARK expression COLON expression
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable STMT_END
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier DOUBLE_PLUS
    (65) expression -> . identifier DOUBLE_MINUS
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (77) expression -> . identifier LPAREN arguments RPAREN
    (6) identifier -> . IDENTIFIER
    (8) primitive -> . NUM_INT
    (9) primitive -> . NUM_FLOAT
    (10) primitive -> . STRING
    (11) primitive -> . boolean
    (23) boolean -> . expression EQ expression
    (24) boolean -> . expression NEQ expression
    (25) boolean -> . expression GT expression
    (26) boolean -> . expression GTE expression
    (27) boolean -> . expression LT expression
    (28) boolean -> . expression LTE expression
    (29) boolean -> . expression AND expression
    (30) boolean -> . expression OR expression
    (36) boolean -> . TRUE
    (37) boolean -> . FALSE

    MINUS           shift and go to state 16
    PLUS            shift and go to state 15
    BIT_NEG         shift and go to state 17
    NOT             shift and go to state 18
    LPAREN          shift and go to state 12
    LSQBRACK        shift and go to state 7
    STRING          shift and go to state 20
    IDENTIFIER      shift and go to state 14
    NUM_INT         shift and go to state 22
    NUM_FLOAT       shift and go to state 23
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26

    identifier                     shift and go to state 64
    expression                     shift and go to state 163
    primitive                      shift and go to state 19
    boolean                        shift and go to state 24

state 149

    (46) expression -> identifier LSQBRACK expression COLON expression . RSQBRACK
    (12) expression -> expression . PLUS expression
    (13) expression -> expression . MINUS expression
    (14) expression -> expression . MUL expression
    (15) expression -> expression . DIV expression
    (16) expression -> expression . EXP expression
    (17) expression -> expression . MOD expression
    (18) expression -> expression . BIT_AND expression
    (19) expression -> expression . BIT_OR expression
    (20) expression -> expression . BIT_XOR expression
    (21) expression -> expression . LSHIFT expression
    (22) expression -> expression . RSHIFT expression
    (43) expression -> expression . QUESTION_MARK expression COLON expression
    (55) expression -> expression . IN expression
    (56) expression -> expression . NOT IN expression
    (23) boolean -> expression . EQ expression
    (24) boolean -> expression . NEQ expression
    (25) boolean -> expression . GT expression
    (26) boolean -> expression . GTE expression
    (27) boolean -> expression . LT expression
    (28) boolean -> expression . LTE expression
    (29) boolean -> expression . AND expression
    (30) boolean -> expression . OR expression

    RSQBRACK        shift and go to state 164
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    MUL             shift and go to state 41
    DIV             shift and go to state 42
    EXP             shift and go to state 43
    MOD             shift and go to state 44
    BIT_AND         shift and go to state 45
    BIT_OR          shift and go to state 46
    BIT_XOR         shift and go to state 47
    LSHIFT          shift and go to state 48
    RSHIFT          shift and go to state 49
    QUESTION_MARK   shift and go to state 50
    IN              shift and go to state 51
    NOT             shift and go to state 52
    EQ              shift and go to state 53
    NEQ             shift and go to state 54
    GT              shift and go to state 55
    GTE             shift and go to state 56
    LT              shift and go to state 57
    LTE             shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60


state 150

    (48) expression -> identifier LSQBRACK expression COLON RSQBRACK .

    PLUS            reduce using rule 48 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    MINUS           reduce using rule 48 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    MUL             reduce using rule 48 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    DIV             reduce using rule 48 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    EXP             reduce using rule 48 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    MOD             reduce using rule 48 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    BIT_AND         reduce using rule 48 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    BIT_OR          reduce using rule 48 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    BIT_XOR         reduce using rule 48 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    LSHIFT          reduce using rule 48 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    RSHIFT          reduce using rule 48 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    QUESTION_MARK   reduce using rule 48 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    IN              reduce using rule 48 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    NOT             reduce using rule 48 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    EQ              reduce using rule 48 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    NEQ             reduce using rule 48 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    GT              reduce using rule 48 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    GTE             reduce using rule 48 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    LT              reduce using rule 48 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    LTE             reduce using rule 48 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    AND             reduce using rule 48 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    OR              reduce using rule 48 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    EXIT            reduce using rule 48 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    PRINT           reduce using rule 48 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    FOR             reduce using rule 48 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    WHILE           reduce using rule 48 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    FUNCTION        reduce using rule 48 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    RETURN          reduce using rule 48 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    IDENTIFIER      reduce using rule 48 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    BIT_NEG         reduce using rule 48 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    LPAREN          reduce using rule 48 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    LSQBRACK        reduce using rule 48 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    STRING          reduce using rule 48 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    IF              reduce using rule 48 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    NUM_INT         reduce using rule 48 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    NUM_FLOAT       reduce using rule 48 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    TRUE            reduce using rule 48 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    FALSE           reduce using rule 48 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    $end            reduce using rule 48 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    RSQBRACK        reduce using rule 48 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    COMMA           reduce using rule 48 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    STMT_END        reduce using rule 48 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    LBRACK          reduce using rule 48 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    RPAREN          reduce using rule 48 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    COLON           reduce using rule 48 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    RBRACK          reduce using rule 48 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    ARROW_LTR       reduce using rule 48 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    ARROW_RTL       reduce using rule 48 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)


state 151

    (47) expression -> identifier LSQBRACK COLON expression RSQBRACK .

    PLUS            reduce using rule 47 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    MINUS           reduce using rule 47 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    MUL             reduce using rule 47 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    DIV             reduce using rule 47 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    EXP             reduce using rule 47 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    MOD             reduce using rule 47 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    BIT_AND         reduce using rule 47 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    BIT_OR          reduce using rule 47 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    BIT_XOR         reduce using rule 47 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    LSHIFT          reduce using rule 47 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    RSHIFT          reduce using rule 47 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    QUESTION_MARK   reduce using rule 47 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    IN              reduce using rule 47 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    NOT             reduce using rule 47 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    EQ              reduce using rule 47 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    NEQ             reduce using rule 47 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    GT              reduce using rule 47 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    GTE             reduce using rule 47 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    LT              reduce using rule 47 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    LTE             reduce using rule 47 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    AND             reduce using rule 47 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    OR              reduce using rule 47 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    EXIT            reduce using rule 47 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    PRINT           reduce using rule 47 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    FOR             reduce using rule 47 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    WHILE           reduce using rule 47 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    FUNCTION        reduce using rule 47 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    RETURN          reduce using rule 47 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    IDENTIFIER      reduce using rule 47 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    BIT_NEG         reduce using rule 47 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    LPAREN          reduce using rule 47 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    LSQBRACK        reduce using rule 47 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    STRING          reduce using rule 47 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    IF              reduce using rule 47 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    NUM_INT         reduce using rule 47 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    NUM_FLOAT       reduce using rule 47 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    TRUE            reduce using rule 47 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    FALSE           reduce using rule 47 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    $end            reduce using rule 47 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    RSQBRACK        reduce using rule 47 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    COMMA           reduce using rule 47 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    STMT_END        reduce using rule 47 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    LBRACK          reduce using rule 47 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    RPAREN          reduce using rule 47 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    COLON           reduce using rule 47 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    RBRACK          reduce using rule 47 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    ARROW_LTR       reduce using rule 47 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    ARROW_RTL       reduce using rule 47 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)


state 152

    (78) statement -> identifier LPAREN arguments RPAREN STMT_END .

    EXIT            reduce using rule 78 (statement -> identifier LPAREN arguments RPAREN STMT_END .)
    PRINT           reduce using rule 78 (statement -> identifier LPAREN arguments RPAREN STMT_END .)
    FOR             reduce using rule 78 (statement -> identifier LPAREN arguments RPAREN STMT_END .)
    WHILE           reduce using rule 78 (statement -> identifier LPAREN arguments RPAREN STMT_END .)
    FUNCTION        reduce using rule 78 (statement -> identifier LPAREN arguments RPAREN STMT_END .)
    RETURN          reduce using rule 78 (statement -> identifier LPAREN arguments RPAREN STMT_END .)
    IDENTIFIER      reduce using rule 78 (statement -> identifier LPAREN arguments RPAREN STMT_END .)
    MINUS           reduce using rule 78 (statement -> identifier LPAREN arguments RPAREN STMT_END .)
    PLUS            reduce using rule 78 (statement -> identifier LPAREN arguments RPAREN STMT_END .)
    BIT_NEG         reduce using rule 78 (statement -> identifier LPAREN arguments RPAREN STMT_END .)
    NOT             reduce using rule 78 (statement -> identifier LPAREN arguments RPAREN STMT_END .)
    LPAREN          reduce using rule 78 (statement -> identifier LPAREN arguments RPAREN STMT_END .)
    LSQBRACK        reduce using rule 78 (statement -> identifier LPAREN arguments RPAREN STMT_END .)
    STRING          reduce using rule 78 (statement -> identifier LPAREN arguments RPAREN STMT_END .)
    IF              reduce using rule 78 (statement -> identifier LPAREN arguments RPAREN STMT_END .)
    NUM_INT         reduce using rule 78 (statement -> identifier LPAREN arguments RPAREN STMT_END .)
    NUM_FLOAT       reduce using rule 78 (statement -> identifier LPAREN arguments RPAREN STMT_END .)
    TRUE            reduce using rule 78 (statement -> identifier LPAREN arguments RPAREN STMT_END .)
    FALSE           reduce using rule 78 (statement -> identifier LPAREN arguments RPAREN STMT_END .)
    $end            reduce using rule 78 (statement -> identifier LPAREN arguments RPAREN STMT_END .)
    RBRACK          reduce using rule 78 (statement -> identifier LPAREN arguments RPAREN STMT_END .)


state 153

    (43) expression -> expression QUESTION_MARK expression COLON expression .
    (12) expression -> expression . PLUS expression
    (13) expression -> expression . MINUS expression
    (14) expression -> expression . MUL expression
    (15) expression -> expression . DIV expression
    (16) expression -> expression . EXP expression
    (17) expression -> expression . MOD expression
    (18) expression -> expression . BIT_AND expression
    (19) expression -> expression . BIT_OR expression
    (20) expression -> expression . BIT_XOR expression
    (21) expression -> expression . LSHIFT expression
    (22) expression -> expression . RSHIFT expression
    (43) expression -> expression . QUESTION_MARK expression COLON expression
    (55) expression -> expression . IN expression
    (56) expression -> expression . NOT IN expression
    (23) boolean -> expression . EQ expression
    (24) boolean -> expression . NEQ expression
    (25) boolean -> expression . GT expression
    (26) boolean -> expression . GTE expression
    (27) boolean -> expression . LT expression
    (28) boolean -> expression . LTE expression
    (29) boolean -> expression . AND expression
    (30) boolean -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for BIT_AND resolved as shift
  ! shift/reduce conflict for BIT_OR resolved as shift
  ! shift/reduce conflict for BIT_XOR resolved as shift
  ! shift/reduce conflict for LSHIFT resolved as shift
  ! shift/reduce conflict for RSHIFT resolved as shift
  ! shift/reduce conflict for QUESTION_MARK resolved as shift
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    EXIT            reduce using rule 43 (expression -> expression QUESTION_MARK expression COLON expression .)
    PRINT           reduce using rule 43 (expression -> expression QUESTION_MARK expression COLON expression .)
    FOR             reduce using rule 43 (expression -> expression QUESTION_MARK expression COLON expression .)
    WHILE           reduce using rule 43 (expression -> expression QUESTION_MARK expression COLON expression .)
    FUNCTION        reduce using rule 43 (expression -> expression QUESTION_MARK expression COLON expression .)
    RETURN          reduce using rule 43 (expression -> expression QUESTION_MARK expression COLON expression .)
    IDENTIFIER      reduce using rule 43 (expression -> expression QUESTION_MARK expression COLON expression .)
    BIT_NEG         reduce using rule 43 (expression -> expression QUESTION_MARK expression COLON expression .)
    LPAREN          reduce using rule 43 (expression -> expression QUESTION_MARK expression COLON expression .)
    LSQBRACK        reduce using rule 43 (expression -> expression QUESTION_MARK expression COLON expression .)
    STRING          reduce using rule 43 (expression -> expression QUESTION_MARK expression COLON expression .)
    IF              reduce using rule 43 (expression -> expression QUESTION_MARK expression COLON expression .)
    NUM_INT         reduce using rule 43 (expression -> expression QUESTION_MARK expression COLON expression .)
    NUM_FLOAT       reduce using rule 43 (expression -> expression QUESTION_MARK expression COLON expression .)
    TRUE            reduce using rule 43 (expression -> expression QUESTION_MARK expression COLON expression .)
    FALSE           reduce using rule 43 (expression -> expression QUESTION_MARK expression COLON expression .)
    $end            reduce using rule 43 (expression -> expression QUESTION_MARK expression COLON expression .)
    RSQBRACK        reduce using rule 43 (expression -> expression QUESTION_MARK expression COLON expression .)
    COMMA           reduce using rule 43 (expression -> expression QUESTION_MARK expression COLON expression .)
    STMT_END        reduce using rule 43 (expression -> expression QUESTION_MARK expression COLON expression .)
    LBRACK          reduce using rule 43 (expression -> expression QUESTION_MARK expression COLON expression .)
    RPAREN          reduce using rule 43 (expression -> expression QUESTION_MARK expression COLON expression .)
    COLON           reduce using rule 43 (expression -> expression QUESTION_MARK expression COLON expression .)
    RBRACK          reduce using rule 43 (expression -> expression QUESTION_MARK expression COLON expression .)
    ARROW_LTR       reduce using rule 43 (expression -> expression QUESTION_MARK expression COLON expression .)
    ARROW_RTL       reduce using rule 43 (expression -> expression QUESTION_MARK expression COLON expression .)
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    MUL             shift and go to state 41
    DIV             shift and go to state 42
    EXP             shift and go to state 43
    MOD             shift and go to state 44
    BIT_AND         shift and go to state 45
    BIT_OR          shift and go to state 46
    BIT_XOR         shift and go to state 47
    LSHIFT          shift and go to state 48
    RSHIFT          shift and go to state 49
    QUESTION_MARK   shift and go to state 50
    IN              shift and go to state 51
    NOT             shift and go to state 52
    EQ              shift and go to state 53
    NEQ             shift and go to state 54
    GT              shift and go to state 55
    GTE             shift and go to state 56
    LT              shift and go to state 57
    LTE             shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60

  ! PLUS            [ reduce using rule 43 (expression -> expression QUESTION_MARK expression COLON expression .) ]
  ! MINUS           [ reduce using rule 43 (expression -> expression QUESTION_MARK expression COLON expression .) ]
  ! MUL             [ reduce using rule 43 (expression -> expression QUESTION_MARK expression COLON expression .) ]
  ! DIV             [ reduce using rule 43 (expression -> expression QUESTION_MARK expression COLON expression .) ]
  ! EXP             [ reduce using rule 43 (expression -> expression QUESTION_MARK expression COLON expression .) ]
  ! MOD             [ reduce using rule 43 (expression -> expression QUESTION_MARK expression COLON expression .) ]
  ! BIT_AND         [ reduce using rule 43 (expression -> expression QUESTION_MARK expression COLON expression .) ]
  ! BIT_OR          [ reduce using rule 43 (expression -> expression QUESTION_MARK expression COLON expression .) ]
  ! BIT_XOR         [ reduce using rule 43 (expression -> expression QUESTION_MARK expression COLON expression .) ]
  ! LSHIFT          [ reduce using rule 43 (expression -> expression QUESTION_MARK expression COLON expression .) ]
  ! RSHIFT          [ reduce using rule 43 (expression -> expression QUESTION_MARK expression COLON expression .) ]
  ! QUESTION_MARK   [ reduce using rule 43 (expression -> expression QUESTION_MARK expression COLON expression .) ]
  ! IN              [ reduce using rule 43 (expression -> expression QUESTION_MARK expression COLON expression .) ]
  ! NOT             [ reduce using rule 43 (expression -> expression QUESTION_MARK expression COLON expression .) ]
  ! EQ              [ reduce using rule 43 (expression -> expression QUESTION_MARK expression COLON expression .) ]
  ! NEQ             [ reduce using rule 43 (expression -> expression QUESTION_MARK expression COLON expression .) ]
  ! GT              [ reduce using rule 43 (expression -> expression QUESTION_MARK expression COLON expression .) ]
  ! GTE             [ reduce using rule 43 (expression -> expression QUESTION_MARK expression COLON expression .) ]
  ! LT              [ reduce using rule 43 (expression -> expression QUESTION_MARK expression COLON expression .) ]
  ! LTE             [ reduce using rule 43 (expression -> expression QUESTION_MARK expression COLON expression .) ]
  ! AND             [ reduce using rule 43 (expression -> expression QUESTION_MARK expression COLON expression .) ]
  ! OR              [ reduce using rule 43 (expression -> expression QUESTION_MARK expression COLON expression .) ]


state 154

    (45) expression -> identifier LSQBRACK expression RSQBRACK .

    PLUS            reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    MINUS           reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    MUL             reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    DIV             reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    EXP             reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    MOD             reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    BIT_AND         reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    BIT_OR          reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    BIT_XOR         reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    LSHIFT          reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    RSHIFT          reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    QUESTION_MARK   reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    IN              reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    NOT             reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    EQ              reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    NEQ             reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    GT              reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    GTE             reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    LT              reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    LTE             reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    AND             reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    OR              reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    RSQBRACK        reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    COMMA           reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    STMT_END        reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    LBRACK          reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    RPAREN          reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    EXIT            reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    PRINT           reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    FOR             reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    WHILE           reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    FUNCTION        reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    RETURN          reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    IDENTIFIER      reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    BIT_NEG         reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    LPAREN          reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    LSQBRACK        reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    STRING          reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    IF              reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    NUM_INT         reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    NUM_FLOAT       reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    TRUE            reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    FALSE           reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    $end            reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    COLON           reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    RBRACK          reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    ARROW_LTR       reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    ARROW_RTL       reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)


state 155

    (77) expression -> identifier LPAREN arguments RPAREN .

    PLUS            reduce using rule 77 (expression -> identifier LPAREN arguments RPAREN .)
    MINUS           reduce using rule 77 (expression -> identifier LPAREN arguments RPAREN .)
    MUL             reduce using rule 77 (expression -> identifier LPAREN arguments RPAREN .)
    DIV             reduce using rule 77 (expression -> identifier LPAREN arguments RPAREN .)
    EXP             reduce using rule 77 (expression -> identifier LPAREN arguments RPAREN .)
    MOD             reduce using rule 77 (expression -> identifier LPAREN arguments RPAREN .)
    BIT_AND         reduce using rule 77 (expression -> identifier LPAREN arguments RPAREN .)
    BIT_OR          reduce using rule 77 (expression -> identifier LPAREN arguments RPAREN .)
    BIT_XOR         reduce using rule 77 (expression -> identifier LPAREN arguments RPAREN .)
    LSHIFT          reduce using rule 77 (expression -> identifier LPAREN arguments RPAREN .)
    RSHIFT          reduce using rule 77 (expression -> identifier LPAREN arguments RPAREN .)
    QUESTION_MARK   reduce using rule 77 (expression -> identifier LPAREN arguments RPAREN .)
    IN              reduce using rule 77 (expression -> identifier LPAREN arguments RPAREN .)
    NOT             reduce using rule 77 (expression -> identifier LPAREN arguments RPAREN .)
    EQ              reduce using rule 77 (expression -> identifier LPAREN arguments RPAREN .)
    NEQ             reduce using rule 77 (expression -> identifier LPAREN arguments RPAREN .)
    GT              reduce using rule 77 (expression -> identifier LPAREN arguments RPAREN .)
    GTE             reduce using rule 77 (expression -> identifier LPAREN arguments RPAREN .)
    LT              reduce using rule 77 (expression -> identifier LPAREN arguments RPAREN .)
    LTE             reduce using rule 77 (expression -> identifier LPAREN arguments RPAREN .)
    AND             reduce using rule 77 (expression -> identifier LPAREN arguments RPAREN .)
    OR              reduce using rule 77 (expression -> identifier LPAREN arguments RPAREN .)
    RSQBRACK        reduce using rule 77 (expression -> identifier LPAREN arguments RPAREN .)
    COMMA           reduce using rule 77 (expression -> identifier LPAREN arguments RPAREN .)
    STMT_END        reduce using rule 77 (expression -> identifier LPAREN arguments RPAREN .)
    LBRACK          reduce using rule 77 (expression -> identifier LPAREN arguments RPAREN .)
    RPAREN          reduce using rule 77 (expression -> identifier LPAREN arguments RPAREN .)
    EXIT            reduce using rule 77 (expression -> identifier LPAREN arguments RPAREN .)
    PRINT           reduce using rule 77 (expression -> identifier LPAREN arguments RPAREN .)
    FOR             reduce using rule 77 (expression -> identifier LPAREN arguments RPAREN .)
    WHILE           reduce using rule 77 (expression -> identifier LPAREN arguments RPAREN .)
    FUNCTION        reduce using rule 77 (expression -> identifier LPAREN arguments RPAREN .)
    RETURN          reduce using rule 77 (expression -> identifier LPAREN arguments RPAREN .)
    IDENTIFIER      reduce using rule 77 (expression -> identifier LPAREN arguments RPAREN .)
    BIT_NEG         reduce using rule 77 (expression -> identifier LPAREN arguments RPAREN .)
    LPAREN          reduce using rule 77 (expression -> identifier LPAREN arguments RPAREN .)
    LSQBRACK        reduce using rule 77 (expression -> identifier LPAREN arguments RPAREN .)
    STRING          reduce using rule 77 (expression -> identifier LPAREN arguments RPAREN .)
    IF              reduce using rule 77 (expression -> identifier LPAREN arguments RPAREN .)
    NUM_INT         reduce using rule 77 (expression -> identifier LPAREN arguments RPAREN .)
    NUM_FLOAT       reduce using rule 77 (expression -> identifier LPAREN arguments RPAREN .)
    TRUE            reduce using rule 77 (expression -> identifier LPAREN arguments RPAREN .)
    FALSE           reduce using rule 77 (expression -> identifier LPAREN arguments RPAREN .)
    $end            reduce using rule 77 (expression -> identifier LPAREN arguments RPAREN .)
    COLON           reduce using rule 77 (expression -> identifier LPAREN arguments RPAREN .)
    RBRACK          reduce using rule 77 (expression -> identifier LPAREN arguments RPAREN .)
    ARROW_LTR       reduce using rule 77 (expression -> identifier LPAREN arguments RPAREN .)
    ARROW_RTL       reduce using rule 77 (expression -> identifier LPAREN arguments RPAREN .)


state 156

    (69) statement -> FOR identifier IN expression ARROW_LTR . expression LBRACK statement_list RBRACK
    (12) expression -> . expression PLUS expression
    (13) expression -> . expression MINUS expression
    (14) expression -> . expression MUL expression
    (15) expression -> . expression DIV expression
    (16) expression -> . expression EXP expression
    (17) expression -> . expression MOD expression
    (18) expression -> . expression BIT_AND expression
    (19) expression -> . expression BIT_OR expression
    (20) expression -> . expression BIT_XOR expression
    (21) expression -> . expression LSHIFT expression
    (22) expression -> . expression RSHIFT expression
    (31) expression -> . MINUS expression
    (32) expression -> . PLUS expression
    (33) expression -> . BIT_NEG expression
    (34) expression -> . NOT expression
    (35) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression QUESTION_MARK expression COLON expression
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable STMT_END
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier DOUBLE_PLUS
    (65) expression -> . identifier DOUBLE_MINUS
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (77) expression -> . identifier LPAREN arguments RPAREN
    (6) identifier -> . IDENTIFIER
    (8) primitive -> . NUM_INT
    (9) primitive -> . NUM_FLOAT
    (10) primitive -> . STRING
    (11) primitive -> . boolean
    (23) boolean -> . expression EQ expression
    (24) boolean -> . expression NEQ expression
    (25) boolean -> . expression GT expression
    (26) boolean -> . expression GTE expression
    (27) boolean -> . expression LT expression
    (28) boolean -> . expression LTE expression
    (29) boolean -> . expression AND expression
    (30) boolean -> . expression OR expression
    (36) boolean -> . TRUE
    (37) boolean -> . FALSE

    MINUS           shift and go to state 16
    PLUS            shift and go to state 15
    BIT_NEG         shift and go to state 17
    NOT             shift and go to state 18
    LPAREN          shift and go to state 12
    LSQBRACK        shift and go to state 7
    STRING          shift and go to state 20
    IDENTIFIER      shift and go to state 14
    NUM_INT         shift and go to state 22
    NUM_FLOAT       shift and go to state 23
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26

    identifier                     shift and go to state 64
    expression                     shift and go to state 165
    primitive                      shift and go to state 19
    boolean                        shift and go to state 24

state 157

    (71) statement -> FOR identifier IN expression LBRACK . statement_list RBRACK
    (1) statement_list -> . statement
    (2) statement_list -> . statement_list statement
    (3) statement -> . identifier
    (4) statement -> . expression
    (5) statement -> . if_statement
    (7) statement -> . EXIT STMT_END
    (50) statement -> . identifier LSQBRACK expression RSQBRACK EQUALS expression STMT_END
    (57) statement -> . PRINT arguments STMT_END
    (58) statement -> . identifier PLUS_EQ expression STMT_END
    (59) statement -> . identifier MINUS_EQ expression STMT_END
    (60) statement -> . identifier MUL_EQ expression STMT_END
    (61) statement -> . identifier DIV_EQ expression STMT_END
    (62) statement -> . identifier EXP_EQ expression STMT_END
    (63) statement -> . identifier MOD_EQ expression STMT_END
    (69) statement -> . FOR identifier IN expression ARROW_LTR expression LBRACK statement_list RBRACK
    (70) statement -> . FOR identifier IN expression ARROW_RTL expression LBRACK statement_list RBRACK
    (71) statement -> . FOR identifier IN expression LBRACK statement_list RBRACK
    (72) statement -> . WHILE expression LBRACK statement_list RBRACK
    (73) statement -> . FOR LBRACK statement_list RBRACK
    (74) statement -> . FUNCTION identifier LPAREN arguments RPAREN LBRACK statement_list RBRACK
    (75) statement -> . FUNCTION identifier LBRACK statement_list RBRACK
    (76) statement -> . RETURN expression STMT_END
    (78) statement -> . identifier LPAREN arguments RPAREN STMT_END
    (6) identifier -> . IDENTIFIER
    (12) expression -> . expression PLUS expression
    (13) expression -> . expression MINUS expression
    (14) expression -> . expression MUL expression
    (15) expression -> . expression DIV expression
    (16) expression -> . expression EXP expression
    (17) expression -> . expression MOD expression
    (18) expression -> . expression BIT_AND expression
    (19) expression -> . expression BIT_OR expression
    (20) expression -> . expression BIT_XOR expression
    (21) expression -> . expression LSHIFT expression
    (22) expression -> . expression RSHIFT expression
    (31) expression -> . MINUS expression
    (32) expression -> . PLUS expression
    (33) expression -> . BIT_NEG expression
    (34) expression -> . NOT expression
    (35) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression QUESTION_MARK expression COLON expression
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable STMT_END
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier DOUBLE_PLUS
    (65) expression -> . identifier DOUBLE_MINUS
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (77) expression -> . identifier LPAREN arguments RPAREN
    (52) if_statement -> . IF expression LBRACK statement_list RBRACK
    (53) if_statement -> . IF expression LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK
    (54) if_statement -> . IF expression LBRACK statement_list RBRACK ELSE if_statement
    (8) primitive -> . NUM_INT
    (9) primitive -> . NUM_FLOAT
    (10) primitive -> . STRING
    (11) primitive -> . boolean
    (23) boolean -> . expression EQ expression
    (24) boolean -> . expression NEQ expression
    (25) boolean -> . expression GT expression
    (26) boolean -> . expression GTE expression
    (27) boolean -> . expression LT expression
    (28) boolean -> . expression LTE expression
    (29) boolean -> . expression AND expression
    (30) boolean -> . expression OR expression
    (36) boolean -> . TRUE
    (37) boolean -> . FALSE

    EXIT            shift and go to state 6
    PRINT           shift and go to state 8
    FOR             shift and go to state 9
    WHILE           shift and go to state 10
    FUNCTION        shift and go to state 11
    RETURN          shift and go to state 13
    IDENTIFIER      shift and go to state 14
    MINUS           shift and go to state 16
    PLUS            shift and go to state 15
    BIT_NEG         shift and go to state 17
    NOT             shift and go to state 18
    LPAREN          shift and go to state 12
    LSQBRACK        shift and go to state 7
    STRING          shift and go to state 20
    IF              shift and go to state 21
    NUM_INT         shift and go to state 22
    NUM_FLOAT       shift and go to state 23
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26

    identifier                     shift and go to state 3
    expression                     shift and go to state 4
    statement_list                 shift and go to state 166
    statement                      shift and go to state 2
    if_statement                   shift and go to state 5
    primitive                      shift and go to state 19
    boolean                        shift and go to state 24

state 158

    (70) statement -> FOR identifier IN expression ARROW_RTL . expression LBRACK statement_list RBRACK
    (12) expression -> . expression PLUS expression
    (13) expression -> . expression MINUS expression
    (14) expression -> . expression MUL expression
    (15) expression -> . expression DIV expression
    (16) expression -> . expression EXP expression
    (17) expression -> . expression MOD expression
    (18) expression -> . expression BIT_AND expression
    (19) expression -> . expression BIT_OR expression
    (20) expression -> . expression BIT_XOR expression
    (21) expression -> . expression LSHIFT expression
    (22) expression -> . expression RSHIFT expression
    (31) expression -> . MINUS expression
    (32) expression -> . PLUS expression
    (33) expression -> . BIT_NEG expression
    (34) expression -> . NOT expression
    (35) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression QUESTION_MARK expression COLON expression
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable STMT_END
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier DOUBLE_PLUS
    (65) expression -> . identifier DOUBLE_MINUS
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (77) expression -> . identifier LPAREN arguments RPAREN
    (6) identifier -> . IDENTIFIER
    (8) primitive -> . NUM_INT
    (9) primitive -> . NUM_FLOAT
    (10) primitive -> . STRING
    (11) primitive -> . boolean
    (23) boolean -> . expression EQ expression
    (24) boolean -> . expression NEQ expression
    (25) boolean -> . expression GT expression
    (26) boolean -> . expression GTE expression
    (27) boolean -> . expression LT expression
    (28) boolean -> . expression LTE expression
    (29) boolean -> . expression AND expression
    (30) boolean -> . expression OR expression
    (36) boolean -> . TRUE
    (37) boolean -> . FALSE

    MINUS           shift and go to state 16
    PLUS            shift and go to state 15
    BIT_NEG         shift and go to state 17
    NOT             shift and go to state 18
    LPAREN          shift and go to state 12
    LSQBRACK        shift and go to state 7
    STRING          shift and go to state 20
    IDENTIFIER      shift and go to state 14
    NUM_INT         shift and go to state 22
    NUM_FLOAT       shift and go to state 23
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26

    identifier                     shift and go to state 64
    expression                     shift and go to state 167
    primitive                      shift and go to state 19
    boolean                        shift and go to state 24

state 159

    (72) statement -> WHILE expression LBRACK statement_list RBRACK .

    EXIT            reduce using rule 72 (statement -> WHILE expression LBRACK statement_list RBRACK .)
    PRINT           reduce using rule 72 (statement -> WHILE expression LBRACK statement_list RBRACK .)
    FOR             reduce using rule 72 (statement -> WHILE expression LBRACK statement_list RBRACK .)
    WHILE           reduce using rule 72 (statement -> WHILE expression LBRACK statement_list RBRACK .)
    FUNCTION        reduce using rule 72 (statement -> WHILE expression LBRACK statement_list RBRACK .)
    RETURN          reduce using rule 72 (statement -> WHILE expression LBRACK statement_list RBRACK .)
    IDENTIFIER      reduce using rule 72 (statement -> WHILE expression LBRACK statement_list RBRACK .)
    MINUS           reduce using rule 72 (statement -> WHILE expression LBRACK statement_list RBRACK .)
    PLUS            reduce using rule 72 (statement -> WHILE expression LBRACK statement_list RBRACK .)
    BIT_NEG         reduce using rule 72 (statement -> WHILE expression LBRACK statement_list RBRACK .)
    NOT             reduce using rule 72 (statement -> WHILE expression LBRACK statement_list RBRACK .)
    LPAREN          reduce using rule 72 (statement -> WHILE expression LBRACK statement_list RBRACK .)
    LSQBRACK        reduce using rule 72 (statement -> WHILE expression LBRACK statement_list RBRACK .)
    STRING          reduce using rule 72 (statement -> WHILE expression LBRACK statement_list RBRACK .)
    IF              reduce using rule 72 (statement -> WHILE expression LBRACK statement_list RBRACK .)
    NUM_INT         reduce using rule 72 (statement -> WHILE expression LBRACK statement_list RBRACK .)
    NUM_FLOAT       reduce using rule 72 (statement -> WHILE expression LBRACK statement_list RBRACK .)
    TRUE            reduce using rule 72 (statement -> WHILE expression LBRACK statement_list RBRACK .)
    FALSE           reduce using rule 72 (statement -> WHILE expression LBRACK statement_list RBRACK .)
    $end            reduce using rule 72 (statement -> WHILE expression LBRACK statement_list RBRACK .)
    RBRACK          reduce using rule 72 (statement -> WHILE expression LBRACK statement_list RBRACK .)


state 160

    (74) statement -> FUNCTION identifier LPAREN arguments RPAREN . LBRACK statement_list RBRACK

    LBRACK          shift and go to state 168


state 161

    (75) statement -> FUNCTION identifier LBRACK statement_list RBRACK .

    EXIT            reduce using rule 75 (statement -> FUNCTION identifier LBRACK statement_list RBRACK .)
    PRINT           reduce using rule 75 (statement -> FUNCTION identifier LBRACK statement_list RBRACK .)
    FOR             reduce using rule 75 (statement -> FUNCTION identifier LBRACK statement_list RBRACK .)
    WHILE           reduce using rule 75 (statement -> FUNCTION identifier LBRACK statement_list RBRACK .)
    FUNCTION        reduce using rule 75 (statement -> FUNCTION identifier LBRACK statement_list RBRACK .)
    RETURN          reduce using rule 75 (statement -> FUNCTION identifier LBRACK statement_list RBRACK .)
    IDENTIFIER      reduce using rule 75 (statement -> FUNCTION identifier LBRACK statement_list RBRACK .)
    MINUS           reduce using rule 75 (statement -> FUNCTION identifier LBRACK statement_list RBRACK .)
    PLUS            reduce using rule 75 (statement -> FUNCTION identifier LBRACK statement_list RBRACK .)
    BIT_NEG         reduce using rule 75 (statement -> FUNCTION identifier LBRACK statement_list RBRACK .)
    NOT             reduce using rule 75 (statement -> FUNCTION identifier LBRACK statement_list RBRACK .)
    LPAREN          reduce using rule 75 (statement -> FUNCTION identifier LBRACK statement_list RBRACK .)
    LSQBRACK        reduce using rule 75 (statement -> FUNCTION identifier LBRACK statement_list RBRACK .)
    STRING          reduce using rule 75 (statement -> FUNCTION identifier LBRACK statement_list RBRACK .)
    IF              reduce using rule 75 (statement -> FUNCTION identifier LBRACK statement_list RBRACK .)
    NUM_INT         reduce using rule 75 (statement -> FUNCTION identifier LBRACK statement_list RBRACK .)
    NUM_FLOAT       reduce using rule 75 (statement -> FUNCTION identifier LBRACK statement_list RBRACK .)
    TRUE            reduce using rule 75 (statement -> FUNCTION identifier LBRACK statement_list RBRACK .)
    FALSE           reduce using rule 75 (statement -> FUNCTION identifier LBRACK statement_list RBRACK .)
    $end            reduce using rule 75 (statement -> FUNCTION identifier LBRACK statement_list RBRACK .)
    RBRACK          reduce using rule 75 (statement -> FUNCTION identifier LBRACK statement_list RBRACK .)


state 162

    (52) if_statement -> IF expression LBRACK statement_list RBRACK .
    (53) if_statement -> IF expression LBRACK statement_list RBRACK . ELSE LBRACK statement_list RBRACK
    (54) if_statement -> IF expression LBRACK statement_list RBRACK . ELSE if_statement

    EXIT            reduce using rule 52 (if_statement -> IF expression LBRACK statement_list RBRACK .)
    PRINT           reduce using rule 52 (if_statement -> IF expression LBRACK statement_list RBRACK .)
    FOR             reduce using rule 52 (if_statement -> IF expression LBRACK statement_list RBRACK .)
    WHILE           reduce using rule 52 (if_statement -> IF expression LBRACK statement_list RBRACK .)
    FUNCTION        reduce using rule 52 (if_statement -> IF expression LBRACK statement_list RBRACK .)
    RETURN          reduce using rule 52 (if_statement -> IF expression LBRACK statement_list RBRACK .)
    IDENTIFIER      reduce using rule 52 (if_statement -> IF expression LBRACK statement_list RBRACK .)
    MINUS           reduce using rule 52 (if_statement -> IF expression LBRACK statement_list RBRACK .)
    PLUS            reduce using rule 52 (if_statement -> IF expression LBRACK statement_list RBRACK .)
    BIT_NEG         reduce using rule 52 (if_statement -> IF expression LBRACK statement_list RBRACK .)
    NOT             reduce using rule 52 (if_statement -> IF expression LBRACK statement_list RBRACK .)
    LPAREN          reduce using rule 52 (if_statement -> IF expression LBRACK statement_list RBRACK .)
    LSQBRACK        reduce using rule 52 (if_statement -> IF expression LBRACK statement_list RBRACK .)
    STRING          reduce using rule 52 (if_statement -> IF expression LBRACK statement_list RBRACK .)
    IF              reduce using rule 52 (if_statement -> IF expression LBRACK statement_list RBRACK .)
    NUM_INT         reduce using rule 52 (if_statement -> IF expression LBRACK statement_list RBRACK .)
    NUM_FLOAT       reduce using rule 52 (if_statement -> IF expression LBRACK statement_list RBRACK .)
    TRUE            reduce using rule 52 (if_statement -> IF expression LBRACK statement_list RBRACK .)
    FALSE           reduce using rule 52 (if_statement -> IF expression LBRACK statement_list RBRACK .)
    $end            reduce using rule 52 (if_statement -> IF expression LBRACK statement_list RBRACK .)
    RBRACK          reduce using rule 52 (if_statement -> IF expression LBRACK statement_list RBRACK .)
    ELSE            shift and go to state 169


state 163

    (50) statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression . STMT_END
    (12) expression -> expression . PLUS expression
    (13) expression -> expression . MINUS expression
    (14) expression -> expression . MUL expression
    (15) expression -> expression . DIV expression
    (16) expression -> expression . EXP expression
    (17) expression -> expression . MOD expression
    (18) expression -> expression . BIT_AND expression
    (19) expression -> expression . BIT_OR expression
    (20) expression -> expression . BIT_XOR expression
    (21) expression -> expression . LSHIFT expression
    (22) expression -> expression . RSHIFT expression
    (43) expression -> expression . QUESTION_MARK expression COLON expression
    (55) expression -> expression . IN expression
    (56) expression -> expression . NOT IN expression
    (23) boolean -> expression . EQ expression
    (24) boolean -> expression . NEQ expression
    (25) boolean -> expression . GT expression
    (26) boolean -> expression . GTE expression
    (27) boolean -> expression . LT expression
    (28) boolean -> expression . LTE expression
    (29) boolean -> expression . AND expression
    (30) boolean -> expression . OR expression

    STMT_END        shift and go to state 170
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    MUL             shift and go to state 41
    DIV             shift and go to state 42
    EXP             shift and go to state 43
    MOD             shift and go to state 44
    BIT_AND         shift and go to state 45
    BIT_OR          shift and go to state 46
    BIT_XOR         shift and go to state 47
    LSHIFT          shift and go to state 48
    RSHIFT          shift and go to state 49
    QUESTION_MARK   shift and go to state 50
    IN              shift and go to state 51
    NOT             shift and go to state 52
    EQ              shift and go to state 53
    NEQ             shift and go to state 54
    GT              shift and go to state 55
    GTE             shift and go to state 56
    LT              shift and go to state 57
    LTE             shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60


state 164

    (46) expression -> identifier LSQBRACK expression COLON expression RSQBRACK .

    PLUS            reduce using rule 46 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    MINUS           reduce using rule 46 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    MUL             reduce using rule 46 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    DIV             reduce using rule 46 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    EXP             reduce using rule 46 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    MOD             reduce using rule 46 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    BIT_AND         reduce using rule 46 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    BIT_OR          reduce using rule 46 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    BIT_XOR         reduce using rule 46 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    LSHIFT          reduce using rule 46 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    RSHIFT          reduce using rule 46 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    QUESTION_MARK   reduce using rule 46 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    IN              reduce using rule 46 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    NOT             reduce using rule 46 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    EQ              reduce using rule 46 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    NEQ             reduce using rule 46 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    GT              reduce using rule 46 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    GTE             reduce using rule 46 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    LT              reduce using rule 46 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    LTE             reduce using rule 46 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    AND             reduce using rule 46 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    OR              reduce using rule 46 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    EXIT            reduce using rule 46 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    PRINT           reduce using rule 46 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    FOR             reduce using rule 46 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    WHILE           reduce using rule 46 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    FUNCTION        reduce using rule 46 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    RETURN          reduce using rule 46 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    IDENTIFIER      reduce using rule 46 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    BIT_NEG         reduce using rule 46 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    LPAREN          reduce using rule 46 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    LSQBRACK        reduce using rule 46 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    STRING          reduce using rule 46 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    IF              reduce using rule 46 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    NUM_INT         reduce using rule 46 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    NUM_FLOAT       reduce using rule 46 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    TRUE            reduce using rule 46 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    FALSE           reduce using rule 46 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    $end            reduce using rule 46 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    RSQBRACK        reduce using rule 46 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    COMMA           reduce using rule 46 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    STMT_END        reduce using rule 46 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    LBRACK          reduce using rule 46 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    RPAREN          reduce using rule 46 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    COLON           reduce using rule 46 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    RBRACK          reduce using rule 46 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    ARROW_LTR       reduce using rule 46 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    ARROW_RTL       reduce using rule 46 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)


state 165

    (69) statement -> FOR identifier IN expression ARROW_LTR expression . LBRACK statement_list RBRACK
    (12) expression -> expression . PLUS expression
    (13) expression -> expression . MINUS expression
    (14) expression -> expression . MUL expression
    (15) expression -> expression . DIV expression
    (16) expression -> expression . EXP expression
    (17) expression -> expression . MOD expression
    (18) expression -> expression . BIT_AND expression
    (19) expression -> expression . BIT_OR expression
    (20) expression -> expression . BIT_XOR expression
    (21) expression -> expression . LSHIFT expression
    (22) expression -> expression . RSHIFT expression
    (43) expression -> expression . QUESTION_MARK expression COLON expression
    (55) expression -> expression . IN expression
    (56) expression -> expression . NOT IN expression
    (23) boolean -> expression . EQ expression
    (24) boolean -> expression . NEQ expression
    (25) boolean -> expression . GT expression
    (26) boolean -> expression . GTE expression
    (27) boolean -> expression . LT expression
    (28) boolean -> expression . LTE expression
    (29) boolean -> expression . AND expression
    (30) boolean -> expression . OR expression

    LBRACK          shift and go to state 171
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    MUL             shift and go to state 41
    DIV             shift and go to state 42
    EXP             shift and go to state 43
    MOD             shift and go to state 44
    BIT_AND         shift and go to state 45
    BIT_OR          shift and go to state 46
    BIT_XOR         shift and go to state 47
    LSHIFT          shift and go to state 48
    RSHIFT          shift and go to state 49
    QUESTION_MARK   shift and go to state 50
    IN              shift and go to state 51
    NOT             shift and go to state 52
    EQ              shift and go to state 53
    NEQ             shift and go to state 54
    GT              shift and go to state 55
    GTE             shift and go to state 56
    LT              shift and go to state 57
    LTE             shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60


state 166

    (71) statement -> FOR identifier IN expression LBRACK statement_list . RBRACK
    (2) statement_list -> statement_list . statement
    (3) statement -> . identifier
    (4) statement -> . expression
    (5) statement -> . if_statement
    (7) statement -> . EXIT STMT_END
    (50) statement -> . identifier LSQBRACK expression RSQBRACK EQUALS expression STMT_END
    (57) statement -> . PRINT arguments STMT_END
    (58) statement -> . identifier PLUS_EQ expression STMT_END
    (59) statement -> . identifier MINUS_EQ expression STMT_END
    (60) statement -> . identifier MUL_EQ expression STMT_END
    (61) statement -> . identifier DIV_EQ expression STMT_END
    (62) statement -> . identifier EXP_EQ expression STMT_END
    (63) statement -> . identifier MOD_EQ expression STMT_END
    (69) statement -> . FOR identifier IN expression ARROW_LTR expression LBRACK statement_list RBRACK
    (70) statement -> . FOR identifier IN expression ARROW_RTL expression LBRACK statement_list RBRACK
    (71) statement -> . FOR identifier IN expression LBRACK statement_list RBRACK
    (72) statement -> . WHILE expression LBRACK statement_list RBRACK
    (73) statement -> . FOR LBRACK statement_list RBRACK
    (74) statement -> . FUNCTION identifier LPAREN arguments RPAREN LBRACK statement_list RBRACK
    (75) statement -> . FUNCTION identifier LBRACK statement_list RBRACK
    (76) statement -> . RETURN expression STMT_END
    (78) statement -> . identifier LPAREN arguments RPAREN STMT_END
    (6) identifier -> . IDENTIFIER
    (12) expression -> . expression PLUS expression
    (13) expression -> . expression MINUS expression
    (14) expression -> . expression MUL expression
    (15) expression -> . expression DIV expression
    (16) expression -> . expression EXP expression
    (17) expression -> . expression MOD expression
    (18) expression -> . expression BIT_AND expression
    (19) expression -> . expression BIT_OR expression
    (20) expression -> . expression BIT_XOR expression
    (21) expression -> . expression LSHIFT expression
    (22) expression -> . expression RSHIFT expression
    (31) expression -> . MINUS expression
    (32) expression -> . PLUS expression
    (33) expression -> . BIT_NEG expression
    (34) expression -> . NOT expression
    (35) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression QUESTION_MARK expression COLON expression
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable STMT_END
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier DOUBLE_PLUS
    (65) expression -> . identifier DOUBLE_MINUS
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (77) expression -> . identifier LPAREN arguments RPAREN
    (52) if_statement -> . IF expression LBRACK statement_list RBRACK
    (53) if_statement -> . IF expression LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK
    (54) if_statement -> . IF expression LBRACK statement_list RBRACK ELSE if_statement
    (8) primitive -> . NUM_INT
    (9) primitive -> . NUM_FLOAT
    (10) primitive -> . STRING
    (11) primitive -> . boolean
    (23) boolean -> . expression EQ expression
    (24) boolean -> . expression NEQ expression
    (25) boolean -> . expression GT expression
    (26) boolean -> . expression GTE expression
    (27) boolean -> . expression LT expression
    (28) boolean -> . expression LTE expression
    (29) boolean -> . expression AND expression
    (30) boolean -> . expression OR expression
    (36) boolean -> . TRUE
    (37) boolean -> . FALSE

    RBRACK          shift and go to state 172
    EXIT            shift and go to state 6
    PRINT           shift and go to state 8
    FOR             shift and go to state 9
    WHILE           shift and go to state 10
    FUNCTION        shift and go to state 11
    RETURN          shift and go to state 13
    IDENTIFIER      shift and go to state 14
    MINUS           shift and go to state 16
    PLUS            shift and go to state 15
    BIT_NEG         shift and go to state 17
    NOT             shift and go to state 18
    LPAREN          shift and go to state 12
    LSQBRACK        shift and go to state 7
    STRING          shift and go to state 20
    IF              shift and go to state 21
    NUM_INT         shift and go to state 22
    NUM_FLOAT       shift and go to state 23
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26

    identifier                     shift and go to state 3
    expression                     shift and go to state 4
    statement                      shift and go to state 27
    if_statement                   shift and go to state 5
    primitive                      shift and go to state 19
    boolean                        shift and go to state 24

state 167

    (70) statement -> FOR identifier IN expression ARROW_RTL expression . LBRACK statement_list RBRACK
    (12) expression -> expression . PLUS expression
    (13) expression -> expression . MINUS expression
    (14) expression -> expression . MUL expression
    (15) expression -> expression . DIV expression
    (16) expression -> expression . EXP expression
    (17) expression -> expression . MOD expression
    (18) expression -> expression . BIT_AND expression
    (19) expression -> expression . BIT_OR expression
    (20) expression -> expression . BIT_XOR expression
    (21) expression -> expression . LSHIFT expression
    (22) expression -> expression . RSHIFT expression
    (43) expression -> expression . QUESTION_MARK expression COLON expression
    (55) expression -> expression . IN expression
    (56) expression -> expression . NOT IN expression
    (23) boolean -> expression . EQ expression
    (24) boolean -> expression . NEQ expression
    (25) boolean -> expression . GT expression
    (26) boolean -> expression . GTE expression
    (27) boolean -> expression . LT expression
    (28) boolean -> expression . LTE expression
    (29) boolean -> expression . AND expression
    (30) boolean -> expression . OR expression

    LBRACK          shift and go to state 173
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    MUL             shift and go to state 41
    DIV             shift and go to state 42
    EXP             shift and go to state 43
    MOD             shift and go to state 44
    BIT_AND         shift and go to state 45
    BIT_OR          shift and go to state 46
    BIT_XOR         shift and go to state 47
    LSHIFT          shift and go to state 48
    RSHIFT          shift and go to state 49
    QUESTION_MARK   shift and go to state 50
    IN              shift and go to state 51
    NOT             shift and go to state 52
    EQ              shift and go to state 53
    NEQ             shift and go to state 54
    GT              shift and go to state 55
    GTE             shift and go to state 56
    LT              shift and go to state 57
    LTE             shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60


state 168

    (74) statement -> FUNCTION identifier LPAREN arguments RPAREN LBRACK . statement_list RBRACK
    (1) statement_list -> . statement
    (2) statement_list -> . statement_list statement
    (3) statement -> . identifier
    (4) statement -> . expression
    (5) statement -> . if_statement
    (7) statement -> . EXIT STMT_END
    (50) statement -> . identifier LSQBRACK expression RSQBRACK EQUALS expression STMT_END
    (57) statement -> . PRINT arguments STMT_END
    (58) statement -> . identifier PLUS_EQ expression STMT_END
    (59) statement -> . identifier MINUS_EQ expression STMT_END
    (60) statement -> . identifier MUL_EQ expression STMT_END
    (61) statement -> . identifier DIV_EQ expression STMT_END
    (62) statement -> . identifier EXP_EQ expression STMT_END
    (63) statement -> . identifier MOD_EQ expression STMT_END
    (69) statement -> . FOR identifier IN expression ARROW_LTR expression LBRACK statement_list RBRACK
    (70) statement -> . FOR identifier IN expression ARROW_RTL expression LBRACK statement_list RBRACK
    (71) statement -> . FOR identifier IN expression LBRACK statement_list RBRACK
    (72) statement -> . WHILE expression LBRACK statement_list RBRACK
    (73) statement -> . FOR LBRACK statement_list RBRACK
    (74) statement -> . FUNCTION identifier LPAREN arguments RPAREN LBRACK statement_list RBRACK
    (75) statement -> . FUNCTION identifier LBRACK statement_list RBRACK
    (76) statement -> . RETURN expression STMT_END
    (78) statement -> . identifier LPAREN arguments RPAREN STMT_END
    (6) identifier -> . IDENTIFIER
    (12) expression -> . expression PLUS expression
    (13) expression -> . expression MINUS expression
    (14) expression -> . expression MUL expression
    (15) expression -> . expression DIV expression
    (16) expression -> . expression EXP expression
    (17) expression -> . expression MOD expression
    (18) expression -> . expression BIT_AND expression
    (19) expression -> . expression BIT_OR expression
    (20) expression -> . expression BIT_XOR expression
    (21) expression -> . expression LSHIFT expression
    (22) expression -> . expression RSHIFT expression
    (31) expression -> . MINUS expression
    (32) expression -> . PLUS expression
    (33) expression -> . BIT_NEG expression
    (34) expression -> . NOT expression
    (35) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression QUESTION_MARK expression COLON expression
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable STMT_END
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier DOUBLE_PLUS
    (65) expression -> . identifier DOUBLE_MINUS
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (77) expression -> . identifier LPAREN arguments RPAREN
    (52) if_statement -> . IF expression LBRACK statement_list RBRACK
    (53) if_statement -> . IF expression LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK
    (54) if_statement -> . IF expression LBRACK statement_list RBRACK ELSE if_statement
    (8) primitive -> . NUM_INT
    (9) primitive -> . NUM_FLOAT
    (10) primitive -> . STRING
    (11) primitive -> . boolean
    (23) boolean -> . expression EQ expression
    (24) boolean -> . expression NEQ expression
    (25) boolean -> . expression GT expression
    (26) boolean -> . expression GTE expression
    (27) boolean -> . expression LT expression
    (28) boolean -> . expression LTE expression
    (29) boolean -> . expression AND expression
    (30) boolean -> . expression OR expression
    (36) boolean -> . TRUE
    (37) boolean -> . FALSE

    EXIT            shift and go to state 6
    PRINT           shift and go to state 8
    FOR             shift and go to state 9
    WHILE           shift and go to state 10
    FUNCTION        shift and go to state 11
    RETURN          shift and go to state 13
    IDENTIFIER      shift and go to state 14
    MINUS           shift and go to state 16
    PLUS            shift and go to state 15
    BIT_NEG         shift and go to state 17
    NOT             shift and go to state 18
    LPAREN          shift and go to state 12
    LSQBRACK        shift and go to state 7
    STRING          shift and go to state 20
    IF              shift and go to state 21
    NUM_INT         shift and go to state 22
    NUM_FLOAT       shift and go to state 23
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26

    identifier                     shift and go to state 3
    statement_list                 shift and go to state 174
    statement                      shift and go to state 2
    expression                     shift and go to state 4
    if_statement                   shift and go to state 5
    primitive                      shift and go to state 19
    boolean                        shift and go to state 24

state 169

    (53) if_statement -> IF expression LBRACK statement_list RBRACK ELSE . LBRACK statement_list RBRACK
    (54) if_statement -> IF expression LBRACK statement_list RBRACK ELSE . if_statement
    (52) if_statement -> . IF expression LBRACK statement_list RBRACK
    (53) if_statement -> . IF expression LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK
    (54) if_statement -> . IF expression LBRACK statement_list RBRACK ELSE if_statement

    LBRACK          shift and go to state 175
    IF              shift and go to state 21

    if_statement                   shift and go to state 176

state 170

    (50) statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression STMT_END .

    EXIT            reduce using rule 50 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression STMT_END .)
    PRINT           reduce using rule 50 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression STMT_END .)
    FOR             reduce using rule 50 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression STMT_END .)
    WHILE           reduce using rule 50 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression STMT_END .)
    FUNCTION        reduce using rule 50 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression STMT_END .)
    RETURN          reduce using rule 50 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression STMT_END .)
    IDENTIFIER      reduce using rule 50 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression STMT_END .)
    MINUS           reduce using rule 50 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression STMT_END .)
    PLUS            reduce using rule 50 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression STMT_END .)
    BIT_NEG         reduce using rule 50 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression STMT_END .)
    NOT             reduce using rule 50 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression STMT_END .)
    LPAREN          reduce using rule 50 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression STMT_END .)
    LSQBRACK        reduce using rule 50 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression STMT_END .)
    STRING          reduce using rule 50 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression STMT_END .)
    IF              reduce using rule 50 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression STMT_END .)
    NUM_INT         reduce using rule 50 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression STMT_END .)
    NUM_FLOAT       reduce using rule 50 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression STMT_END .)
    TRUE            reduce using rule 50 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression STMT_END .)
    FALSE           reduce using rule 50 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression STMT_END .)
    $end            reduce using rule 50 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression STMT_END .)
    RBRACK          reduce using rule 50 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression STMT_END .)


state 171

    (69) statement -> FOR identifier IN expression ARROW_LTR expression LBRACK . statement_list RBRACK
    (1) statement_list -> . statement
    (2) statement_list -> . statement_list statement
    (3) statement -> . identifier
    (4) statement -> . expression
    (5) statement -> . if_statement
    (7) statement -> . EXIT STMT_END
    (50) statement -> . identifier LSQBRACK expression RSQBRACK EQUALS expression STMT_END
    (57) statement -> . PRINT arguments STMT_END
    (58) statement -> . identifier PLUS_EQ expression STMT_END
    (59) statement -> . identifier MINUS_EQ expression STMT_END
    (60) statement -> . identifier MUL_EQ expression STMT_END
    (61) statement -> . identifier DIV_EQ expression STMT_END
    (62) statement -> . identifier EXP_EQ expression STMT_END
    (63) statement -> . identifier MOD_EQ expression STMT_END
    (69) statement -> . FOR identifier IN expression ARROW_LTR expression LBRACK statement_list RBRACK
    (70) statement -> . FOR identifier IN expression ARROW_RTL expression LBRACK statement_list RBRACK
    (71) statement -> . FOR identifier IN expression LBRACK statement_list RBRACK
    (72) statement -> . WHILE expression LBRACK statement_list RBRACK
    (73) statement -> . FOR LBRACK statement_list RBRACK
    (74) statement -> . FUNCTION identifier LPAREN arguments RPAREN LBRACK statement_list RBRACK
    (75) statement -> . FUNCTION identifier LBRACK statement_list RBRACK
    (76) statement -> . RETURN expression STMT_END
    (78) statement -> . identifier LPAREN arguments RPAREN STMT_END
    (6) identifier -> . IDENTIFIER
    (12) expression -> . expression PLUS expression
    (13) expression -> . expression MINUS expression
    (14) expression -> . expression MUL expression
    (15) expression -> . expression DIV expression
    (16) expression -> . expression EXP expression
    (17) expression -> . expression MOD expression
    (18) expression -> . expression BIT_AND expression
    (19) expression -> . expression BIT_OR expression
    (20) expression -> . expression BIT_XOR expression
    (21) expression -> . expression LSHIFT expression
    (22) expression -> . expression RSHIFT expression
    (31) expression -> . MINUS expression
    (32) expression -> . PLUS expression
    (33) expression -> . BIT_NEG expression
    (34) expression -> . NOT expression
    (35) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression QUESTION_MARK expression COLON expression
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable STMT_END
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier DOUBLE_PLUS
    (65) expression -> . identifier DOUBLE_MINUS
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (77) expression -> . identifier LPAREN arguments RPAREN
    (52) if_statement -> . IF expression LBRACK statement_list RBRACK
    (53) if_statement -> . IF expression LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK
    (54) if_statement -> . IF expression LBRACK statement_list RBRACK ELSE if_statement
    (8) primitive -> . NUM_INT
    (9) primitive -> . NUM_FLOAT
    (10) primitive -> . STRING
    (11) primitive -> . boolean
    (23) boolean -> . expression EQ expression
    (24) boolean -> . expression NEQ expression
    (25) boolean -> . expression GT expression
    (26) boolean -> . expression GTE expression
    (27) boolean -> . expression LT expression
    (28) boolean -> . expression LTE expression
    (29) boolean -> . expression AND expression
    (30) boolean -> . expression OR expression
    (36) boolean -> . TRUE
    (37) boolean -> . FALSE

    EXIT            shift and go to state 6
    PRINT           shift and go to state 8
    FOR             shift and go to state 9
    WHILE           shift and go to state 10
    FUNCTION        shift and go to state 11
    RETURN          shift and go to state 13
    IDENTIFIER      shift and go to state 14
    MINUS           shift and go to state 16
    PLUS            shift and go to state 15
    BIT_NEG         shift and go to state 17
    NOT             shift and go to state 18
    LPAREN          shift and go to state 12
    LSQBRACK        shift and go to state 7
    STRING          shift and go to state 20
    IF              shift and go to state 21
    NUM_INT         shift and go to state 22
    NUM_FLOAT       shift and go to state 23
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26

    identifier                     shift and go to state 3
    expression                     shift and go to state 4
    statement_list                 shift and go to state 177
    statement                      shift and go to state 2
    if_statement                   shift and go to state 5
    primitive                      shift and go to state 19
    boolean                        shift and go to state 24

state 172

    (71) statement -> FOR identifier IN expression LBRACK statement_list RBRACK .

    EXIT            reduce using rule 71 (statement -> FOR identifier IN expression LBRACK statement_list RBRACK .)
    PRINT           reduce using rule 71 (statement -> FOR identifier IN expression LBRACK statement_list RBRACK .)
    FOR             reduce using rule 71 (statement -> FOR identifier IN expression LBRACK statement_list RBRACK .)
    WHILE           reduce using rule 71 (statement -> FOR identifier IN expression LBRACK statement_list RBRACK .)
    FUNCTION        reduce using rule 71 (statement -> FOR identifier IN expression LBRACK statement_list RBRACK .)
    RETURN          reduce using rule 71 (statement -> FOR identifier IN expression LBRACK statement_list RBRACK .)
    IDENTIFIER      reduce using rule 71 (statement -> FOR identifier IN expression LBRACK statement_list RBRACK .)
    MINUS           reduce using rule 71 (statement -> FOR identifier IN expression LBRACK statement_list RBRACK .)
    PLUS            reduce using rule 71 (statement -> FOR identifier IN expression LBRACK statement_list RBRACK .)
    BIT_NEG         reduce using rule 71 (statement -> FOR identifier IN expression LBRACK statement_list RBRACK .)
    NOT             reduce using rule 71 (statement -> FOR identifier IN expression LBRACK statement_list RBRACK .)
    LPAREN          reduce using rule 71 (statement -> FOR identifier IN expression LBRACK statement_list RBRACK .)
    LSQBRACK        reduce using rule 71 (statement -> FOR identifier IN expression LBRACK statement_list RBRACK .)
    STRING          reduce using rule 71 (statement -> FOR identifier IN expression LBRACK statement_list RBRACK .)
    IF              reduce using rule 71 (statement -> FOR identifier IN expression LBRACK statement_list RBRACK .)
    NUM_INT         reduce using rule 71 (statement -> FOR identifier IN expression LBRACK statement_list RBRACK .)
    NUM_FLOAT       reduce using rule 71 (statement -> FOR identifier IN expression LBRACK statement_list RBRACK .)
    TRUE            reduce using rule 71 (statement -> FOR identifier IN expression LBRACK statement_list RBRACK .)
    FALSE           reduce using rule 71 (statement -> FOR identifier IN expression LBRACK statement_list RBRACK .)
    $end            reduce using rule 71 (statement -> FOR identifier IN expression LBRACK statement_list RBRACK .)
    RBRACK          reduce using rule 71 (statement -> FOR identifier IN expression LBRACK statement_list RBRACK .)


state 173

    (70) statement -> FOR identifier IN expression ARROW_RTL expression LBRACK . statement_list RBRACK
    (1) statement_list -> . statement
    (2) statement_list -> . statement_list statement
    (3) statement -> . identifier
    (4) statement -> . expression
    (5) statement -> . if_statement
    (7) statement -> . EXIT STMT_END
    (50) statement -> . identifier LSQBRACK expression RSQBRACK EQUALS expression STMT_END
    (57) statement -> . PRINT arguments STMT_END
    (58) statement -> . identifier PLUS_EQ expression STMT_END
    (59) statement -> . identifier MINUS_EQ expression STMT_END
    (60) statement -> . identifier MUL_EQ expression STMT_END
    (61) statement -> . identifier DIV_EQ expression STMT_END
    (62) statement -> . identifier EXP_EQ expression STMT_END
    (63) statement -> . identifier MOD_EQ expression STMT_END
    (69) statement -> . FOR identifier IN expression ARROW_LTR expression LBRACK statement_list RBRACK
    (70) statement -> . FOR identifier IN expression ARROW_RTL expression LBRACK statement_list RBRACK
    (71) statement -> . FOR identifier IN expression LBRACK statement_list RBRACK
    (72) statement -> . WHILE expression LBRACK statement_list RBRACK
    (73) statement -> . FOR LBRACK statement_list RBRACK
    (74) statement -> . FUNCTION identifier LPAREN arguments RPAREN LBRACK statement_list RBRACK
    (75) statement -> . FUNCTION identifier LBRACK statement_list RBRACK
    (76) statement -> . RETURN expression STMT_END
    (78) statement -> . identifier LPAREN arguments RPAREN STMT_END
    (6) identifier -> . IDENTIFIER
    (12) expression -> . expression PLUS expression
    (13) expression -> . expression MINUS expression
    (14) expression -> . expression MUL expression
    (15) expression -> . expression DIV expression
    (16) expression -> . expression EXP expression
    (17) expression -> . expression MOD expression
    (18) expression -> . expression BIT_AND expression
    (19) expression -> . expression BIT_OR expression
    (20) expression -> . expression BIT_XOR expression
    (21) expression -> . expression LSHIFT expression
    (22) expression -> . expression RSHIFT expression
    (31) expression -> . MINUS expression
    (32) expression -> . PLUS expression
    (33) expression -> . BIT_NEG expression
    (34) expression -> . NOT expression
    (35) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression QUESTION_MARK expression COLON expression
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable STMT_END
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier DOUBLE_PLUS
    (65) expression -> . identifier DOUBLE_MINUS
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (77) expression -> . identifier LPAREN arguments RPAREN
    (52) if_statement -> . IF expression LBRACK statement_list RBRACK
    (53) if_statement -> . IF expression LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK
    (54) if_statement -> . IF expression LBRACK statement_list RBRACK ELSE if_statement
    (8) primitive -> . NUM_INT
    (9) primitive -> . NUM_FLOAT
    (10) primitive -> . STRING
    (11) primitive -> . boolean
    (23) boolean -> . expression EQ expression
    (24) boolean -> . expression NEQ expression
    (25) boolean -> . expression GT expression
    (26) boolean -> . expression GTE expression
    (27) boolean -> . expression LT expression
    (28) boolean -> . expression LTE expression
    (29) boolean -> . expression AND expression
    (30) boolean -> . expression OR expression
    (36) boolean -> . TRUE
    (37) boolean -> . FALSE

    EXIT            shift and go to state 6
    PRINT           shift and go to state 8
    FOR             shift and go to state 9
    WHILE           shift and go to state 10
    FUNCTION        shift and go to state 11
    RETURN          shift and go to state 13
    IDENTIFIER      shift and go to state 14
    MINUS           shift and go to state 16
    PLUS            shift and go to state 15
    BIT_NEG         shift and go to state 17
    NOT             shift and go to state 18
    LPAREN          shift and go to state 12
    LSQBRACK        shift and go to state 7
    STRING          shift and go to state 20
    IF              shift and go to state 21
    NUM_INT         shift and go to state 22
    NUM_FLOAT       shift and go to state 23
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26

    identifier                     shift and go to state 3
    expression                     shift and go to state 4
    statement_list                 shift and go to state 178
    statement                      shift and go to state 2
    if_statement                   shift and go to state 5
    primitive                      shift and go to state 19
    boolean                        shift and go to state 24

state 174

    (74) statement -> FUNCTION identifier LPAREN arguments RPAREN LBRACK statement_list . RBRACK
    (2) statement_list -> statement_list . statement
    (3) statement -> . identifier
    (4) statement -> . expression
    (5) statement -> . if_statement
    (7) statement -> . EXIT STMT_END
    (50) statement -> . identifier LSQBRACK expression RSQBRACK EQUALS expression STMT_END
    (57) statement -> . PRINT arguments STMT_END
    (58) statement -> . identifier PLUS_EQ expression STMT_END
    (59) statement -> . identifier MINUS_EQ expression STMT_END
    (60) statement -> . identifier MUL_EQ expression STMT_END
    (61) statement -> . identifier DIV_EQ expression STMT_END
    (62) statement -> . identifier EXP_EQ expression STMT_END
    (63) statement -> . identifier MOD_EQ expression STMT_END
    (69) statement -> . FOR identifier IN expression ARROW_LTR expression LBRACK statement_list RBRACK
    (70) statement -> . FOR identifier IN expression ARROW_RTL expression LBRACK statement_list RBRACK
    (71) statement -> . FOR identifier IN expression LBRACK statement_list RBRACK
    (72) statement -> . WHILE expression LBRACK statement_list RBRACK
    (73) statement -> . FOR LBRACK statement_list RBRACK
    (74) statement -> . FUNCTION identifier LPAREN arguments RPAREN LBRACK statement_list RBRACK
    (75) statement -> . FUNCTION identifier LBRACK statement_list RBRACK
    (76) statement -> . RETURN expression STMT_END
    (78) statement -> . identifier LPAREN arguments RPAREN STMT_END
    (6) identifier -> . IDENTIFIER
    (12) expression -> . expression PLUS expression
    (13) expression -> . expression MINUS expression
    (14) expression -> . expression MUL expression
    (15) expression -> . expression DIV expression
    (16) expression -> . expression EXP expression
    (17) expression -> . expression MOD expression
    (18) expression -> . expression BIT_AND expression
    (19) expression -> . expression BIT_OR expression
    (20) expression -> . expression BIT_XOR expression
    (21) expression -> . expression LSHIFT expression
    (22) expression -> . expression RSHIFT expression
    (31) expression -> . MINUS expression
    (32) expression -> . PLUS expression
    (33) expression -> . BIT_NEG expression
    (34) expression -> . NOT expression
    (35) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression QUESTION_MARK expression COLON expression
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable STMT_END
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier DOUBLE_PLUS
    (65) expression -> . identifier DOUBLE_MINUS
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (77) expression -> . identifier LPAREN arguments RPAREN
    (52) if_statement -> . IF expression LBRACK statement_list RBRACK
    (53) if_statement -> . IF expression LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK
    (54) if_statement -> . IF expression LBRACK statement_list RBRACK ELSE if_statement
    (8) primitive -> . NUM_INT
    (9) primitive -> . NUM_FLOAT
    (10) primitive -> . STRING
    (11) primitive -> . boolean
    (23) boolean -> . expression EQ expression
    (24) boolean -> . expression NEQ expression
    (25) boolean -> . expression GT expression
    (26) boolean -> . expression GTE expression
    (27) boolean -> . expression LT expression
    (28) boolean -> . expression LTE expression
    (29) boolean -> . expression AND expression
    (30) boolean -> . expression OR expression
    (36) boolean -> . TRUE
    (37) boolean -> . FALSE

    RBRACK          shift and go to state 179
    EXIT            shift and go to state 6
    PRINT           shift and go to state 8
    FOR             shift and go to state 9
    WHILE           shift and go to state 10
    FUNCTION        shift and go to state 11
    RETURN          shift and go to state 13
    IDENTIFIER      shift and go to state 14
    MINUS           shift and go to state 16
    PLUS            shift and go to state 15
    BIT_NEG         shift and go to state 17
    NOT             shift and go to state 18
    LPAREN          shift and go to state 12
    LSQBRACK        shift and go to state 7
    STRING          shift and go to state 20
    IF              shift and go to state 21
    NUM_INT         shift and go to state 22
    NUM_FLOAT       shift and go to state 23
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26

    identifier                     shift and go to state 3
    statement                      shift and go to state 27
    expression                     shift and go to state 4
    if_statement                   shift and go to state 5
    primitive                      shift and go to state 19
    boolean                        shift and go to state 24

state 175

    (53) if_statement -> IF expression LBRACK statement_list RBRACK ELSE LBRACK . statement_list RBRACK
    (1) statement_list -> . statement
    (2) statement_list -> . statement_list statement
    (3) statement -> . identifier
    (4) statement -> . expression
    (5) statement -> . if_statement
    (7) statement -> . EXIT STMT_END
    (50) statement -> . identifier LSQBRACK expression RSQBRACK EQUALS expression STMT_END
    (57) statement -> . PRINT arguments STMT_END
    (58) statement -> . identifier PLUS_EQ expression STMT_END
    (59) statement -> . identifier MINUS_EQ expression STMT_END
    (60) statement -> . identifier MUL_EQ expression STMT_END
    (61) statement -> . identifier DIV_EQ expression STMT_END
    (62) statement -> . identifier EXP_EQ expression STMT_END
    (63) statement -> . identifier MOD_EQ expression STMT_END
    (69) statement -> . FOR identifier IN expression ARROW_LTR expression LBRACK statement_list RBRACK
    (70) statement -> . FOR identifier IN expression ARROW_RTL expression LBRACK statement_list RBRACK
    (71) statement -> . FOR identifier IN expression LBRACK statement_list RBRACK
    (72) statement -> . WHILE expression LBRACK statement_list RBRACK
    (73) statement -> . FOR LBRACK statement_list RBRACK
    (74) statement -> . FUNCTION identifier LPAREN arguments RPAREN LBRACK statement_list RBRACK
    (75) statement -> . FUNCTION identifier LBRACK statement_list RBRACK
    (76) statement -> . RETURN expression STMT_END
    (78) statement -> . identifier LPAREN arguments RPAREN STMT_END
    (6) identifier -> . IDENTIFIER
    (12) expression -> . expression PLUS expression
    (13) expression -> . expression MINUS expression
    (14) expression -> . expression MUL expression
    (15) expression -> . expression DIV expression
    (16) expression -> . expression EXP expression
    (17) expression -> . expression MOD expression
    (18) expression -> . expression BIT_AND expression
    (19) expression -> . expression BIT_OR expression
    (20) expression -> . expression BIT_XOR expression
    (21) expression -> . expression LSHIFT expression
    (22) expression -> . expression RSHIFT expression
    (31) expression -> . MINUS expression
    (32) expression -> . PLUS expression
    (33) expression -> . BIT_NEG expression
    (34) expression -> . NOT expression
    (35) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression QUESTION_MARK expression COLON expression
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable STMT_END
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier DOUBLE_PLUS
    (65) expression -> . identifier DOUBLE_MINUS
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (77) expression -> . identifier LPAREN arguments RPAREN
    (52) if_statement -> . IF expression LBRACK statement_list RBRACK
    (53) if_statement -> . IF expression LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK
    (54) if_statement -> . IF expression LBRACK statement_list RBRACK ELSE if_statement
    (8) primitive -> . NUM_INT
    (9) primitive -> . NUM_FLOAT
    (10) primitive -> . STRING
    (11) primitive -> . boolean
    (23) boolean -> . expression EQ expression
    (24) boolean -> . expression NEQ expression
    (25) boolean -> . expression GT expression
    (26) boolean -> . expression GTE expression
    (27) boolean -> . expression LT expression
    (28) boolean -> . expression LTE expression
    (29) boolean -> . expression AND expression
    (30) boolean -> . expression OR expression
    (36) boolean -> . TRUE
    (37) boolean -> . FALSE

    EXIT            shift and go to state 6
    PRINT           shift and go to state 8
    FOR             shift and go to state 9
    WHILE           shift and go to state 10
    FUNCTION        shift and go to state 11
    RETURN          shift and go to state 13
    IDENTIFIER      shift and go to state 14
    MINUS           shift and go to state 16
    PLUS            shift and go to state 15
    BIT_NEG         shift and go to state 17
    NOT             shift and go to state 18
    LPAREN          shift and go to state 12
    LSQBRACK        shift and go to state 7
    STRING          shift and go to state 20
    IF              shift and go to state 21
    NUM_INT         shift and go to state 22
    NUM_FLOAT       shift and go to state 23
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26

    expression                     shift and go to state 4
    statement_list                 shift and go to state 180
    statement                      shift and go to state 2
    identifier                     shift and go to state 3
    if_statement                   shift and go to state 5
    primitive                      shift and go to state 19
    boolean                        shift and go to state 24

state 176

    (54) if_statement -> IF expression LBRACK statement_list RBRACK ELSE if_statement .

    EXIT            reduce using rule 54 (if_statement -> IF expression LBRACK statement_list RBRACK ELSE if_statement .)
    PRINT           reduce using rule 54 (if_statement -> IF expression LBRACK statement_list RBRACK ELSE if_statement .)
    FOR             reduce using rule 54 (if_statement -> IF expression LBRACK statement_list RBRACK ELSE if_statement .)
    WHILE           reduce using rule 54 (if_statement -> IF expression LBRACK statement_list RBRACK ELSE if_statement .)
    FUNCTION        reduce using rule 54 (if_statement -> IF expression LBRACK statement_list RBRACK ELSE if_statement .)
    RETURN          reduce using rule 54 (if_statement -> IF expression LBRACK statement_list RBRACK ELSE if_statement .)
    IDENTIFIER      reduce using rule 54 (if_statement -> IF expression LBRACK statement_list RBRACK ELSE if_statement .)
    MINUS           reduce using rule 54 (if_statement -> IF expression LBRACK statement_list RBRACK ELSE if_statement .)
    PLUS            reduce using rule 54 (if_statement -> IF expression LBRACK statement_list RBRACK ELSE if_statement .)
    BIT_NEG         reduce using rule 54 (if_statement -> IF expression LBRACK statement_list RBRACK ELSE if_statement .)
    NOT             reduce using rule 54 (if_statement -> IF expression LBRACK statement_list RBRACK ELSE if_statement .)
    LPAREN          reduce using rule 54 (if_statement -> IF expression LBRACK statement_list RBRACK ELSE if_statement .)
    LSQBRACK        reduce using rule 54 (if_statement -> IF expression LBRACK statement_list RBRACK ELSE if_statement .)
    STRING          reduce using rule 54 (if_statement -> IF expression LBRACK statement_list RBRACK ELSE if_statement .)
    IF              reduce using rule 54 (if_statement -> IF expression LBRACK statement_list RBRACK ELSE if_statement .)
    NUM_INT         reduce using rule 54 (if_statement -> IF expression LBRACK statement_list RBRACK ELSE if_statement .)
    NUM_FLOAT       reduce using rule 54 (if_statement -> IF expression LBRACK statement_list RBRACK ELSE if_statement .)
    TRUE            reduce using rule 54 (if_statement -> IF expression LBRACK statement_list RBRACK ELSE if_statement .)
    FALSE           reduce using rule 54 (if_statement -> IF expression LBRACK statement_list RBRACK ELSE if_statement .)
    $end            reduce using rule 54 (if_statement -> IF expression LBRACK statement_list RBRACK ELSE if_statement .)
    RBRACK          reduce using rule 54 (if_statement -> IF expression LBRACK statement_list RBRACK ELSE if_statement .)


state 177

    (69) statement -> FOR identifier IN expression ARROW_LTR expression LBRACK statement_list . RBRACK
    (2) statement_list -> statement_list . statement
    (3) statement -> . identifier
    (4) statement -> . expression
    (5) statement -> . if_statement
    (7) statement -> . EXIT STMT_END
    (50) statement -> . identifier LSQBRACK expression RSQBRACK EQUALS expression STMT_END
    (57) statement -> . PRINT arguments STMT_END
    (58) statement -> . identifier PLUS_EQ expression STMT_END
    (59) statement -> . identifier MINUS_EQ expression STMT_END
    (60) statement -> . identifier MUL_EQ expression STMT_END
    (61) statement -> . identifier DIV_EQ expression STMT_END
    (62) statement -> . identifier EXP_EQ expression STMT_END
    (63) statement -> . identifier MOD_EQ expression STMT_END
    (69) statement -> . FOR identifier IN expression ARROW_LTR expression LBRACK statement_list RBRACK
    (70) statement -> . FOR identifier IN expression ARROW_RTL expression LBRACK statement_list RBRACK
    (71) statement -> . FOR identifier IN expression LBRACK statement_list RBRACK
    (72) statement -> . WHILE expression LBRACK statement_list RBRACK
    (73) statement -> . FOR LBRACK statement_list RBRACK
    (74) statement -> . FUNCTION identifier LPAREN arguments RPAREN LBRACK statement_list RBRACK
    (75) statement -> . FUNCTION identifier LBRACK statement_list RBRACK
    (76) statement -> . RETURN expression STMT_END
    (78) statement -> . identifier LPAREN arguments RPAREN STMT_END
    (6) identifier -> . IDENTIFIER
    (12) expression -> . expression PLUS expression
    (13) expression -> . expression MINUS expression
    (14) expression -> . expression MUL expression
    (15) expression -> . expression DIV expression
    (16) expression -> . expression EXP expression
    (17) expression -> . expression MOD expression
    (18) expression -> . expression BIT_AND expression
    (19) expression -> . expression BIT_OR expression
    (20) expression -> . expression BIT_XOR expression
    (21) expression -> . expression LSHIFT expression
    (22) expression -> . expression RSHIFT expression
    (31) expression -> . MINUS expression
    (32) expression -> . PLUS expression
    (33) expression -> . BIT_NEG expression
    (34) expression -> . NOT expression
    (35) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression QUESTION_MARK expression COLON expression
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable STMT_END
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier DOUBLE_PLUS
    (65) expression -> . identifier DOUBLE_MINUS
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (77) expression -> . identifier LPAREN arguments RPAREN
    (52) if_statement -> . IF expression LBRACK statement_list RBRACK
    (53) if_statement -> . IF expression LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK
    (54) if_statement -> . IF expression LBRACK statement_list RBRACK ELSE if_statement
    (8) primitive -> . NUM_INT
    (9) primitive -> . NUM_FLOAT
    (10) primitive -> . STRING
    (11) primitive -> . boolean
    (23) boolean -> . expression EQ expression
    (24) boolean -> . expression NEQ expression
    (25) boolean -> . expression GT expression
    (26) boolean -> . expression GTE expression
    (27) boolean -> . expression LT expression
    (28) boolean -> . expression LTE expression
    (29) boolean -> . expression AND expression
    (30) boolean -> . expression OR expression
    (36) boolean -> . TRUE
    (37) boolean -> . FALSE

    RBRACK          shift and go to state 181
    EXIT            shift and go to state 6
    PRINT           shift and go to state 8
    FOR             shift and go to state 9
    WHILE           shift and go to state 10
    FUNCTION        shift and go to state 11
    RETURN          shift and go to state 13
    IDENTIFIER      shift and go to state 14
    MINUS           shift and go to state 16
    PLUS            shift and go to state 15
    BIT_NEG         shift and go to state 17
    NOT             shift and go to state 18
    LPAREN          shift and go to state 12
    LSQBRACK        shift and go to state 7
    STRING          shift and go to state 20
    IF              shift and go to state 21
    NUM_INT         shift and go to state 22
    NUM_FLOAT       shift and go to state 23
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26

    identifier                     shift and go to state 3
    expression                     shift and go to state 4
    statement                      shift and go to state 27
    if_statement                   shift and go to state 5
    primitive                      shift and go to state 19
    boolean                        shift and go to state 24

state 178

    (70) statement -> FOR identifier IN expression ARROW_RTL expression LBRACK statement_list . RBRACK
    (2) statement_list -> statement_list . statement
    (3) statement -> . identifier
    (4) statement -> . expression
    (5) statement -> . if_statement
    (7) statement -> . EXIT STMT_END
    (50) statement -> . identifier LSQBRACK expression RSQBRACK EQUALS expression STMT_END
    (57) statement -> . PRINT arguments STMT_END
    (58) statement -> . identifier PLUS_EQ expression STMT_END
    (59) statement -> . identifier MINUS_EQ expression STMT_END
    (60) statement -> . identifier MUL_EQ expression STMT_END
    (61) statement -> . identifier DIV_EQ expression STMT_END
    (62) statement -> . identifier EXP_EQ expression STMT_END
    (63) statement -> . identifier MOD_EQ expression STMT_END
    (69) statement -> . FOR identifier IN expression ARROW_LTR expression LBRACK statement_list RBRACK
    (70) statement -> . FOR identifier IN expression ARROW_RTL expression LBRACK statement_list RBRACK
    (71) statement -> . FOR identifier IN expression LBRACK statement_list RBRACK
    (72) statement -> . WHILE expression LBRACK statement_list RBRACK
    (73) statement -> . FOR LBRACK statement_list RBRACK
    (74) statement -> . FUNCTION identifier LPAREN arguments RPAREN LBRACK statement_list RBRACK
    (75) statement -> . FUNCTION identifier LBRACK statement_list RBRACK
    (76) statement -> . RETURN expression STMT_END
    (78) statement -> . identifier LPAREN arguments RPAREN STMT_END
    (6) identifier -> . IDENTIFIER
    (12) expression -> . expression PLUS expression
    (13) expression -> . expression MINUS expression
    (14) expression -> . expression MUL expression
    (15) expression -> . expression DIV expression
    (16) expression -> . expression EXP expression
    (17) expression -> . expression MOD expression
    (18) expression -> . expression BIT_AND expression
    (19) expression -> . expression BIT_OR expression
    (20) expression -> . expression BIT_XOR expression
    (21) expression -> . expression LSHIFT expression
    (22) expression -> . expression RSHIFT expression
    (31) expression -> . MINUS expression
    (32) expression -> . PLUS expression
    (33) expression -> . BIT_NEG expression
    (34) expression -> . NOT expression
    (35) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression QUESTION_MARK expression COLON expression
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable STMT_END
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier DOUBLE_PLUS
    (65) expression -> . identifier DOUBLE_MINUS
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (77) expression -> . identifier LPAREN arguments RPAREN
    (52) if_statement -> . IF expression LBRACK statement_list RBRACK
    (53) if_statement -> . IF expression LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK
    (54) if_statement -> . IF expression LBRACK statement_list RBRACK ELSE if_statement
    (8) primitive -> . NUM_INT
    (9) primitive -> . NUM_FLOAT
    (10) primitive -> . STRING
    (11) primitive -> . boolean
    (23) boolean -> . expression EQ expression
    (24) boolean -> . expression NEQ expression
    (25) boolean -> . expression GT expression
    (26) boolean -> . expression GTE expression
    (27) boolean -> . expression LT expression
    (28) boolean -> . expression LTE expression
    (29) boolean -> . expression AND expression
    (30) boolean -> . expression OR expression
    (36) boolean -> . TRUE
    (37) boolean -> . FALSE

    RBRACK          shift and go to state 182
    EXIT            shift and go to state 6
    PRINT           shift and go to state 8
    FOR             shift and go to state 9
    WHILE           shift and go to state 10
    FUNCTION        shift and go to state 11
    RETURN          shift and go to state 13
    IDENTIFIER      shift and go to state 14
    MINUS           shift and go to state 16
    PLUS            shift and go to state 15
    BIT_NEG         shift and go to state 17
    NOT             shift and go to state 18
    LPAREN          shift and go to state 12
    LSQBRACK        shift and go to state 7
    STRING          shift and go to state 20
    IF              shift and go to state 21
    NUM_INT         shift and go to state 22
    NUM_FLOAT       shift and go to state 23
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26

    identifier                     shift and go to state 3
    expression                     shift and go to state 4
    statement                      shift and go to state 27
    if_statement                   shift and go to state 5
    primitive                      shift and go to state 19
    boolean                        shift and go to state 24

state 179

    (74) statement -> FUNCTION identifier LPAREN arguments RPAREN LBRACK statement_list RBRACK .

    EXIT            reduce using rule 74 (statement -> FUNCTION identifier LPAREN arguments RPAREN LBRACK statement_list RBRACK .)
    PRINT           reduce using rule 74 (statement -> FUNCTION identifier LPAREN arguments RPAREN LBRACK statement_list RBRACK .)
    FOR             reduce using rule 74 (statement -> FUNCTION identifier LPAREN arguments RPAREN LBRACK statement_list RBRACK .)
    WHILE           reduce using rule 74 (statement -> FUNCTION identifier LPAREN arguments RPAREN LBRACK statement_list RBRACK .)
    FUNCTION        reduce using rule 74 (statement -> FUNCTION identifier LPAREN arguments RPAREN LBRACK statement_list RBRACK .)
    RETURN          reduce using rule 74 (statement -> FUNCTION identifier LPAREN arguments RPAREN LBRACK statement_list RBRACK .)
    IDENTIFIER      reduce using rule 74 (statement -> FUNCTION identifier LPAREN arguments RPAREN LBRACK statement_list RBRACK .)
    MINUS           reduce using rule 74 (statement -> FUNCTION identifier LPAREN arguments RPAREN LBRACK statement_list RBRACK .)
    PLUS            reduce using rule 74 (statement -> FUNCTION identifier LPAREN arguments RPAREN LBRACK statement_list RBRACK .)
    BIT_NEG         reduce using rule 74 (statement -> FUNCTION identifier LPAREN arguments RPAREN LBRACK statement_list RBRACK .)
    NOT             reduce using rule 74 (statement -> FUNCTION identifier LPAREN arguments RPAREN LBRACK statement_list RBRACK .)
    LPAREN          reduce using rule 74 (statement -> FUNCTION identifier LPAREN arguments RPAREN LBRACK statement_list RBRACK .)
    LSQBRACK        reduce using rule 74 (statement -> FUNCTION identifier LPAREN arguments RPAREN LBRACK statement_list RBRACK .)
    STRING          reduce using rule 74 (statement -> FUNCTION identifier LPAREN arguments RPAREN LBRACK statement_list RBRACK .)
    IF              reduce using rule 74 (statement -> FUNCTION identifier LPAREN arguments RPAREN LBRACK statement_list RBRACK .)
    NUM_INT         reduce using rule 74 (statement -> FUNCTION identifier LPAREN arguments RPAREN LBRACK statement_list RBRACK .)
    NUM_FLOAT       reduce using rule 74 (statement -> FUNCTION identifier LPAREN arguments RPAREN LBRACK statement_list RBRACK .)
    TRUE            reduce using rule 74 (statement -> FUNCTION identifier LPAREN arguments RPAREN LBRACK statement_list RBRACK .)
    FALSE           reduce using rule 74 (statement -> FUNCTION identifier LPAREN arguments RPAREN LBRACK statement_list RBRACK .)
    $end            reduce using rule 74 (statement -> FUNCTION identifier LPAREN arguments RPAREN LBRACK statement_list RBRACK .)
    RBRACK          reduce using rule 74 (statement -> FUNCTION identifier LPAREN arguments RPAREN LBRACK statement_list RBRACK .)


state 180

    (53) if_statement -> IF expression LBRACK statement_list RBRACK ELSE LBRACK statement_list . RBRACK
    (2) statement_list -> statement_list . statement
    (3) statement -> . identifier
    (4) statement -> . expression
    (5) statement -> . if_statement
    (7) statement -> . EXIT STMT_END
    (50) statement -> . identifier LSQBRACK expression RSQBRACK EQUALS expression STMT_END
    (57) statement -> . PRINT arguments STMT_END
    (58) statement -> . identifier PLUS_EQ expression STMT_END
    (59) statement -> . identifier MINUS_EQ expression STMT_END
    (60) statement -> . identifier MUL_EQ expression STMT_END
    (61) statement -> . identifier DIV_EQ expression STMT_END
    (62) statement -> . identifier EXP_EQ expression STMT_END
    (63) statement -> . identifier MOD_EQ expression STMT_END
    (69) statement -> . FOR identifier IN expression ARROW_LTR expression LBRACK statement_list RBRACK
    (70) statement -> . FOR identifier IN expression ARROW_RTL expression LBRACK statement_list RBRACK
    (71) statement -> . FOR identifier IN expression LBRACK statement_list RBRACK
    (72) statement -> . WHILE expression LBRACK statement_list RBRACK
    (73) statement -> . FOR LBRACK statement_list RBRACK
    (74) statement -> . FUNCTION identifier LPAREN arguments RPAREN LBRACK statement_list RBRACK
    (75) statement -> . FUNCTION identifier LBRACK statement_list RBRACK
    (76) statement -> . RETURN expression STMT_END
    (78) statement -> . identifier LPAREN arguments RPAREN STMT_END
    (6) identifier -> . IDENTIFIER
    (12) expression -> . expression PLUS expression
    (13) expression -> . expression MINUS expression
    (14) expression -> . expression MUL expression
    (15) expression -> . expression DIV expression
    (16) expression -> . expression EXP expression
    (17) expression -> . expression MOD expression
    (18) expression -> . expression BIT_AND expression
    (19) expression -> . expression BIT_OR expression
    (20) expression -> . expression BIT_XOR expression
    (21) expression -> . expression LSHIFT expression
    (22) expression -> . expression RSHIFT expression
    (31) expression -> . MINUS expression
    (32) expression -> . PLUS expression
    (33) expression -> . BIT_NEG expression
    (34) expression -> . NOT expression
    (35) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression QUESTION_MARK expression COLON expression
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable STMT_END
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier DOUBLE_PLUS
    (65) expression -> . identifier DOUBLE_MINUS
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (77) expression -> . identifier LPAREN arguments RPAREN
    (52) if_statement -> . IF expression LBRACK statement_list RBRACK
    (53) if_statement -> . IF expression LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK
    (54) if_statement -> . IF expression LBRACK statement_list RBRACK ELSE if_statement
    (8) primitive -> . NUM_INT
    (9) primitive -> . NUM_FLOAT
    (10) primitive -> . STRING
    (11) primitive -> . boolean
    (23) boolean -> . expression EQ expression
    (24) boolean -> . expression NEQ expression
    (25) boolean -> . expression GT expression
    (26) boolean -> . expression GTE expression
    (27) boolean -> . expression LT expression
    (28) boolean -> . expression LTE expression
    (29) boolean -> . expression AND expression
    (30) boolean -> . expression OR expression
    (36) boolean -> . TRUE
    (37) boolean -> . FALSE

    RBRACK          shift and go to state 183
    EXIT            shift and go to state 6
    PRINT           shift and go to state 8
    FOR             shift and go to state 9
    WHILE           shift and go to state 10
    FUNCTION        shift and go to state 11
    RETURN          shift and go to state 13
    IDENTIFIER      shift and go to state 14
    MINUS           shift and go to state 16
    PLUS            shift and go to state 15
    BIT_NEG         shift and go to state 17
    NOT             shift and go to state 18
    LPAREN          shift and go to state 12
    LSQBRACK        shift and go to state 7
    STRING          shift and go to state 20
    IF              shift and go to state 21
    NUM_INT         shift and go to state 22
    NUM_FLOAT       shift and go to state 23
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26

    expression                     shift and go to state 4
    statement                      shift and go to state 27
    identifier                     shift and go to state 3
    if_statement                   shift and go to state 5
    primitive                      shift and go to state 19
    boolean                        shift and go to state 24

state 181

    (69) statement -> FOR identifier IN expression ARROW_LTR expression LBRACK statement_list RBRACK .

    EXIT            reduce using rule 69 (statement -> FOR identifier IN expression ARROW_LTR expression LBRACK statement_list RBRACK .)
    PRINT           reduce using rule 69 (statement -> FOR identifier IN expression ARROW_LTR expression LBRACK statement_list RBRACK .)
    FOR             reduce using rule 69 (statement -> FOR identifier IN expression ARROW_LTR expression LBRACK statement_list RBRACK .)
    WHILE           reduce using rule 69 (statement -> FOR identifier IN expression ARROW_LTR expression LBRACK statement_list RBRACK .)
    FUNCTION        reduce using rule 69 (statement -> FOR identifier IN expression ARROW_LTR expression LBRACK statement_list RBRACK .)
    RETURN          reduce using rule 69 (statement -> FOR identifier IN expression ARROW_LTR expression LBRACK statement_list RBRACK .)
    IDENTIFIER      reduce using rule 69 (statement -> FOR identifier IN expression ARROW_LTR expression LBRACK statement_list RBRACK .)
    MINUS           reduce using rule 69 (statement -> FOR identifier IN expression ARROW_LTR expression LBRACK statement_list RBRACK .)
    PLUS            reduce using rule 69 (statement -> FOR identifier IN expression ARROW_LTR expression LBRACK statement_list RBRACK .)
    BIT_NEG         reduce using rule 69 (statement -> FOR identifier IN expression ARROW_LTR expression LBRACK statement_list RBRACK .)
    NOT             reduce using rule 69 (statement -> FOR identifier IN expression ARROW_LTR expression LBRACK statement_list RBRACK .)
    LPAREN          reduce using rule 69 (statement -> FOR identifier IN expression ARROW_LTR expression LBRACK statement_list RBRACK .)
    LSQBRACK        reduce using rule 69 (statement -> FOR identifier IN expression ARROW_LTR expression LBRACK statement_list RBRACK .)
    STRING          reduce using rule 69 (statement -> FOR identifier IN expression ARROW_LTR expression LBRACK statement_list RBRACK .)
    IF              reduce using rule 69 (statement -> FOR identifier IN expression ARROW_LTR expression LBRACK statement_list RBRACK .)
    NUM_INT         reduce using rule 69 (statement -> FOR identifier IN expression ARROW_LTR expression LBRACK statement_list RBRACK .)
    NUM_FLOAT       reduce using rule 69 (statement -> FOR identifier IN expression ARROW_LTR expression LBRACK statement_list RBRACK .)
    TRUE            reduce using rule 69 (statement -> FOR identifier IN expression ARROW_LTR expression LBRACK statement_list RBRACK .)
    FALSE           reduce using rule 69 (statement -> FOR identifier IN expression ARROW_LTR expression LBRACK statement_list RBRACK .)
    $end            reduce using rule 69 (statement -> FOR identifier IN expression ARROW_LTR expression LBRACK statement_list RBRACK .)
    RBRACK          reduce using rule 69 (statement -> FOR identifier IN expression ARROW_LTR expression LBRACK statement_list RBRACK .)


state 182

    (70) statement -> FOR identifier IN expression ARROW_RTL expression LBRACK statement_list RBRACK .

    EXIT            reduce using rule 70 (statement -> FOR identifier IN expression ARROW_RTL expression LBRACK statement_list RBRACK .)
    PRINT           reduce using rule 70 (statement -> FOR identifier IN expression ARROW_RTL expression LBRACK statement_list RBRACK .)
    FOR             reduce using rule 70 (statement -> FOR identifier IN expression ARROW_RTL expression LBRACK statement_list RBRACK .)
    WHILE           reduce using rule 70 (statement -> FOR identifier IN expression ARROW_RTL expression LBRACK statement_list RBRACK .)
    FUNCTION        reduce using rule 70 (statement -> FOR identifier IN expression ARROW_RTL expression LBRACK statement_list RBRACK .)
    RETURN          reduce using rule 70 (statement -> FOR identifier IN expression ARROW_RTL expression LBRACK statement_list RBRACK .)
    IDENTIFIER      reduce using rule 70 (statement -> FOR identifier IN expression ARROW_RTL expression LBRACK statement_list RBRACK .)
    MINUS           reduce using rule 70 (statement -> FOR identifier IN expression ARROW_RTL expression LBRACK statement_list RBRACK .)
    PLUS            reduce using rule 70 (statement -> FOR identifier IN expression ARROW_RTL expression LBRACK statement_list RBRACK .)
    BIT_NEG         reduce using rule 70 (statement -> FOR identifier IN expression ARROW_RTL expression LBRACK statement_list RBRACK .)
    NOT             reduce using rule 70 (statement -> FOR identifier IN expression ARROW_RTL expression LBRACK statement_list RBRACK .)
    LPAREN          reduce using rule 70 (statement -> FOR identifier IN expression ARROW_RTL expression LBRACK statement_list RBRACK .)
    LSQBRACK        reduce using rule 70 (statement -> FOR identifier IN expression ARROW_RTL expression LBRACK statement_list RBRACK .)
    STRING          reduce using rule 70 (statement -> FOR identifier IN expression ARROW_RTL expression LBRACK statement_list RBRACK .)
    IF              reduce using rule 70 (statement -> FOR identifier IN expression ARROW_RTL expression LBRACK statement_list RBRACK .)
    NUM_INT         reduce using rule 70 (statement -> FOR identifier IN expression ARROW_RTL expression LBRACK statement_list RBRACK .)
    NUM_FLOAT       reduce using rule 70 (statement -> FOR identifier IN expression ARROW_RTL expression LBRACK statement_list RBRACK .)
    TRUE            reduce using rule 70 (statement -> FOR identifier IN expression ARROW_RTL expression LBRACK statement_list RBRACK .)
    FALSE           reduce using rule 70 (statement -> FOR identifier IN expression ARROW_RTL expression LBRACK statement_list RBRACK .)
    $end            reduce using rule 70 (statement -> FOR identifier IN expression ARROW_RTL expression LBRACK statement_list RBRACK .)
    RBRACK          reduce using rule 70 (statement -> FOR identifier IN expression ARROW_RTL expression LBRACK statement_list RBRACK .)


state 183

    (53) if_statement -> IF expression LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK .

    EXIT            reduce using rule 53 (if_statement -> IF expression LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK .)
    PRINT           reduce using rule 53 (if_statement -> IF expression LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK .)
    FOR             reduce using rule 53 (if_statement -> IF expression LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK .)
    WHILE           reduce using rule 53 (if_statement -> IF expression LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK .)
    FUNCTION        reduce using rule 53 (if_statement -> IF expression LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK .)
    RETURN          reduce using rule 53 (if_statement -> IF expression LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK .)
    IDENTIFIER      reduce using rule 53 (if_statement -> IF expression LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK .)
    MINUS           reduce using rule 53 (if_statement -> IF expression LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK .)
    PLUS            reduce using rule 53 (if_statement -> IF expression LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK .)
    BIT_NEG         reduce using rule 53 (if_statement -> IF expression LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK .)
    NOT             reduce using rule 53 (if_statement -> IF expression LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK .)
    LPAREN          reduce using rule 53 (if_statement -> IF expression LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK .)
    LSQBRACK        reduce using rule 53 (if_statement -> IF expression LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK .)
    STRING          reduce using rule 53 (if_statement -> IF expression LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK .)
    IF              reduce using rule 53 (if_statement -> IF expression LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK .)
    NUM_INT         reduce using rule 53 (if_statement -> IF expression LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK .)
    NUM_FLOAT       reduce using rule 53 (if_statement -> IF expression LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK .)
    TRUE            reduce using rule 53 (if_statement -> IF expression LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK .)
    FALSE           reduce using rule 53 (if_statement -> IF expression LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK .)
    $end            reduce using rule 53 (if_statement -> IF expression LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK .)
    RBRACK          reduce using rule 53 (if_statement -> IF expression LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LSQBRACK in state 3 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 3 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 3 resolved as shift
WARNING: shift/reduce conflict for LSQBRACK in state 3 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 4 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 4 resolved as shift
WARNING: shift/reduce conflict for NOT in state 4 resolved as shift
WARNING: shift/reduce conflict for LSQBRACK in state 64 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 64 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 74 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 74 resolved as shift
WARNING: shift/reduce conflict for MUL in state 74 resolved as shift
WARNING: shift/reduce conflict for DIV in state 74 resolved as shift
WARNING: shift/reduce conflict for EXP in state 74 resolved as shift
WARNING: shift/reduce conflict for MOD in state 74 resolved as shift
WARNING: shift/reduce conflict for BIT_AND in state 74 resolved as shift
WARNING: shift/reduce conflict for BIT_OR in state 74 resolved as shift
WARNING: shift/reduce conflict for BIT_XOR in state 74 resolved as shift
WARNING: shift/reduce conflict for LSHIFT in state 74 resolved as shift
WARNING: shift/reduce conflict for RSHIFT in state 74 resolved as shift
WARNING: shift/reduce conflict for QUESTION_MARK in state 74 resolved as shift
WARNING: shift/reduce conflict for IN in state 74 resolved as shift
WARNING: shift/reduce conflict for NOT in state 74 resolved as shift
WARNING: shift/reduce conflict for EQ in state 74 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 74 resolved as shift
WARNING: shift/reduce conflict for GT in state 74 resolved as shift
WARNING: shift/reduce conflict for GTE in state 74 resolved as shift
WARNING: shift/reduce conflict for LT in state 74 resolved as shift
WARNING: shift/reduce conflict for LTE in state 74 resolved as shift
WARNING: shift/reduce conflict for AND in state 74 resolved as shift
WARNING: shift/reduce conflict for OR in state 74 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 96 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 96 resolved as shift
WARNING: shift/reduce conflict for MUL in state 96 resolved as shift
WARNING: shift/reduce conflict for DIV in state 96 resolved as shift
WARNING: shift/reduce conflict for EXP in state 96 resolved as shift
WARNING: shift/reduce conflict for MOD in state 96 resolved as shift
WARNING: shift/reduce conflict for BIT_AND in state 96 resolved as shift
WARNING: shift/reduce conflict for BIT_OR in state 96 resolved as shift
WARNING: shift/reduce conflict for BIT_XOR in state 96 resolved as shift
WARNING: shift/reduce conflict for LSHIFT in state 96 resolved as shift
WARNING: shift/reduce conflict for RSHIFT in state 96 resolved as shift
WARNING: shift/reduce conflict for QUESTION_MARK in state 96 resolved as shift
WARNING: shift/reduce conflict for IN in state 96 resolved as shift
WARNING: shift/reduce conflict for NOT in state 96 resolved as shift
WARNING: shift/reduce conflict for EQ in state 96 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 96 resolved as shift
WARNING: shift/reduce conflict for GT in state 96 resolved as shift
WARNING: shift/reduce conflict for GTE in state 96 resolved as shift
WARNING: shift/reduce conflict for LT in state 96 resolved as shift
WARNING: shift/reduce conflict for LTE in state 96 resolved as shift
WARNING: shift/reduce conflict for AND in state 96 resolved as shift
WARNING: shift/reduce conflict for OR in state 96 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 97 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 97 resolved as shift
WARNING: shift/reduce conflict for MUL in state 97 resolved as shift
WARNING: shift/reduce conflict for DIV in state 97 resolved as shift
WARNING: shift/reduce conflict for EXP in state 97 resolved as shift
WARNING: shift/reduce conflict for MOD in state 97 resolved as shift
WARNING: shift/reduce conflict for BIT_AND in state 97 resolved as shift
WARNING: shift/reduce conflict for BIT_OR in state 97 resolved as shift
WARNING: shift/reduce conflict for BIT_XOR in state 97 resolved as shift
WARNING: shift/reduce conflict for LSHIFT in state 97 resolved as shift
WARNING: shift/reduce conflict for RSHIFT in state 97 resolved as shift
WARNING: shift/reduce conflict for QUESTION_MARK in state 97 resolved as shift
WARNING: shift/reduce conflict for IN in state 97 resolved as shift
WARNING: shift/reduce conflict for NOT in state 97 resolved as shift
WARNING: shift/reduce conflict for EQ in state 97 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 97 resolved as shift
WARNING: shift/reduce conflict for GT in state 97 resolved as shift
WARNING: shift/reduce conflict for GTE in state 97 resolved as shift
WARNING: shift/reduce conflict for LT in state 97 resolved as shift
WARNING: shift/reduce conflict for LTE in state 97 resolved as shift
WARNING: shift/reduce conflict for AND in state 97 resolved as shift
WARNING: shift/reduce conflict for OR in state 97 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 98 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 98 resolved as shift
WARNING: shift/reduce conflict for MUL in state 98 resolved as shift
WARNING: shift/reduce conflict for DIV in state 98 resolved as shift
WARNING: shift/reduce conflict for EXP in state 98 resolved as shift
WARNING: shift/reduce conflict for MOD in state 98 resolved as shift
WARNING: shift/reduce conflict for BIT_AND in state 98 resolved as shift
WARNING: shift/reduce conflict for BIT_OR in state 98 resolved as shift
WARNING: shift/reduce conflict for BIT_XOR in state 98 resolved as shift
WARNING: shift/reduce conflict for LSHIFT in state 98 resolved as shift
WARNING: shift/reduce conflict for RSHIFT in state 98 resolved as shift
WARNING: shift/reduce conflict for QUESTION_MARK in state 98 resolved as shift
WARNING: shift/reduce conflict for IN in state 98 resolved as shift
WARNING: shift/reduce conflict for NOT in state 98 resolved as shift
WARNING: shift/reduce conflict for EQ in state 98 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 98 resolved as shift
WARNING: shift/reduce conflict for GT in state 98 resolved as shift
WARNING: shift/reduce conflict for GTE in state 98 resolved as shift
WARNING: shift/reduce conflict for LT in state 98 resolved as shift
WARNING: shift/reduce conflict for LTE in state 98 resolved as shift
WARNING: shift/reduce conflict for AND in state 98 resolved as shift
WARNING: shift/reduce conflict for OR in state 98 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 99 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 99 resolved as shift
WARNING: shift/reduce conflict for MUL in state 99 resolved as shift
WARNING: shift/reduce conflict for DIV in state 99 resolved as shift
WARNING: shift/reduce conflict for EXP in state 99 resolved as shift
WARNING: shift/reduce conflict for MOD in state 99 resolved as shift
WARNING: shift/reduce conflict for BIT_AND in state 99 resolved as shift
WARNING: shift/reduce conflict for BIT_OR in state 99 resolved as shift
WARNING: shift/reduce conflict for BIT_XOR in state 99 resolved as shift
WARNING: shift/reduce conflict for LSHIFT in state 99 resolved as shift
WARNING: shift/reduce conflict for RSHIFT in state 99 resolved as shift
WARNING: shift/reduce conflict for QUESTION_MARK in state 99 resolved as shift
WARNING: shift/reduce conflict for IN in state 99 resolved as shift
WARNING: shift/reduce conflict for NOT in state 99 resolved as shift
WARNING: shift/reduce conflict for EQ in state 99 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 99 resolved as shift
WARNING: shift/reduce conflict for GT in state 99 resolved as shift
WARNING: shift/reduce conflict for GTE in state 99 resolved as shift
WARNING: shift/reduce conflict for LT in state 99 resolved as shift
WARNING: shift/reduce conflict for LTE in state 99 resolved as shift
WARNING: shift/reduce conflict for AND in state 99 resolved as shift
WARNING: shift/reduce conflict for OR in state 99 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 100 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 100 resolved as shift
WARNING: shift/reduce conflict for MUL in state 100 resolved as shift
WARNING: shift/reduce conflict for DIV in state 100 resolved as shift
WARNING: shift/reduce conflict for EXP in state 100 resolved as shift
WARNING: shift/reduce conflict for MOD in state 100 resolved as shift
WARNING: shift/reduce conflict for BIT_AND in state 100 resolved as shift
WARNING: shift/reduce conflict for BIT_OR in state 100 resolved as shift
WARNING: shift/reduce conflict for BIT_XOR in state 100 resolved as shift
WARNING: shift/reduce conflict for LSHIFT in state 100 resolved as shift
WARNING: shift/reduce conflict for RSHIFT in state 100 resolved as shift
WARNING: shift/reduce conflict for QUESTION_MARK in state 100 resolved as shift
WARNING: shift/reduce conflict for IN in state 100 resolved as shift
WARNING: shift/reduce conflict for NOT in state 100 resolved as shift
WARNING: shift/reduce conflict for EQ in state 100 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 100 resolved as shift
WARNING: shift/reduce conflict for GT in state 100 resolved as shift
WARNING: shift/reduce conflict for GTE in state 100 resolved as shift
WARNING: shift/reduce conflict for LT in state 100 resolved as shift
WARNING: shift/reduce conflict for LTE in state 100 resolved as shift
WARNING: shift/reduce conflict for AND in state 100 resolved as shift
WARNING: shift/reduce conflict for OR in state 100 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 102 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 102 resolved as shift
WARNING: shift/reduce conflict for MUL in state 102 resolved as shift
WARNING: shift/reduce conflict for DIV in state 102 resolved as shift
WARNING: shift/reduce conflict for EXP in state 102 resolved as shift
WARNING: shift/reduce conflict for MOD in state 102 resolved as shift
WARNING: shift/reduce conflict for BIT_AND in state 102 resolved as shift
WARNING: shift/reduce conflict for BIT_OR in state 102 resolved as shift
WARNING: shift/reduce conflict for BIT_XOR in state 102 resolved as shift
WARNING: shift/reduce conflict for LSHIFT in state 102 resolved as shift
WARNING: shift/reduce conflict for RSHIFT in state 102 resolved as shift
WARNING: shift/reduce conflict for QUESTION_MARK in state 102 resolved as shift
WARNING: shift/reduce conflict for IN in state 102 resolved as shift
WARNING: shift/reduce conflict for NOT in state 102 resolved as shift
WARNING: shift/reduce conflict for EQ in state 102 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 102 resolved as shift
WARNING: shift/reduce conflict for GT in state 102 resolved as shift
WARNING: shift/reduce conflict for GTE in state 102 resolved as shift
WARNING: shift/reduce conflict for LT in state 102 resolved as shift
WARNING: shift/reduce conflict for LTE in state 102 resolved as shift
WARNING: shift/reduce conflict for AND in state 102 resolved as shift
WARNING: shift/reduce conflict for OR in state 102 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 104 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 104 resolved as shift
WARNING: shift/reduce conflict for MUL in state 104 resolved as shift
WARNING: shift/reduce conflict for DIV in state 104 resolved as shift
WARNING: shift/reduce conflict for EXP in state 104 resolved as shift
WARNING: shift/reduce conflict for MOD in state 104 resolved as shift
WARNING: shift/reduce conflict for BIT_AND in state 104 resolved as shift
WARNING: shift/reduce conflict for BIT_OR in state 104 resolved as shift
WARNING: shift/reduce conflict for BIT_XOR in state 104 resolved as shift
WARNING: shift/reduce conflict for LSHIFT in state 104 resolved as shift
WARNING: shift/reduce conflict for RSHIFT in state 104 resolved as shift
WARNING: shift/reduce conflict for QUESTION_MARK in state 104 resolved as shift
WARNING: shift/reduce conflict for IN in state 104 resolved as shift
WARNING: shift/reduce conflict for NOT in state 104 resolved as shift
WARNING: shift/reduce conflict for EQ in state 104 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 104 resolved as shift
WARNING: shift/reduce conflict for GT in state 104 resolved as shift
WARNING: shift/reduce conflict for GTE in state 104 resolved as shift
WARNING: shift/reduce conflict for LT in state 104 resolved as shift
WARNING: shift/reduce conflict for LTE in state 104 resolved as shift
WARNING: shift/reduce conflict for AND in state 104 resolved as shift
WARNING: shift/reduce conflict for OR in state 104 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 105 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 105 resolved as shift
WARNING: shift/reduce conflict for MUL in state 105 resolved as shift
WARNING: shift/reduce conflict for DIV in state 105 resolved as shift
WARNING: shift/reduce conflict for EXP in state 105 resolved as shift
WARNING: shift/reduce conflict for MOD in state 105 resolved as shift
WARNING: shift/reduce conflict for BIT_AND in state 105 resolved as shift
WARNING: shift/reduce conflict for BIT_OR in state 105 resolved as shift
WARNING: shift/reduce conflict for BIT_XOR in state 105 resolved as shift
WARNING: shift/reduce conflict for LSHIFT in state 105 resolved as shift
WARNING: shift/reduce conflict for RSHIFT in state 105 resolved as shift
WARNING: shift/reduce conflict for QUESTION_MARK in state 105 resolved as shift
WARNING: shift/reduce conflict for IN in state 105 resolved as shift
WARNING: shift/reduce conflict for NOT in state 105 resolved as shift
WARNING: shift/reduce conflict for EQ in state 105 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 105 resolved as shift
WARNING: shift/reduce conflict for GT in state 105 resolved as shift
WARNING: shift/reduce conflict for GTE in state 105 resolved as shift
WARNING: shift/reduce conflict for LT in state 105 resolved as shift
WARNING: shift/reduce conflict for LTE in state 105 resolved as shift
WARNING: shift/reduce conflict for AND in state 105 resolved as shift
WARNING: shift/reduce conflict for OR in state 105 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 106 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 106 resolved as shift
WARNING: shift/reduce conflict for MUL in state 106 resolved as shift
WARNING: shift/reduce conflict for DIV in state 106 resolved as shift
WARNING: shift/reduce conflict for EXP in state 106 resolved as shift
WARNING: shift/reduce conflict for MOD in state 106 resolved as shift
WARNING: shift/reduce conflict for BIT_AND in state 106 resolved as shift
WARNING: shift/reduce conflict for BIT_OR in state 106 resolved as shift
WARNING: shift/reduce conflict for BIT_XOR in state 106 resolved as shift
WARNING: shift/reduce conflict for LSHIFT in state 106 resolved as shift
WARNING: shift/reduce conflict for RSHIFT in state 106 resolved as shift
WARNING: shift/reduce conflict for QUESTION_MARK in state 106 resolved as shift
WARNING: shift/reduce conflict for IN in state 106 resolved as shift
WARNING: shift/reduce conflict for NOT in state 106 resolved as shift
WARNING: shift/reduce conflict for EQ in state 106 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 106 resolved as shift
WARNING: shift/reduce conflict for GT in state 106 resolved as shift
WARNING: shift/reduce conflict for GTE in state 106 resolved as shift
WARNING: shift/reduce conflict for LT in state 106 resolved as shift
WARNING: shift/reduce conflict for LTE in state 106 resolved as shift
WARNING: shift/reduce conflict for AND in state 106 resolved as shift
WARNING: shift/reduce conflict for OR in state 106 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 107 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 107 resolved as shift
WARNING: shift/reduce conflict for MUL in state 107 resolved as shift
WARNING: shift/reduce conflict for DIV in state 107 resolved as shift
WARNING: shift/reduce conflict for EXP in state 107 resolved as shift
WARNING: shift/reduce conflict for MOD in state 107 resolved as shift
WARNING: shift/reduce conflict for BIT_AND in state 107 resolved as shift
WARNING: shift/reduce conflict for BIT_OR in state 107 resolved as shift
WARNING: shift/reduce conflict for BIT_XOR in state 107 resolved as shift
WARNING: shift/reduce conflict for LSHIFT in state 107 resolved as shift
WARNING: shift/reduce conflict for RSHIFT in state 107 resolved as shift
WARNING: shift/reduce conflict for QUESTION_MARK in state 107 resolved as shift
WARNING: shift/reduce conflict for IN in state 107 resolved as shift
WARNING: shift/reduce conflict for NOT in state 107 resolved as shift
WARNING: shift/reduce conflict for EQ in state 107 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 107 resolved as shift
WARNING: shift/reduce conflict for GT in state 107 resolved as shift
WARNING: shift/reduce conflict for GTE in state 107 resolved as shift
WARNING: shift/reduce conflict for LT in state 107 resolved as shift
WARNING: shift/reduce conflict for LTE in state 107 resolved as shift
WARNING: shift/reduce conflict for AND in state 107 resolved as shift
WARNING: shift/reduce conflict for OR in state 107 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 108 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 108 resolved as shift
WARNING: shift/reduce conflict for MUL in state 108 resolved as shift
WARNING: shift/reduce conflict for DIV in state 108 resolved as shift
WARNING: shift/reduce conflict for EXP in state 108 resolved as shift
WARNING: shift/reduce conflict for MOD in state 108 resolved as shift
WARNING: shift/reduce conflict for BIT_AND in state 108 resolved as shift
WARNING: shift/reduce conflict for BIT_OR in state 108 resolved as shift
WARNING: shift/reduce conflict for BIT_XOR in state 108 resolved as shift
WARNING: shift/reduce conflict for LSHIFT in state 108 resolved as shift
WARNING: shift/reduce conflict for RSHIFT in state 108 resolved as shift
WARNING: shift/reduce conflict for QUESTION_MARK in state 108 resolved as shift
WARNING: shift/reduce conflict for IN in state 108 resolved as shift
WARNING: shift/reduce conflict for NOT in state 108 resolved as shift
WARNING: shift/reduce conflict for EQ in state 108 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 108 resolved as shift
WARNING: shift/reduce conflict for GT in state 108 resolved as shift
WARNING: shift/reduce conflict for GTE in state 108 resolved as shift
WARNING: shift/reduce conflict for LT in state 108 resolved as shift
WARNING: shift/reduce conflict for LTE in state 108 resolved as shift
WARNING: shift/reduce conflict for AND in state 108 resolved as shift
WARNING: shift/reduce conflict for OR in state 108 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 109 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 109 resolved as shift
WARNING: shift/reduce conflict for MUL in state 109 resolved as shift
WARNING: shift/reduce conflict for DIV in state 109 resolved as shift
WARNING: shift/reduce conflict for EXP in state 109 resolved as shift
WARNING: shift/reduce conflict for MOD in state 109 resolved as shift
WARNING: shift/reduce conflict for BIT_AND in state 109 resolved as shift
WARNING: shift/reduce conflict for BIT_OR in state 109 resolved as shift
WARNING: shift/reduce conflict for BIT_XOR in state 109 resolved as shift
WARNING: shift/reduce conflict for LSHIFT in state 109 resolved as shift
WARNING: shift/reduce conflict for RSHIFT in state 109 resolved as shift
WARNING: shift/reduce conflict for QUESTION_MARK in state 109 resolved as shift
WARNING: shift/reduce conflict for IN in state 109 resolved as shift
WARNING: shift/reduce conflict for NOT in state 109 resolved as shift
WARNING: shift/reduce conflict for EQ in state 109 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 109 resolved as shift
WARNING: shift/reduce conflict for GT in state 109 resolved as shift
WARNING: shift/reduce conflict for GTE in state 109 resolved as shift
WARNING: shift/reduce conflict for LT in state 109 resolved as shift
WARNING: shift/reduce conflict for LTE in state 109 resolved as shift
WARNING: shift/reduce conflict for AND in state 109 resolved as shift
WARNING: shift/reduce conflict for OR in state 109 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 110 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 110 resolved as shift
WARNING: shift/reduce conflict for MUL in state 110 resolved as shift
WARNING: shift/reduce conflict for DIV in state 110 resolved as shift
WARNING: shift/reduce conflict for EXP in state 110 resolved as shift
WARNING: shift/reduce conflict for MOD in state 110 resolved as shift
WARNING: shift/reduce conflict for BIT_AND in state 110 resolved as shift
WARNING: shift/reduce conflict for BIT_OR in state 110 resolved as shift
WARNING: shift/reduce conflict for BIT_XOR in state 110 resolved as shift
WARNING: shift/reduce conflict for LSHIFT in state 110 resolved as shift
WARNING: shift/reduce conflict for RSHIFT in state 110 resolved as shift
WARNING: shift/reduce conflict for QUESTION_MARK in state 110 resolved as shift
WARNING: shift/reduce conflict for IN in state 110 resolved as shift
WARNING: shift/reduce conflict for NOT in state 110 resolved as shift
WARNING: shift/reduce conflict for EQ in state 110 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 110 resolved as shift
WARNING: shift/reduce conflict for GT in state 110 resolved as shift
WARNING: shift/reduce conflict for GTE in state 110 resolved as shift
WARNING: shift/reduce conflict for LT in state 110 resolved as shift
WARNING: shift/reduce conflict for LTE in state 110 resolved as shift
WARNING: shift/reduce conflict for AND in state 110 resolved as shift
WARNING: shift/reduce conflict for OR in state 110 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 111 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 111 resolved as shift
WARNING: shift/reduce conflict for MUL in state 111 resolved as shift
WARNING: shift/reduce conflict for DIV in state 111 resolved as shift
WARNING: shift/reduce conflict for EXP in state 111 resolved as shift
WARNING: shift/reduce conflict for MOD in state 111 resolved as shift
WARNING: shift/reduce conflict for BIT_AND in state 111 resolved as shift
WARNING: shift/reduce conflict for BIT_OR in state 111 resolved as shift
WARNING: shift/reduce conflict for BIT_XOR in state 111 resolved as shift
WARNING: shift/reduce conflict for LSHIFT in state 111 resolved as shift
WARNING: shift/reduce conflict for RSHIFT in state 111 resolved as shift
WARNING: shift/reduce conflict for QUESTION_MARK in state 111 resolved as shift
WARNING: shift/reduce conflict for IN in state 111 resolved as shift
WARNING: shift/reduce conflict for NOT in state 111 resolved as shift
WARNING: shift/reduce conflict for EQ in state 111 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 111 resolved as shift
WARNING: shift/reduce conflict for GT in state 111 resolved as shift
WARNING: shift/reduce conflict for GTE in state 111 resolved as shift
WARNING: shift/reduce conflict for LT in state 111 resolved as shift
WARNING: shift/reduce conflict for LTE in state 111 resolved as shift
WARNING: shift/reduce conflict for AND in state 111 resolved as shift
WARNING: shift/reduce conflict for OR in state 111 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 138 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 138 resolved as shift
WARNING: shift/reduce conflict for MUL in state 138 resolved as shift
WARNING: shift/reduce conflict for DIV in state 138 resolved as shift
WARNING: shift/reduce conflict for EXP in state 138 resolved as shift
WARNING: shift/reduce conflict for MOD in state 138 resolved as shift
WARNING: shift/reduce conflict for BIT_AND in state 138 resolved as shift
WARNING: shift/reduce conflict for BIT_OR in state 138 resolved as shift
WARNING: shift/reduce conflict for BIT_XOR in state 138 resolved as shift
WARNING: shift/reduce conflict for LSHIFT in state 138 resolved as shift
WARNING: shift/reduce conflict for RSHIFT in state 138 resolved as shift
WARNING: shift/reduce conflict for QUESTION_MARK in state 138 resolved as shift
WARNING: shift/reduce conflict for IN in state 138 resolved as shift
WARNING: shift/reduce conflict for NOT in state 138 resolved as shift
WARNING: shift/reduce conflict for EQ in state 138 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 138 resolved as shift
WARNING: shift/reduce conflict for GT in state 138 resolved as shift
WARNING: shift/reduce conflict for GTE in state 138 resolved as shift
WARNING: shift/reduce conflict for LT in state 138 resolved as shift
WARNING: shift/reduce conflict for LTE in state 138 resolved as shift
WARNING: shift/reduce conflict for AND in state 138 resolved as shift
WARNING: shift/reduce conflict for OR in state 138 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 153 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 153 resolved as shift
WARNING: shift/reduce conflict for MUL in state 153 resolved as shift
WARNING: shift/reduce conflict for DIV in state 153 resolved as shift
WARNING: shift/reduce conflict for EXP in state 153 resolved as shift
WARNING: shift/reduce conflict for MOD in state 153 resolved as shift
WARNING: shift/reduce conflict for BIT_AND in state 153 resolved as shift
WARNING: shift/reduce conflict for BIT_OR in state 153 resolved as shift
WARNING: shift/reduce conflict for BIT_XOR in state 153 resolved as shift
WARNING: shift/reduce conflict for LSHIFT in state 153 resolved as shift
WARNING: shift/reduce conflict for RSHIFT in state 153 resolved as shift
WARNING: shift/reduce conflict for QUESTION_MARK in state 153 resolved as shift
WARNING: shift/reduce conflict for IN in state 153 resolved as shift
WARNING: shift/reduce conflict for NOT in state 153 resolved as shift
WARNING: shift/reduce conflict for EQ in state 153 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 153 resolved as shift
WARNING: shift/reduce conflict for GT in state 153 resolved as shift
WARNING: shift/reduce conflict for GTE in state 153 resolved as shift
WARNING: shift/reduce conflict for LT in state 153 resolved as shift
WARNING: shift/reduce conflict for LTE in state 153 resolved as shift
WARNING: shift/reduce conflict for AND in state 153 resolved as shift
WARNING: shift/reduce conflict for OR in state 153 resolved as shift
WARNING: reduce/reduce conflict in state 3 resolved using rule (statement -> identifier)
WARNING: rejected rule (expression -> identifier) in state 3
WARNING: reduce/reduce conflict in state 20 resolved using rule (primitive -> STRING)
WARNING: rejected rule (expression -> STRING) in state 20
WARNING: reduce/reduce conflict in state 80 resolved using rule (assignable -> primitive)
WARNING: rejected rule (expression -> primitive) in state 80
WARNING: reduce/reduce conflict in state 82 resolved using rule (primitive -> STRING)
WARNING: rejected rule (expression -> STRING) in state 82
WARNING: Rule (expression -> STRING) is never reduced
